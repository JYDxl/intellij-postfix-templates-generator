## Templates for JYD_XL Custom Postfix Templates ##

.trace : org.slf4j.Logger.trace
	java.lang.Object [org.slf4j.Logger]  →  log.trace($expr$, $arg$)

.debug : org.slf4j.Logger.debug
	java.lang.Object [org.slf4j.Logger]  →  log.debug($expr$, $arg$)

.info : org.slf4j.Logger.info
	java.lang.Object [org.slf4j.Logger]  →  log.info($expr$, $arg$)

.warn : org.slf4j.Logger.warn
	java.lang.Object [org.slf4j.Logger]  →  log.warn($expr$, $arg$)

.error : org.slf4j.Logger.error
	java.lang.Object [org.slf4j.Logger]  →  log.error($expr$, $arg$)


## BitUtil

.lastN : org.github.util.BitUtil.lastN
	LONG [org.github.util.BitUtil]  →  org.github.util.BitUtil.lastN($expr$, $arg$)
	INT [org.github.util.BitUtil]  →  org.github.util.BitUtil.lastN($expr$, $arg$)


## FuncUtil

.throwing : org.github.util.FuncUtil.throwing
	java.lang.Object [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.throwing()

.map : org.github.util.FuncUtil.map
	java.lang.Object [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.map($expr$, $arg$)

.nonNull : org.github.util.FuncUtil.nonNull
	java.lang.Object [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.nonNull()

.optional : org.github.util.FuncUtil.optional
	java.util.function.Function [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.optional($expr$, $arg$)

.stream : org.github.util.FuncUtil.stream
	java.util.Collection [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.stream($expr$)

.pass : org.github.util.FuncUtil.pass
	java.lang.Object [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.pass()


## TreeUtil

.findAllChild : org.github.util.tree.TreeUtil.findAllChild
	java.util.List [org.github.util.tree.TreeUtil]  →  org.github.util.tree.TreeUtil.findAllChild($expr$, $arg$)

.buildTree : org.github.util.tree.TreeUtil.buildTree
	java.util.List [org.github.util.tree.TreeUtil]  →  org.github.util.tree.TreeUtil.buildTree($expr$, $arg$)


## ProxyUtil

.proxy : cn.hutool.aop.ProxyUtil.proxy
	java.lang.Object [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.proxy($expr$, $arg$)

.newProxyInstance : cn.hutool.aop.ProxyUtil.newProxyInstance
	java.lang.reflect.InvocationHandler [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.newProxyInstance($expr$, $arg$)
	java.lang.ClassLoader [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.newProxyInstance($expr$, $arg$)


## BloomFilterUtil

.createBitMap : cn.hutool.bloomfilter.BloomFilterUtil.createBitMap
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  cn.hutool.bloomfilter.BloomFilterUtil.createBitMap($expr$)

.createBitSet : cn.hutool.bloomfilter.BloomFilterUtil.createBitSet
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  cn.hutool.bloomfilter.BloomFilterUtil.createBitSet($expr$, $arg$)


## CacheUtil

.newWeakCache : cn.hutool.cache.CacheUtil.newWeakCache
	LONG [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newWeakCache($expr$)

.newLRUCache : cn.hutool.cache.CacheUtil.newLRUCache
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newLRUCache($expr$, $arg$)

.newLFUCache : cn.hutool.cache.CacheUtil.newLFUCache
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newLFUCache($expr$, $arg$)

.newNoCache : cn.hutool.cache.CacheUtil.newNoCache
	java.lang.Object [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newNoCache()

.newTimedCache : cn.hutool.cache.CacheUtil.newTimedCache
	LONG [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newTimedCache($expr$)

.newFIFOCache : cn.hutool.cache.CacheUtil.newFIFOCache
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newFIFOCache($expr$, $arg$)


## CaptchaUtil

.createLineCaptcha : cn.hutool.captcha.CaptchaUtil.createLineCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createLineCaptcha($expr$, $arg$)

.createShearCaptcha : cn.hutool.captcha.CaptchaUtil.createShearCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createShearCaptcha($expr$, $arg$)

.createCircleCaptcha : cn.hutool.captcha.CaptchaUtil.createCircleCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createCircleCaptcha($expr$, $arg$)

.createGifCaptcha : cn.hutool.captcha.CaptchaUtil.createGifCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createGifCaptcha($expr$, $arg$)


## AnnotationUtil

.getTargetType : cn.hutool.core.annotation.AnnotationUtil.getTargetType
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getTargetType($expr$)

.getAnnotations : cn.hutool.core.annotation.AnnotationUtil.getAnnotations
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotations($expr$, $arg$)

.isDocumented : cn.hutool.core.annotation.AnnotationUtil.isDocumented
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isDocumented($expr$)

.setValue : cn.hutool.core.annotation.AnnotationUtil.setValue
	java.lang.annotation.Annotation [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.setValue($expr$, $arg$)

.getAnnotationValue : cn.hutool.core.annotation.AnnotationUtil.getAnnotationValue
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotationValue($expr$, $arg$)

.toCombination : cn.hutool.core.annotation.AnnotationUtil.toCombination
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.toCombination($expr$)

.isInherited : cn.hutool.core.annotation.AnnotationUtil.isInherited
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isInherited($expr$)

.getRetentionPolicy : cn.hutool.core.annotation.AnnotationUtil.getRetentionPolicy
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getRetentionPolicy($expr$)

.getAnnotation : cn.hutool.core.annotation.AnnotationUtil.getAnnotation
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotation($expr$, $arg$)

.hasAnnotation : cn.hutool.core.annotation.AnnotationUtil.hasAnnotation
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.hasAnnotation($expr$, $arg$)

.getAnnotationValueMap : cn.hutool.core.annotation.AnnotationUtil.getAnnotationValueMap
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotationValueMap($expr$, $arg$)


## Resources

.asByteSource : com.google.common.io.Resources.asByteSource
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.asByteSource($expr$)

.getResource : com.google.common.io.Resources.getResource
	java.lang.String [com.google.common.io.Resources]  →  com.google.common.io.Resources.getResource($expr$)
	java.lang.Class [com.google.common.io.Resources]  →  com.google.common.io.Resources.getResource($expr$, $arg$)

.readLines : com.google.common.io.Resources.readLines
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.readLines($expr$, $arg$)

.copy : com.google.common.io.Resources.copy
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.copy($expr$, $arg$)

.toString : com.google.common.io.Resources.toString
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.toString($expr$, $arg$)

.toByteArray : com.google.common.io.Resources.toByteArray
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.toByteArray($expr$)

.asCharSource : com.google.common.io.Resources.asCharSource
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.asCharSource($expr$, $arg$)


## Multimaps

.newSortedSetMultimap : com.google.common.collect.Multimaps.newSortedSetMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.newSortedSetMultimap($expr$, $arg$)

.synchronizedMultimap : com.google.common.collect.Multimaps.synchronizedMultimap
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.synchronizedMultimap($expr$)

.forMap : com.google.common.collect.Multimaps.forMap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.forMap($expr$)

.filterKeys : com.google.common.collect.Multimaps.filterKeys
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterKeys($expr$, $arg$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterKeys($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterKeys($expr$, $arg$)

.toMultimap : com.google.common.collect.Multimaps.toMultimap
	java.util.function.Function [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.toMultimap($expr$, $arg$)

.filterEntries : com.google.common.collect.Multimaps.filterEntries
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterEntries($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterEntries($expr$, $arg$)

.invertFrom : com.google.common.collect.Multimaps.invertFrom
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.invertFrom($expr$, $arg$)

.transformEntries : com.google.common.collect.Multimaps.transformEntries
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.transformEntries($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.transformEntries($expr$, $arg$)

.unmodifiableListMultimap : com.google.common.collect.Multimaps.unmodifiableListMultimap
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.unmodifiableListMultimap($expr$)

.newListMultimap : com.google.common.collect.Multimaps.newListMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.newListMultimap($expr$, $arg$)

.unmodifiableSetMultimap : com.google.common.collect.Multimaps.unmodifiableSetMultimap
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.unmodifiableSetMultimap($expr$)

.newSetMultimap : com.google.common.collect.Multimaps.newSetMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.newSetMultimap($expr$, $arg$)

.newMultimap : com.google.common.collect.Multimaps.newMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.newMultimap($expr$, $arg$)

.unmodifiableMultimap : com.google.common.collect.Multimaps.unmodifiableMultimap
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.unmodifiableMultimap($expr$)

.asMap : com.google.common.collect.Multimaps.asMap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.asMap($expr$)
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.asMap($expr$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.asMap($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.asMap($expr$)

.flatteningToMultimap : com.google.common.collect.Multimaps.flatteningToMultimap
	java.util.function.Function [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.flatteningToMultimap($expr$, $arg$)

.transformValues : com.google.common.collect.Multimaps.transformValues
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.transformValues($expr$, $arg$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.transformValues($expr$, $arg$)

.synchronizedListMultimap : com.google.common.collect.Multimaps.synchronizedListMultimap
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.synchronizedListMultimap($expr$)

.synchronizedSortedSetMultimap : com.google.common.collect.Multimaps.synchronizedSortedSetMultimap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.synchronizedSortedSetMultimap($expr$)

.filterValues : com.google.common.collect.Multimaps.filterValues
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterValues($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterValues($expr$, $arg$)

.unmodifiableSortedSetMultimap : com.google.common.collect.Multimaps.unmodifiableSortedSetMultimap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.unmodifiableSortedSetMultimap($expr$)

.synchronizedSetMultimap : com.google.common.collect.Multimaps.synchronizedSetMultimap
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.synchronizedSetMultimap($expr$)

.index : com.google.common.collect.Multimaps.index
	java.lang.Iterable [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.index($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.index($expr$, $arg$)


## Lists

.asList : com.google.common.collect.Lists.asList
	java.lang.Object [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.asList($expr$, $arg$)

.newArrayList : com.google.common.collect.Lists.newArrayList
	ARRAY [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayList($expr$)
	java.lang.Iterable [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayList($expr$)
	java.util.Iterator [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayList()

.partition : com.google.common.collect.Lists.partition
	java.util.List [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.partition($expr$, $arg$)

.cartesianProduct : com.google.common.collect.Lists.cartesianProduct
	ARRAY [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.cartesianProduct($expr$)
	java.util.List [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.cartesianProduct($expr$)

.charactersOf : com.google.common.collect.Lists.charactersOf
	java.lang.String [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.charactersOf($expr$)
	java.lang.CharSequence [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.charactersOf($expr$)

.reverse : com.google.common.collect.Lists.reverse
	java.util.List [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.reverse($expr$)

.newArrayListWithExpectedSize : com.google.common.collect.Lists.newArrayListWithExpectedSize
	INT [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayListWithExpectedSize($expr$)

.newCopyOnWriteArrayList : com.google.common.collect.Lists.newCopyOnWriteArrayList
	java.lang.Iterable [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newCopyOnWriteArrayList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newCopyOnWriteArrayList()

.newArrayListWithCapacity : com.google.common.collect.Lists.newArrayListWithCapacity
	INT [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayListWithCapacity($expr$)

.newLinkedList : com.google.common.collect.Lists.newLinkedList
	java.lang.Iterable [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newLinkedList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newLinkedList()

.transform : com.google.common.collect.Lists.transform
	java.util.List [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.transform($expr$, $arg$)


## Sets

.subSet : com.google.common.collect.Sets.subSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.subSet($expr$, $arg$)

.unmodifiableNavigableSet : com.google.common.collect.Sets.unmodifiableNavigableSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.unmodifiableNavigableSet($expr$)

.symmetricDifference : com.google.common.collect.Sets.symmetricDifference
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.symmetricDifference($expr$, $arg$)

.newConcurrentHashSet : com.google.common.collect.Sets.newConcurrentHashSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newConcurrentHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newConcurrentHashSet()

.union : com.google.common.collect.Sets.union
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.union($expr$, $arg$)

.intersection : com.google.common.collect.Sets.intersection
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.intersection($expr$, $arg$)

.synchronizedNavigableSet : com.google.common.collect.Sets.synchronizedNavigableSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.synchronizedNavigableSet($expr$)

.newLinkedHashSet : com.google.common.collect.Sets.newLinkedHashSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newLinkedHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newLinkedHashSet()

.cartesianProduct : com.google.common.collect.Sets.cartesianProduct
	ARRAY [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.cartesianProduct($expr$)
	java.util.List [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.cartesianProduct($expr$)

.newCopyOnWriteArraySet : com.google.common.collect.Sets.newCopyOnWriteArraySet
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newCopyOnWriteArraySet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newCopyOnWriteArraySet()

.filter : com.google.common.collect.Sets.filter
	java.util.SortedSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.filter($expr$, $arg$)
	java.util.NavigableSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.filter($expr$, $arg$)
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.filter($expr$, $arg$)

.newHashSetWithExpectedSize : com.google.common.collect.Sets.newHashSetWithExpectedSize
	INT [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSetWithExpectedSize($expr$)

.newEnumSet : com.google.common.collect.Sets.newEnumSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newEnumSet($expr$, $arg$)

.combinations : com.google.common.collect.Sets.combinations
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.combinations($expr$, $arg$)

.newHashSet : com.google.common.collect.Sets.newHashSet
	ARRAY [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSet($expr$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSet($expr$)
	java.util.Iterator [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSet()

.newTreeSet : com.google.common.collect.Sets.newTreeSet
	java.util.Comparator [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newTreeSet($expr$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newTreeSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newTreeSet()

.complementOf : com.google.common.collect.Sets.complementOf
	java.util.Collection [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.complementOf($expr$, $arg$)

.newLinkedHashSetWithExpectedSize : com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize
	INT [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize($expr$)

.toImmutableEnumSet : com.google.common.collect.Sets.toImmutableEnumSet
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.toImmutableEnumSet()

.immutableEnumSet : com.google.common.collect.Sets.immutableEnumSet
	java.lang.Enum [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.immutableEnumSet($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.immutableEnumSet($expr$)

.newIdentityHashSet : com.google.common.collect.Sets.newIdentityHashSet
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newIdentityHashSet()

.powerSet : com.google.common.collect.Sets.powerSet
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.powerSet($expr$)

.difference : com.google.common.collect.Sets.difference
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.difference($expr$, $arg$)


## Maps

.toImmutableEnumMap : com.google.common.collect.Maps.toImmutableEnumMap
	java.util.function.Function [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.toImmutableEnumMap($expr$, $arg$)

.synchronizedBiMap : com.google.common.collect.Maps.synchronizedBiMap
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.synchronizedBiMap($expr$)

.asConverter : com.google.common.collect.Maps.asConverter
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.asConverter($expr$)

.synchronizedNavigableMap : com.google.common.collect.Maps.synchronizedNavigableMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.synchronizedNavigableMap($expr$)

.toMap : com.google.common.collect.Maps.toMap
	java.lang.Iterable [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.toMap($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.toMap($expr$, $arg$)

.newIdentityHashMap : com.google.common.collect.Maps.newIdentityHashMap
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newIdentityHashMap()

.newLinkedHashMap : com.google.common.collect.Maps.newLinkedHashMap
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newLinkedHashMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newLinkedHashMap()

.filterKeys : com.google.common.collect.Maps.filterKeys
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterKeys($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterKeys($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterKeys($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterKeys($expr$, $arg$)

.filterEntries : com.google.common.collect.Maps.filterEntries
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterEntries($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterEntries($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterEntries($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterEntries($expr$, $arg$)

.transformEntries : com.google.common.collect.Maps.transformEntries
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformEntries($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformEntries($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformEntries($expr$, $arg$)

.newHashMapWithExpectedSize : com.google.common.collect.Maps.newHashMapWithExpectedSize
	INT [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newHashMapWithExpectedSize($expr$)

.uniqueIndex : com.google.common.collect.Maps.uniqueIndex
	java.lang.Iterable [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.uniqueIndex($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.uniqueIndex($expr$, $arg$)

.immutableEnumMap : com.google.common.collect.Maps.immutableEnumMap
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.immutableEnumMap($expr$)

.newEnumMap : com.google.common.collect.Maps.newEnumMap
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newEnumMap($expr$)
	java.lang.Class [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newEnumMap($expr$)

.unmodifiableBiMap : com.google.common.collect.Maps.unmodifiableBiMap
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.unmodifiableBiMap($expr$)

.fromProperties : com.google.common.collect.Maps.fromProperties
	java.util.Properties [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.fromProperties($expr$)

.asMap : com.google.common.collect.Maps.asMap
	java.util.SortedSet [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.asMap($expr$, $arg$)
	java.util.NavigableSet [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.asMap($expr$, $arg$)
	java.util.Set [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.asMap($expr$, $arg$)

.unmodifiableNavigableMap : com.google.common.collect.Maps.unmodifiableNavigableMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.unmodifiableNavigableMap($expr$)

.transformValues : com.google.common.collect.Maps.transformValues
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformValues($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformValues($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformValues($expr$, $arg$)

.newConcurrentMap : com.google.common.collect.Maps.newConcurrentMap
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newConcurrentMap()

.filterValues : com.google.common.collect.Maps.filterValues
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterValues($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterValues($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterValues($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterValues($expr$, $arg$)

.subMap : com.google.common.collect.Maps.subMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.subMap($expr$, $arg$)

.difference : com.google.common.collect.Maps.difference
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.difference($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.difference($expr$, $arg$)

.newHashMap : com.google.common.collect.Maps.newHashMap
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newHashMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newHashMap()

.newLinkedHashMapWithExpectedSize : com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize
	INT [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize($expr$)

.immutableEntry : com.google.common.collect.Maps.immutableEntry
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.immutableEntry($expr$, $arg$)

.newTreeMap : com.google.common.collect.Maps.newTreeMap
	java.util.Comparator [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newTreeMap($expr$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newTreeMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newTreeMap()


## Optional

.ofNullable : java.util.Optional.ofNullable
	java.lang.Object [java.util.Optional]  →  java.util.Optional.ofNullable($expr$)

.of : java.util.Optional.of
	java.lang.Object [java.util.Optional]  →  java.util.Optional.of($expr$)

.empty : java.util.Optional.empty
	java.lang.Object [java.util.Optional]  →  java.util.Optional.empty()


## Collectors

.joining : java.util.stream.Collectors.joining
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.joining($arg$))
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.joining())

.partitioningBy : java.util.stream.Collectors.partitioningBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.partitioningBy($arg$))

.summingLong : java.util.stream.Collectors.summingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summingLong())

.groupingBy : java.util.stream.Collectors.groupingBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.groupingBy($arg$))

.summarizingLong : java.util.stream.Collectors.summarizingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summarizingLong())

.toUnmodifiableSet : java.util.stream.Collectors.toUnmodifiableSet
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toUnmodifiableSet())

.minBy : java.util.stream.Collectors.minBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.minBy())

.summarizingInt : java.util.stream.Collectors.summarizingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summarizingInt())

.toSet : java.util.stream.Collectors.toSet
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toSet())

.toMap : java.util.stream.Collectors.toMap
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toMap($arg$))

.averagingLong : java.util.stream.Collectors.averagingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.averagingLong())

.toList : java.util.stream.Collectors.toList
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toList())

.teeing : java.util.stream.Collectors.teeing
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.teeing($arg$))

.mapping : java.util.stream.Collectors.mapping
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.mapping($arg$))

.summingDouble : java.util.stream.Collectors.summingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summingDouble())

.summingInt : java.util.stream.Collectors.summingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summingInt())

.toConcurrentMap : java.util.stream.Collectors.toConcurrentMap
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toConcurrentMap($arg$))

.maxBy : java.util.stream.Collectors.maxBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.maxBy())

.toUnmodifiableMap : java.util.stream.Collectors.toUnmodifiableMap
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toUnmodifiableMap($arg$))

.counting : java.util.stream.Collectors.counting
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.counting())

.groupingByConcurrent : java.util.stream.Collectors.groupingByConcurrent
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.groupingByConcurrent($arg$))

.reducing : java.util.stream.Collectors.reducing
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.reducing())
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.reducing($arg$))

.summarizingDouble : java.util.stream.Collectors.summarizingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summarizingDouble())

.filtering : java.util.stream.Collectors.filtering
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.filtering($arg$))

.flatMapping : java.util.stream.Collectors.flatMapping
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.flatMapping($arg$))

.toCollection : java.util.stream.Collectors.toCollection
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toCollection())

.averagingDouble : java.util.stream.Collectors.averagingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.averagingDouble())

.toUnmodifiableList : java.util.stream.Collectors.toUnmodifiableList
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toUnmodifiableList())

.collectingAndThen : java.util.stream.Collectors.collectingAndThen
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.collectingAndThen($arg$))

.averagingInt : java.util.stream.Collectors.averagingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.averagingInt())


## Collections

.unmodifiableNavigableSet : java.util.Collections.unmodifiableNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  java.util.Collections.unmodifiableNavigableSet($expr$)

.checkedSortedMap : java.util.Collections.checkedSortedMap
	java.util.SortedMap [java.util.Collections]  →  java.util.Collections.checkedSortedMap($expr$, $arg$)

.emptyIterator : java.util.Collections.emptyIterator
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyIterator()

.unmodifiableList : java.util.Collections.unmodifiableList
	java.util.List [java.util.Collections]  →  java.util.Collections.unmodifiableList($expr$)

.synchronizedCollection : java.util.Collections.synchronizedCollection
	java.util.Collection [java.util.Collections]  →  java.util.Collections.synchronizedCollection($expr$)

.asLifoQueue : java.util.Collections.asLifoQueue
	java.util.Deque [java.util.Collections]  →  java.util.Collections.asLifoQueue($expr$)

.checkedQueue : java.util.Collections.checkedQueue
	java.util.Queue [java.util.Collections]  →  java.util.Collections.checkedQueue($expr$, $arg$)

.reverseOrder : java.util.Collections.reverseOrder
	java.util.Comparator [java.util.Collections]  →  java.util.Collections.reverseOrder($expr$)
	java.lang.Object [java.util.Collections]  →  java.util.Collections.reverseOrder()

.synchronizedSet : java.util.Collections.synchronizedSet
	java.util.Set [java.util.Collections]  →  java.util.Collections.synchronizedSet($expr$)

.synchronizedNavigableMap : java.util.Collections.synchronizedNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  java.util.Collections.synchronizedNavigableMap($expr$)

.emptyEnumeration : java.util.Collections.emptyEnumeration
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyEnumeration()

.synchronizedNavigableSet : java.util.Collections.synchronizedNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  java.util.Collections.synchronizedNavigableSet($expr$)

.checkedList : java.util.Collections.checkedList
	java.util.List [java.util.Collections]  →  java.util.Collections.checkedList($expr$, $arg$)

.emptySortedSet : java.util.Collections.emptySortedSet
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptySortedSet()

.addAll : java.util.Collections.addAll
	java.util.Collection [java.util.Collections]  →  java.util.Collections.addAll($expr$, $arg$)

.nCopies : java.util.Collections.nCopies
	INT [java.util.Collections]  →  java.util.Collections.nCopies($expr$, $arg$)

.unmodifiableMap : java.util.Collections.unmodifiableMap
	java.util.Map [java.util.Collections]  →  java.util.Collections.unmodifiableMap($expr$)

.emptyList : java.util.Collections.emptyList
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyList()

.min : java.util.Collections.min
	java.util.Collection [java.util.Collections]  →  java.util.Collections.min($expr$, $arg$)

.emptySet : java.util.Collections.emptySet
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptySet()

.emptyMap : java.util.Collections.emptyMap
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyMap()

.unmodifiableCollection : java.util.Collections.unmodifiableCollection
	java.util.Collection [java.util.Collections]  →  java.util.Collections.unmodifiableCollection($expr$)

.synchronizedList : java.util.Collections.synchronizedList
	java.util.List [java.util.Collections]  →  java.util.Collections.synchronizedList($expr$)

.newSetFromMap : java.util.Collections.newSetFromMap
	java.util.Map [java.util.Collections]  →  java.util.Collections.newSetFromMap($expr$)

.checkedCollection : java.util.Collections.checkedCollection
	java.util.Collection [java.util.Collections]  →  java.util.Collections.checkedCollection($expr$, $arg$)

.checkedNavigableSet : java.util.Collections.checkedNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  java.util.Collections.checkedNavigableSet($expr$, $arg$)

.emptyNavigableMap : java.util.Collections.emptyNavigableMap
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyNavigableMap()

.reverse : java.util.Collections.reverse
	java.util.List [java.util.Collections]  →  java.util.Collections.reverse($expr$)

.rotate : java.util.Collections.rotate
	java.util.List [java.util.Collections]  →  java.util.Collections.rotate($expr$, $arg$)

.lastIndexOfSubList : java.util.Collections.lastIndexOfSubList
	java.util.List [java.util.Collections]  →  java.util.Collections.lastIndexOfSubList($expr$, $arg$)

.synchronizedSortedSet : java.util.Collections.synchronizedSortedSet
	java.util.SortedSet [java.util.Collections]  →  java.util.Collections.synchronizedSortedSet($expr$)

.unmodifiableSortedSet : java.util.Collections.unmodifiableSortedSet
	java.util.SortedSet [java.util.Collections]  →  java.util.Collections.unmodifiableSortedSet($expr$)

.checkedNavigableMap : java.util.Collections.checkedNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  java.util.Collections.checkedNavigableMap($expr$, $arg$)

.max : java.util.Collections.max
	java.util.Collection [java.util.Collections]  →  java.util.Collections.max($expr$, $arg$)

.unmodifiableSortedMap : java.util.Collections.unmodifiableSortedMap
	java.util.SortedMap [java.util.Collections]  →  java.util.Collections.unmodifiableSortedMap($expr$)

.fill : java.util.Collections.fill
	java.util.List [java.util.Collections]  →  java.util.Collections.fill($expr$, $arg$)

.emptyNavigableSet : java.util.Collections.emptyNavigableSet
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyNavigableSet()

.checkedSortedSet : java.util.Collections.checkedSortedSet
	java.util.SortedSet [java.util.Collections]  →  java.util.Collections.checkedSortedSet($expr$, $arg$)

.synchronizedMap : java.util.Collections.synchronizedMap
	java.util.Map [java.util.Collections]  →  java.util.Collections.synchronizedMap($expr$)

.checkedMap : java.util.Collections.checkedMap
	java.util.Map [java.util.Collections]  →  java.util.Collections.checkedMap($expr$, $arg$)

.singletonList : java.util.Collections.singletonList
	java.lang.Object [java.util.Collections]  →  java.util.Collections.singletonList($expr$)

.enumeration : java.util.Collections.enumeration
	java.util.Collection [java.util.Collections]  →  java.util.Collections.enumeration($expr$)

.unmodifiableNavigableMap : java.util.Collections.unmodifiableNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  java.util.Collections.unmodifiableNavigableMap($expr$)

.shuffle : java.util.Collections.shuffle
	java.util.List [java.util.Collections]  →  java.util.Collections.shuffle($expr$, $arg$)

.swap : java.util.Collections.swap
	java.util.List [java.util.Collections]  →  java.util.Collections.swap($expr$, $arg$)

.copy : java.util.Collections.copy
	java.util.List [java.util.Collections]  →  java.util.Collections.copy($expr$, $arg$)

.singleton : java.util.Collections.singleton
	java.lang.Object [java.util.Collections]  →  java.util.Collections.singleton($expr$)

.disjoint : java.util.Collections.disjoint
	java.util.Collection [java.util.Collections]  →  java.util.Collections.disjoint($expr$, $arg$)

.frequency : java.util.Collections.frequency
	java.util.Collection [java.util.Collections]  →  java.util.Collections.frequency($expr$, $arg$)

.indexOfSubList : java.util.Collections.indexOfSubList
	java.util.List [java.util.Collections]  →  java.util.Collections.indexOfSubList($expr$, $arg$)

.checkedSet : java.util.Collections.checkedSet
	java.util.Set [java.util.Collections]  →  java.util.Collections.checkedSet($expr$, $arg$)

.emptySortedMap : java.util.Collections.emptySortedMap
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptySortedMap()

.sort : java.util.Collections.sort
	java.util.List [java.util.Collections]  →  java.util.Collections.sort($expr$, $arg$)

.binarySearch : java.util.Collections.binarySearch
	java.util.List [java.util.Collections]  →  java.util.Collections.binarySearch($expr$, $arg$)

.unmodifiableSet : java.util.Collections.unmodifiableSet
	java.util.Set [java.util.Collections]  →  java.util.Collections.unmodifiableSet($expr$)

.synchronizedSortedMap : java.util.Collections.synchronizedSortedMap
	java.util.SortedMap [java.util.Collections]  →  java.util.Collections.synchronizedSortedMap($expr$)

.replaceAll : java.util.Collections.replaceAll
	java.util.List [java.util.Collections]  →  java.util.Collections.replaceAll($expr$, $arg$)

.singletonMap : java.util.Collections.singletonMap
	java.lang.Object [java.util.Collections]  →  java.util.Collections.singletonMap($expr$, $arg$)

.emptyListIterator : java.util.Collections.emptyListIterator
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyListIterator()

.list : java.util.Collections.list
	java.util.Enumeration [java.util.Collections]  →  java.util.Collections.list($expr$)


## Arrays

.compareUnsigned : java.util.Arrays.compareUnsigned
	ARRAY [java.util.Arrays]  →  java.util.Arrays.compareUnsigned($expr$, $arg$)

.mismatch : java.util.Arrays.mismatch
	ARRAY [java.util.Arrays]  →  java.util.Arrays.mismatch($expr$, $arg$)

.asList : java.util.Arrays.asList
	ARRAY [java.util.Arrays]  →  java.util.Arrays.asList($expr$)

.parallelPrefix : java.util.Arrays.parallelPrefix
	ARRAY [java.util.Arrays]  →  java.util.Arrays.parallelPrefix($expr$, $arg$)

.parallelSetAll : java.util.Arrays.parallelSetAll
	ARRAY [java.util.Arrays]  →  java.util.Arrays.parallelSetAll($expr$, $arg$)

.equals : java.util.Arrays.equals
	ARRAY [java.util.Arrays]  →  java.util.Arrays.equals($expr$, $arg$)

.deepHashCode : java.util.Arrays.deepHashCode
	ARRAY [java.util.Arrays]  →  java.util.Arrays.deepHashCode($expr$)

.copyOf : java.util.Arrays.copyOf
	ARRAY [java.util.Arrays]  →  java.util.Arrays.copyOf($expr$, $arg$)

.deepEquals : java.util.Arrays.deepEquals
	ARRAY [java.util.Arrays]  →  java.util.Arrays.deepEquals($expr$, $arg$)

.fill : java.util.Arrays.fill
	ARRAY [java.util.Arrays]  →  java.util.Arrays.fill($expr$, $arg$)

.stream : java.util.Arrays.stream
	ARRAY [java.util.Arrays]  →  java.util.Arrays.stream($expr$, $arg$)

.copyOfRange : java.util.Arrays.copyOfRange
	ARRAY [java.util.Arrays]  →  java.util.Arrays.copyOfRange($expr$, $arg$)

.deepToString : java.util.Arrays.deepToString
	ARRAY [java.util.Arrays]  →  java.util.Arrays.deepToString($expr$)

.parallelSort : java.util.Arrays.parallelSort
	ARRAY [java.util.Arrays]  →  java.util.Arrays.parallelSort($expr$, $arg$)

.toString : java.util.Arrays.toString
	ARRAY [java.util.Arrays]  →  java.util.Arrays.toString($expr$)

.setAll : java.util.Arrays.setAll
	ARRAY [java.util.Arrays]  →  java.util.Arrays.setAll($expr$, $arg$)

.sort : java.util.Arrays.sort
	ARRAY [java.util.Arrays]  →  java.util.Arrays.sort($expr$, $arg$)

.binarySearch : java.util.Arrays.binarySearch
	ARRAY [java.util.Arrays]  →  java.util.Arrays.binarySearch($expr$, $arg$)

.compare : java.util.Arrays.compare
	ARRAY [java.util.Arrays]  →  java.util.Arrays.compare($expr$, $arg$)

.spliterator : java.util.Arrays.spliterator
	ARRAY [java.util.Arrays]  →  java.util.Arrays.spliterator($expr$, $arg$)

.hashCode : java.util.Arrays.hashCode
	ARRAY [java.util.Arrays]  →  java.util.Arrays.hashCode($expr$)


## String

.join : java.lang.String.join
	java.lang.CharSequence [java.lang.String]  →  java.lang.String.join($expr$, $arg$)

.copyValueOf : java.lang.String.copyValueOf
	ARRAY [java.lang.String]  →  java.lang.String.copyValueOf($expr$, $arg$)

.valueOf : java.lang.String.valueOf
	FLOAT [java.lang.String]  →  java.lang.String.valueOf($expr$)
	CHAR [java.lang.String]  →  java.lang.String.valueOf($expr$)
	DOUBLE [java.lang.String]  →  java.lang.String.valueOf($expr$)
	INT [java.lang.String]  →  java.lang.String.valueOf($expr$)
	ARRAY [java.lang.String]  →  java.lang.String.valueOf($expr$, $arg$)
	java.lang.Object [java.lang.String]  →  java.lang.String.valueOf($expr$)
	BOOLEAN [java.lang.String]  →  java.lang.String.valueOf($expr$)
	LONG [java.lang.String]  →  java.lang.String.valueOf($expr$)

.format : java.lang.String.format
	java.lang.String [java.lang.String]  →  java.lang.String.format($expr$, $arg$)
	java.util.Locale [java.lang.String]  →  java.lang.String.format($expr$, $arg$)

