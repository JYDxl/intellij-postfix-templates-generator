## Templates for JYD_XL Custom Postfix Templates ##

.trace : org.slf4j.Logger.trace
	java.lang.Object [org.slf4j.Logger]  →  log.trace($expr$, $arg$)

.debug : org.slf4j.Logger.debug
	java.lang.Object [org.slf4j.Logger]  →  log.debug($expr$, $arg$)

.info : org.slf4j.Logger.info
	java.lang.Object [org.slf4j.Logger]  →  log.info($expr$, $arg$)

.warn : org.slf4j.Logger.warn
	java.lang.Object [org.slf4j.Logger]  →  log.warn($expr$, $arg$)

.error : org.slf4j.Logger.error
	java.lang.Object [org.slf4j.Logger]  →  log.error($expr$, $arg$)


## BitUtil

.lastN : org.github.util.BitUtil.lastN
	LONG [org.github.util.BitUtil]  →  org.github.util.BitUtil.lastN($expr$, $arg$)
	INT [org.github.util.BitUtil]  →  org.github.util.BitUtil.lastN($expr$, $arg$)


## FuncUtil

.throwing : org.github.util.FuncUtil.throwing
	java.lang.Object [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.throwing()

.map : org.github.util.FuncUtil.map
	java.lang.Object [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.map($expr$, $arg$)

.nonNull : org.github.util.FuncUtil.nonNull
	java.lang.Object [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.nonNull()

.optional : org.github.util.FuncUtil.optional
	java.util.function.Function [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.optional($expr$, $arg$)

.stream : org.github.util.FuncUtil.stream
	java.util.Collection [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.stream($expr$)

.pass : org.github.util.FuncUtil.pass
	java.lang.Object [org.github.util.FuncUtil]  →  org.github.util.FuncUtil.pass()


## TreeUtil

.findAllChild : org.github.util.tree.TreeUtil.findAllChild
	java.util.List [org.github.util.tree.TreeUtil]  →  org.github.util.tree.TreeUtil.findAllChild($expr$, $arg$)

.buildTree : org.github.util.tree.TreeUtil.buildTree
	java.util.List [org.github.util.tree.TreeUtil]  →  org.github.util.tree.TreeUtil.buildTree($expr$, $arg$)


## ProxyUtil

.proxy : cn.hutool.aop.ProxyUtil.proxy
	java.lang.Object [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.proxy($expr$, $arg$)

.newProxyInstance : cn.hutool.aop.ProxyUtil.newProxyInstance
	java.lang.reflect.InvocationHandler [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.newProxyInstance($expr$, $arg$)
	java.lang.ClassLoader [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.newProxyInstance($expr$, $arg$)


## BloomFilterUtil

.createBitMap : cn.hutool.bloomfilter.BloomFilterUtil.createBitMap
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  cn.hutool.bloomfilter.BloomFilterUtil.createBitMap($expr$)

.createBitSet : cn.hutool.bloomfilter.BloomFilterUtil.createBitSet
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  cn.hutool.bloomfilter.BloomFilterUtil.createBitSet($expr$, $arg$)


## CacheUtil

.newWeakCache : cn.hutool.cache.CacheUtil.newWeakCache
	LONG [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newWeakCache($expr$)

.newLRUCache : cn.hutool.cache.CacheUtil.newLRUCache
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newLRUCache($expr$, $arg$)

.newLFUCache : cn.hutool.cache.CacheUtil.newLFUCache
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newLFUCache($expr$, $arg$)

.newNoCache : cn.hutool.cache.CacheUtil.newNoCache
	java.lang.Object [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newNoCache()

.newTimedCache : cn.hutool.cache.CacheUtil.newTimedCache
	LONG [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newTimedCache($expr$)

.newFIFOCache : cn.hutool.cache.CacheUtil.newFIFOCache
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newFIFOCache($expr$, $arg$)


## CaptchaUtil

.createLineCaptcha : cn.hutool.captcha.CaptchaUtil.createLineCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createLineCaptcha($expr$, $arg$)

.createShearCaptcha : cn.hutool.captcha.CaptchaUtil.createShearCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createShearCaptcha($expr$, $arg$)

.createCircleCaptcha : cn.hutool.captcha.CaptchaUtil.createCircleCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createCircleCaptcha($expr$, $arg$)

.createGifCaptcha : cn.hutool.captcha.CaptchaUtil.createGifCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createGifCaptcha($expr$, $arg$)


## AnnotationUtil

.getTargetType : cn.hutool.core.annotation.AnnotationUtil.getTargetType
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getTargetType($expr$)

.getAnnotations : cn.hutool.core.annotation.AnnotationUtil.getAnnotations
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotations($expr$, $arg$)

.isDocumented : cn.hutool.core.annotation.AnnotationUtil.isDocumented
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isDocumented($expr$)

.setValue : cn.hutool.core.annotation.AnnotationUtil.setValue
	java.lang.annotation.Annotation [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.setValue($expr$, $arg$)

.getAnnotationValue : cn.hutool.core.annotation.AnnotationUtil.getAnnotationValue
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotationValue($expr$, $arg$)

.toCombination : cn.hutool.core.annotation.AnnotationUtil.toCombination
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.toCombination($expr$)

.isInherited : cn.hutool.core.annotation.AnnotationUtil.isInherited
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isInherited($expr$)

.getRetentionPolicy : cn.hutool.core.annotation.AnnotationUtil.getRetentionPolicy
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getRetentionPolicy($expr$)

.getAnnotation : cn.hutool.core.annotation.AnnotationUtil.getAnnotation
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotation($expr$, $arg$)

.hasAnnotation : cn.hutool.core.annotation.AnnotationUtil.hasAnnotation
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.hasAnnotation($expr$, $arg$)

.getAnnotationValueMap : cn.hutool.core.annotation.AnnotationUtil.getAnnotationValueMap
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotationValueMap($expr$, $arg$)


## Ascii

.equalsIgnoreCase : com.google.common.base.Ascii.equalsIgnoreCase
	java.lang.CharSequence [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.equalsIgnoreCase($expr$, $arg$)

.truncate : com.google.common.base.Ascii.truncate
	java.lang.CharSequence [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.truncate($expr$, $arg$)

.toLowerCase : com.google.common.base.Ascii.toLowerCase
	java.lang.String [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.toLowerCase($expr$)
	CHAR [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.toLowerCase($expr$)
	java.lang.CharSequence [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.toLowerCase($expr$)

.isLowerCase : com.google.common.base.Ascii.isLowerCase
	CHAR [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.isLowerCase($expr$)

.isUpperCase : com.google.common.base.Ascii.isUpperCase
	CHAR [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.isUpperCase($expr$)

.toUpperCase : com.google.common.base.Ascii.toUpperCase
	java.lang.String [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.toUpperCase($expr$)
	CHAR [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.toUpperCase($expr$)
	java.lang.CharSequence [com.google.common.base.Ascii]  →  com.google.common.base.Ascii.toUpperCase($expr$)


## CharMatcher

.forPredicate : com.google.common.base.CharMatcher.forPredicate
	com.google.common.base.Predicate [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.forPredicate($expr$)

.any : com.google.common.base.CharMatcher.any
	java.lang.Object [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.any()

.is : com.google.common.base.CharMatcher.is
	CHAR [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.is($expr$)

.javaIsoControl : com.google.common.base.CharMatcher.javaIsoControl
	java.lang.Object [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.javaIsoControl()

.anyOf : com.google.common.base.CharMatcher.anyOf
	java.lang.CharSequence [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.anyOf($expr$)

.breakingWhitespace : com.google.common.base.CharMatcher.breakingWhitespace
	java.lang.Object [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.breakingWhitespace()

.ascii : com.google.common.base.CharMatcher.ascii
	java.lang.Object [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.ascii()

.noneOf : com.google.common.base.CharMatcher.noneOf
	java.lang.CharSequence [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.noneOf($expr$)

.isNot : com.google.common.base.CharMatcher.isNot
	CHAR [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.isNot($expr$)

.whitespace : com.google.common.base.CharMatcher.whitespace
	java.lang.Object [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.whitespace()

.none : com.google.common.base.CharMatcher.none
	java.lang.Object [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.none()

.inRange : com.google.common.base.CharMatcher.inRange
	CHAR [com.google.common.base.CharMatcher]  →  com.google.common.base.CharMatcher.inRange($expr$, $arg$)


## Converter

.from : com.google.common.base.Converter.from
	com.google.common.base.Function [com.google.common.base.Converter]  →  com.google.common.base.Converter.from($expr$, $arg$)

.identity : com.google.common.base.Converter.identity
	java.lang.Object [com.google.common.base.Converter]  →  com.google.common.base.Converter.identity()


## Defaults

.defaultValue : com.google.common.base.Defaults.defaultValue
	java.lang.Class [com.google.common.base.Defaults]  →  com.google.common.base.Defaults.defaultValue($expr$)


## Enums

.stringConverter : com.google.common.base.Enums.stringConverter
	java.lang.Class [com.google.common.base.Enums]  →  com.google.common.base.Enums.stringConverter($expr$)

.getIfPresent : com.google.common.base.Enums.getIfPresent
	java.lang.Class [com.google.common.base.Enums]  →  com.google.common.base.Enums.getIfPresent($expr$, $arg$)

.getField : com.google.common.base.Enums.getField
	java.lang.Enum [com.google.common.base.Enums]  →  com.google.common.base.Enums.getField($expr$)


## Equivalence

.identity : com.google.common.base.Equivalence.identity
	java.lang.Object [com.google.common.base.Equivalence]  →  com.google.common.base.Equivalence.identity()

.equals : com.google.common.base.Equivalence.equals
	java.lang.Object [com.google.common.base.Equivalence]  →  com.google.common.base.Equivalence.equals()


## FinalizablePhantomReference

.reachabilityFence : com.google.common.base.FinalizablePhantomReference.reachabilityFence
	java.lang.Object [com.google.common.base.FinalizablePhantomReference]  →  com.google.common.base.FinalizablePhantomReference.reachabilityFence($expr$)


## FinalizableSoftReference

.reachabilityFence : com.google.common.base.FinalizableSoftReference.reachabilityFence
	java.lang.Object [com.google.common.base.FinalizableSoftReference]  →  com.google.common.base.FinalizableSoftReference.reachabilityFence($expr$)


## FinalizableWeakReference

.reachabilityFence : com.google.common.base.FinalizableWeakReference.reachabilityFence
	java.lang.Object [com.google.common.base.FinalizableWeakReference]  →  com.google.common.base.FinalizableWeakReference.reachabilityFence($expr$)


## Functions

.constant : com.google.common.base.Functions.constant
	java.lang.Object [com.google.common.base.Functions]  →  com.google.common.base.Functions.constant($expr$)

.forPredicate : com.google.common.base.Functions.forPredicate
	com.google.common.base.Predicate [com.google.common.base.Functions]  →  com.google.common.base.Functions.forPredicate($expr$)

.compose : com.google.common.base.Functions.compose
	com.google.common.base.Function [com.google.common.base.Functions]  →  com.google.common.base.Functions.compose($expr$, $arg$)

.forMap : com.google.common.base.Functions.forMap
	java.util.Map [com.google.common.base.Functions]  →  com.google.common.base.Functions.forMap($expr$, $arg$)

.forSupplier : com.google.common.base.Functions.forSupplier
	com.google.common.base.Supplier [com.google.common.base.Functions]  →  com.google.common.base.Functions.forSupplier($expr$)

.toStringFunction : com.google.common.base.Functions.toStringFunction
	java.lang.Object [com.google.common.base.Functions]  →  com.google.common.base.Functions.toStringFunction()

.identity : com.google.common.base.Functions.identity
	java.lang.Object [com.google.common.base.Functions]  →  com.google.common.base.Functions.identity()


## Joiner

.on : com.google.common.base.Joiner.on
	java.lang.String [com.google.common.base.Joiner]  →  com.google.common.base.Joiner.on($expr$)
	CHAR [com.google.common.base.Joiner]  →  com.google.common.base.Joiner.on($expr$)


## MoreObjects

.toStringHelper : com.google.common.base.MoreObjects.toStringHelper
	java.lang.String [com.google.common.base.MoreObjects]  →  com.google.common.base.MoreObjects.toStringHelper($expr$)
	java.lang.Class [com.google.common.base.MoreObjects]  →  com.google.common.base.MoreObjects.toStringHelper($expr$)
	java.lang.Object [com.google.common.base.MoreObjects]  →  com.google.common.base.MoreObjects.toStringHelper($expr$)

.firstNonNull : com.google.common.base.MoreObjects.firstNonNull
	java.lang.Object [com.google.common.base.MoreObjects]  →  com.google.common.base.MoreObjects.firstNonNull($expr$, $arg$)


## Objects

.equal : com.google.common.base.Objects.equal
	java.lang.Object [com.google.common.base.Objects]  →  com.google.common.base.Objects.equal($expr$, $arg$)

.hashCode : com.google.common.base.Objects.hashCode
	ARRAY [com.google.common.base.Objects]  →  com.google.common.base.Objects.hashCode($expr$)


## Optional

.absent : com.google.common.base.Optional.absent
	java.lang.Object [com.google.common.base.Optional]  →  com.google.common.base.Optional.absent()

.presentInstances : com.google.common.base.Optional.presentInstances
	java.lang.Iterable [com.google.common.base.Optional]  →  com.google.common.base.Optional.presentInstances($expr$)

.toJavaUtil : com.google.common.base.Optional.toJavaUtil
	com.google.common.base.Optional [com.google.common.base.Optional]  →  com.google.common.base.Optional.toJavaUtil($expr$)

.fromJavaUtil : com.google.common.base.Optional.fromJavaUtil
	java.util.Optional [com.google.common.base.Optional]  →  com.google.common.base.Optional.fromJavaUtil($expr$)

.fromNullable : com.google.common.base.Optional.fromNullable
	java.lang.Object [com.google.common.base.Optional]  →  com.google.common.base.Optional.fromNullable($expr$)

.of : com.google.common.base.Optional.of
	java.lang.Object [com.google.common.base.Optional]  →  com.google.common.base.Optional.of($expr$)


## Preconditions

.checkArgument : com.google.common.base.Preconditions.checkArgument
	BOOLEAN [com.google.common.base.Preconditions]  →  com.google.common.base.Preconditions.checkArgument($expr$, $arg$)

.checkElementIndex : com.google.common.base.Preconditions.checkElementIndex
	INT [com.google.common.base.Preconditions]  →  com.google.common.base.Preconditions.checkElementIndex($expr$, $arg$)

.checkState : com.google.common.base.Preconditions.checkState
	BOOLEAN [com.google.common.base.Preconditions]  →  com.google.common.base.Preconditions.checkState($expr$, $arg$)

.checkNotNull : com.google.common.base.Preconditions.checkNotNull
	java.lang.Object [com.google.common.base.Preconditions]  →  com.google.common.base.Preconditions.checkNotNull($expr$, $arg$)

.checkPositionIndexes : com.google.common.base.Preconditions.checkPositionIndexes
	INT [com.google.common.base.Preconditions]  →  com.google.common.base.Preconditions.checkPositionIndexes($expr$, $arg$)

.checkPositionIndex : com.google.common.base.Preconditions.checkPositionIndex
	INT [com.google.common.base.Preconditions]  →  com.google.common.base.Preconditions.checkPositionIndex($expr$, $arg$)


## Predicates

.in : com.google.common.base.Predicates.in
	java.util.Collection [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.in($expr$)

.instanceOf : com.google.common.base.Predicates.instanceOf
	java.lang.Class [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.instanceOf($expr$)

.compose : com.google.common.base.Predicates.compose
	com.google.common.base.Predicate [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.compose($expr$, $arg$)

.isNull : com.google.common.base.Predicates.isNull
	java.lang.Object [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.isNull()

.subtypeOf : com.google.common.base.Predicates.subtypeOf
	java.lang.Class [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.subtypeOf($expr$)

.or : com.google.common.base.Predicates.or
	ARRAY [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.or($expr$)
	com.google.common.base.Predicate [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.or($expr$, $arg$)
	java.lang.Iterable [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.or($expr$)

.notNull : com.google.common.base.Predicates.notNull
	java.lang.Object [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.notNull()

.not : com.google.common.base.Predicates.not
	com.google.common.base.Predicate [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.not($expr$)

.alwaysTrue : com.google.common.base.Predicates.alwaysTrue
	java.lang.Object [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.alwaysTrue()

.equalTo : com.google.common.base.Predicates.equalTo
	java.lang.Object [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.equalTo($expr$)

.containsPattern : com.google.common.base.Predicates.containsPattern
	java.lang.String [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.containsPattern($expr$)

.contains : com.google.common.base.Predicates.contains
	java.util.regex.Pattern [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.contains($expr$)

.alwaysFalse : com.google.common.base.Predicates.alwaysFalse
	java.lang.Object [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.alwaysFalse()

.and : com.google.common.base.Predicates.and
	ARRAY [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.and($expr$)
	com.google.common.base.Predicate [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.and($expr$, $arg$)
	java.lang.Iterable [com.google.common.base.Predicates]  →  com.google.common.base.Predicates.and($expr$)


## Splitter

.on : com.google.common.base.Splitter.on
	java.lang.String [com.google.common.base.Splitter]  →  com.google.common.base.Splitter.on($expr$)
	CHAR [com.google.common.base.Splitter]  →  com.google.common.base.Splitter.on($expr$)
	com.google.common.base.CharMatcher [com.google.common.base.Splitter]  →  com.google.common.base.Splitter.on($expr$)
	java.util.regex.Pattern [com.google.common.base.Splitter]  →  com.google.common.base.Splitter.on($expr$)

.fixedLength : com.google.common.base.Splitter.fixedLength
	INT [com.google.common.base.Splitter]  →  com.google.common.base.Splitter.fixedLength($expr$)

.onPattern : com.google.common.base.Splitter.onPattern
	java.lang.String [com.google.common.base.Splitter]  →  com.google.common.base.Splitter.onPattern($expr$)


## Stopwatch

.createUnstarted : com.google.common.base.Stopwatch.createUnstarted
	com.google.common.base.Ticker [com.google.common.base.Stopwatch]  →  com.google.common.base.Stopwatch.createUnstarted($expr$)
	java.lang.Object [com.google.common.base.Stopwatch]  →  com.google.common.base.Stopwatch.createUnstarted()

.createStarted : com.google.common.base.Stopwatch.createStarted
	com.google.common.base.Ticker [com.google.common.base.Stopwatch]  →  com.google.common.base.Stopwatch.createStarted($expr$)
	java.lang.Object [com.google.common.base.Stopwatch]  →  com.google.common.base.Stopwatch.createStarted()


## Strings

.padEnd : com.google.common.base.Strings.padEnd
	java.lang.String [com.google.common.base.Strings]  →  com.google.common.base.Strings.padEnd($expr$, $arg$)

.commonPrefix : com.google.common.base.Strings.commonPrefix
	java.lang.CharSequence [com.google.common.base.Strings]  →  com.google.common.base.Strings.commonPrefix($expr$, $arg$)

.commonSuffix : com.google.common.base.Strings.commonSuffix
	java.lang.CharSequence [com.google.common.base.Strings]  →  com.google.common.base.Strings.commonSuffix($expr$, $arg$)

.lenientFormat : com.google.common.base.Strings.lenientFormat
	java.lang.String [com.google.common.base.Strings]  →  com.google.common.base.Strings.lenientFormat($expr$, $arg$)

.isNullOrEmpty : com.google.common.base.Strings.isNullOrEmpty
	java.lang.String [com.google.common.base.Strings]  →  com.google.common.base.Strings.isNullOrEmpty($expr$)

.repeat : com.google.common.base.Strings.repeat
	java.lang.String [com.google.common.base.Strings]  →  com.google.common.base.Strings.repeat($expr$, $arg$)

.nullToEmpty : com.google.common.base.Strings.nullToEmpty
	java.lang.String [com.google.common.base.Strings]  →  com.google.common.base.Strings.nullToEmpty($expr$)

.padStart : com.google.common.base.Strings.padStart
	java.lang.String [com.google.common.base.Strings]  →  com.google.common.base.Strings.padStart($expr$, $arg$)

.emptyToNull : com.google.common.base.Strings.emptyToNull
	java.lang.String [com.google.common.base.Strings]  →  com.google.common.base.Strings.emptyToNull($expr$)


## Suppliers

.compose : com.google.common.base.Suppliers.compose
	com.google.common.base.Function [com.google.common.base.Suppliers]  →  com.google.common.base.Suppliers.compose($expr$, $arg$)

.ofInstance : com.google.common.base.Suppliers.ofInstance
	java.lang.Object [com.google.common.base.Suppliers]  →  com.google.common.base.Suppliers.ofInstance($expr$)

.synchronizedSupplier : com.google.common.base.Suppliers.synchronizedSupplier
	com.google.common.base.Supplier [com.google.common.base.Suppliers]  →  com.google.common.base.Suppliers.synchronizedSupplier($expr$)

.supplierFunction : com.google.common.base.Suppliers.supplierFunction
	java.lang.Object [com.google.common.base.Suppliers]  →  com.google.common.base.Suppliers.supplierFunction()

.memoizeWithExpiration : com.google.common.base.Suppliers.memoizeWithExpiration
	com.google.common.base.Supplier [com.google.common.base.Suppliers]  →  com.google.common.base.Suppliers.memoizeWithExpiration($expr$, $arg$)

.memoize : com.google.common.base.Suppliers.memoize
	com.google.common.base.Supplier [com.google.common.base.Suppliers]  →  com.google.common.base.Suppliers.memoize($expr$)


## Throwables

.getCausalChain : com.google.common.base.Throwables.getCausalChain
	java.lang.Throwable [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.getCausalChain($expr$)

.lazyStackTrace : com.google.common.base.Throwables.lazyStackTrace
	java.lang.Throwable [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.lazyStackTrace($expr$)

.propagateIfPossible : com.google.common.base.Throwables.propagateIfPossible
	java.lang.Throwable [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.propagateIfPossible($expr$, $arg$)

.getCauseAs : com.google.common.base.Throwables.getCauseAs
	java.lang.Throwable [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.getCauseAs($expr$, $arg$)

.lazyStackTraceIsLazy : com.google.common.base.Throwables.lazyStackTraceIsLazy
	java.lang.Object [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.lazyStackTraceIsLazy()

.throwIfInstanceOf : com.google.common.base.Throwables.throwIfInstanceOf
	java.lang.Throwable [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.throwIfInstanceOf($expr$, $arg$)

.getRootCause : com.google.common.base.Throwables.getRootCause
	java.lang.Throwable [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.getRootCause($expr$)

.throwIfUnchecked : com.google.common.base.Throwables.throwIfUnchecked
	java.lang.Throwable [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.throwIfUnchecked($expr$)

.getStackTraceAsString : com.google.common.base.Throwables.getStackTraceAsString
	java.lang.Throwable [com.google.common.base.Throwables]  →  com.google.common.base.Throwables.getStackTraceAsString($expr$)


## Ticker

.systemTicker : com.google.common.base.Ticker.systemTicker
	java.lang.Object [com.google.common.base.Ticker]  →  com.google.common.base.Ticker.systemTicker()


## Utf8

.encodedLength : com.google.common.base.Utf8.encodedLength
	java.lang.CharSequence [com.google.common.base.Utf8]  →  com.google.common.base.Utf8.encodedLength($expr$)

.isWellFormed : com.google.common.base.Utf8.isWellFormed
	ARRAY [com.google.common.base.Utf8]  →  com.google.common.base.Utf8.isWellFormed($expr$, $arg$)


## Verify

.verify : com.google.common.base.Verify.verify
	BOOLEAN [com.google.common.base.Verify]  →  com.google.common.base.Verify.verify($expr$, $arg$)

.verifyNotNull : com.google.common.base.Verify.verifyNotNull
	java.lang.Object [com.google.common.base.Verify]  →  com.google.common.base.Verify.verifyNotNull($expr$, $arg$)


## Finalizer

.startFinalizer : com.google.common.base.internal.Finalizer.startFinalizer
	java.lang.Class [com.google.common.base.internal.Finalizer]  →  com.google.common.base.internal.Finalizer.startFinalizer($expr$, $arg$)


## CacheBuilder

.newBuilder : com.google.common.cache.CacheBuilder.newBuilder
	java.lang.Object [com.google.common.cache.CacheBuilder]  →  com.google.common.cache.CacheBuilder.newBuilder()

.from : com.google.common.cache.CacheBuilder.from
	java.lang.String [com.google.common.cache.CacheBuilder]  →  com.google.common.cache.CacheBuilder.from($expr$)
	com.google.common.cache.CacheBuilderSpec [com.google.common.cache.CacheBuilder]  →  com.google.common.cache.CacheBuilder.from($expr$)


## CacheBuilderSpec

.disableCaching : com.google.common.cache.CacheBuilderSpec.disableCaching
	java.lang.Object [com.google.common.cache.CacheBuilderSpec]  →  com.google.common.cache.CacheBuilderSpec.disableCaching()

.parse : com.google.common.cache.CacheBuilderSpec.parse
	java.lang.String [com.google.common.cache.CacheBuilderSpec]  →  com.google.common.cache.CacheBuilderSpec.parse($expr$)


## CacheLoader

.from : com.google.common.cache.CacheLoader.from
	com.google.common.base.Function [com.google.common.cache.CacheLoader]  →  com.google.common.cache.CacheLoader.from($expr$)
	com.google.common.base.Supplier [com.google.common.cache.CacheLoader]  →  com.google.common.cache.CacheLoader.from($expr$)

.asyncReloading : com.google.common.cache.CacheLoader.asyncReloading
	com.google.common.cache.CacheLoader [com.google.common.cache.CacheLoader]  →  com.google.common.cache.CacheLoader.asyncReloading($expr$, $arg$)


## RemovalListeners

.asynchronous : com.google.common.cache.RemovalListeners.asynchronous
	com.google.common.cache.RemovalListener [com.google.common.cache.RemovalListeners]  →  com.google.common.cache.RemovalListeners.asynchronous($expr$, $arg$)


## RemovalNotification

.create : com.google.common.cache.RemovalNotification.create
	java.lang.Object [com.google.common.cache.RemovalNotification]  →  com.google.common.cache.RemovalNotification.create($expr$, $arg$)


## ArrayListMultimap

.create : com.google.common.collect.ArrayListMultimap.create
	INT [com.google.common.collect.ArrayListMultimap]  →  com.google.common.collect.ArrayListMultimap.create($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.ArrayListMultimap]  →  com.google.common.collect.ArrayListMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.ArrayListMultimap]  →  com.google.common.collect.ArrayListMultimap.create()


## ArrayTable

.create : com.google.common.collect.ArrayTable.create
	com.google.common.collect.Table [com.google.common.collect.ArrayTable]  →  com.google.common.collect.ArrayTable.create($expr$)
	java.lang.Iterable [com.google.common.collect.ArrayTable]  →  com.google.common.collect.ArrayTable.create($expr$, $arg$)


## Collections2

.orderedPermutations : com.google.common.collect.Collections2.orderedPermutations
	java.lang.Iterable [com.google.common.collect.Collections2]  →  com.google.common.collect.Collections2.orderedPermutations($expr$, $arg$)

.filter : com.google.common.collect.Collections2.filter
	java.util.Collection [com.google.common.collect.Collections2]  →  com.google.common.collect.Collections2.filter($expr$, $arg$)

.transform : com.google.common.collect.Collections2.transform
	java.util.Collection [com.google.common.collect.Collections2]  →  com.google.common.collect.Collections2.transform($expr$, $arg$)

.permutations : com.google.common.collect.Collections2.permutations
	java.util.Collection [com.google.common.collect.Collections2]  →  com.google.common.collect.Collections2.permutations($expr$)


## Comparators

.lexicographical : com.google.common.collect.Comparators.lexicographical
	java.util.Comparator [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.lexicographical($expr$)

.min : com.google.common.collect.Comparators.min
	java.lang.Comparable [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.min($expr$, $arg$)
	java.lang.Object [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.min($expr$, $arg$)

.emptiesLast : com.google.common.collect.Comparators.emptiesLast
	java.util.Comparator [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.emptiesLast($expr$)

.isInStrictOrder : com.google.common.collect.Comparators.isInStrictOrder
	java.lang.Iterable [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.isInStrictOrder($expr$, $arg$)

.isInOrder : com.google.common.collect.Comparators.isInOrder
	java.lang.Iterable [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.isInOrder($expr$, $arg$)

.least : com.google.common.collect.Comparators.least
	INT [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.least($expr$, $arg$)

.max : com.google.common.collect.Comparators.max
	java.lang.Comparable [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.max($expr$, $arg$)
	java.lang.Object [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.max($expr$, $arg$)

.greatest : com.google.common.collect.Comparators.greatest
	INT [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.greatest($expr$, $arg$)

.emptiesFirst : com.google.common.collect.Comparators.emptiesFirst
	java.util.Comparator [com.google.common.collect.Comparators]  →  com.google.common.collect.Comparators.emptiesFirst($expr$)


## ComparisonChain

.start : com.google.common.collect.ComparisonChain.start
	java.lang.Object [com.google.common.collect.ComparisonChain]  →  com.google.common.collect.ComparisonChain.start()


## ConcurrentHashMultiset

.create : com.google.common.collect.ConcurrentHashMultiset.create
	java.util.concurrent.ConcurrentMap [com.google.common.collect.ConcurrentHashMultiset]  →  com.google.common.collect.ConcurrentHashMultiset.create($expr$)
	java.lang.Iterable [com.google.common.collect.ConcurrentHashMultiset]  →  com.google.common.collect.ConcurrentHashMultiset.create($expr$)
	java.lang.Object [com.google.common.collect.ConcurrentHashMultiset]  →  com.google.common.collect.ConcurrentHashMultiset.create()


## ContiguousSet

.reverseOrder : com.google.common.collect.ContiguousSet.reverseOrder
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.reverseOrder()

.closed : com.google.common.collect.ContiguousSet.closed
	LONG [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.closed($expr$, $arg$)
	INT [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.closed($expr$, $arg$)

.copyOfSorted : com.google.common.collect.ContiguousSet.copyOfSorted
	java.util.SortedSet [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.copyOfSorted($expr$)

.create : com.google.common.collect.ContiguousSet.create
	com.google.common.collect.Range [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.create($expr$, $arg$)

.builder : com.google.common.collect.ContiguousSet.builder
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.builder()

.copyOf : com.google.common.collect.ContiguousSet.copyOf
	java.util.Iterator [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.copyOf($expr$)
	java.util.Comparator [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.copyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.copyOf($expr$)
	java.util.Collection [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.copyOf($expr$)
	ARRAY [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.copyOf($expr$)

.naturalOrder : com.google.common.collect.ContiguousSet.naturalOrder
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.naturalOrder()

.orderedBy : com.google.common.collect.ContiguousSet.orderedBy
	java.util.Comparator [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.orderedBy($expr$)

.builderWithExpectedSize : com.google.common.collect.ContiguousSet.builderWithExpectedSize
	INT [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.builderWithExpectedSize($expr$)

.closedOpen : com.google.common.collect.ContiguousSet.closedOpen
	LONG [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.closedOpen($expr$, $arg$)
	INT [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.closedOpen($expr$, $arg$)

.of : com.google.common.collect.ContiguousSet.of
	java.lang.Comparable [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.of()

.toImmutableSortedSet : com.google.common.collect.ContiguousSet.toImmutableSortedSet
	java.util.Comparator [com.google.common.collect.ContiguousSet]  →  com.google.common.collect.ContiguousSet.toImmutableSortedSet($expr$)


## DiscreteDomain

.bigIntegers : com.google.common.collect.DiscreteDomain.bigIntegers
	java.lang.Object [com.google.common.collect.DiscreteDomain]  →  com.google.common.collect.DiscreteDomain.bigIntegers()

.integers : com.google.common.collect.DiscreteDomain.integers
	java.lang.Object [com.google.common.collect.DiscreteDomain]  →  com.google.common.collect.DiscreteDomain.integers()

.longs : com.google.common.collect.DiscreteDomain.longs
	java.lang.Object [com.google.common.collect.DiscreteDomain]  →  com.google.common.collect.DiscreteDomain.longs()


## EnumBiMap

.create : com.google.common.collect.EnumBiMap.create
	java.util.Map [com.google.common.collect.EnumBiMap]  →  com.google.common.collect.EnumBiMap.create($expr$)
	java.lang.Class [com.google.common.collect.EnumBiMap]  →  com.google.common.collect.EnumBiMap.create($expr$, $arg$)


## EnumHashBiMap

.create : com.google.common.collect.EnumHashBiMap.create
	java.util.Map [com.google.common.collect.EnumHashBiMap]  →  com.google.common.collect.EnumHashBiMap.create($expr$)
	java.lang.Class [com.google.common.collect.EnumHashBiMap]  →  com.google.common.collect.EnumHashBiMap.create($expr$)


## EnumMultiset

.create : com.google.common.collect.EnumMultiset.create
	java.lang.Iterable [com.google.common.collect.EnumMultiset]  →  com.google.common.collect.EnumMultiset.create($expr$, $arg$)
	java.lang.Class [com.google.common.collect.EnumMultiset]  →  com.google.common.collect.EnumMultiset.create($expr$)


## EvictingQueue

.create : com.google.common.collect.EvictingQueue.create
	INT [com.google.common.collect.EvictingQueue]  →  com.google.common.collect.EvictingQueue.create($expr$)


## FluentIterable

.of : com.google.common.collect.FluentIterable.of
	java.lang.Object [com.google.common.collect.FluentIterable]  →  com.google.common.collect.FluentIterable.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.FluentIterable]  →  com.google.common.collect.FluentIterable.of()

.from : com.google.common.collect.FluentIterable.from
	ARRAY [com.google.common.collect.FluentIterable]  →  com.google.common.collect.FluentIterable.from($expr$)
	java.lang.Iterable [com.google.common.collect.FluentIterable]  →  com.google.common.collect.FluentIterable.from($expr$)

.concat : com.google.common.collect.FluentIterable.concat
	ARRAY [com.google.common.collect.FluentIterable]  →  com.google.common.collect.FluentIterable.concat($expr$)
	java.lang.Iterable [com.google.common.collect.FluentIterable]  →  com.google.common.collect.FluentIterable.concat($expr$, $arg$)


## HashBasedTable

.create : com.google.common.collect.HashBasedTable.create
	com.google.common.collect.Table [com.google.common.collect.HashBasedTable]  →  com.google.common.collect.HashBasedTable.create($expr$)
	INT [com.google.common.collect.HashBasedTable]  →  com.google.common.collect.HashBasedTable.create($expr$, $arg$)
	java.lang.Object [com.google.common.collect.HashBasedTable]  →  com.google.common.collect.HashBasedTable.create()


## HashBiMap

.create : com.google.common.collect.HashBiMap.create
	java.util.Map [com.google.common.collect.HashBiMap]  →  com.google.common.collect.HashBiMap.create($expr$)
	INT [com.google.common.collect.HashBiMap]  →  com.google.common.collect.HashBiMap.create($expr$)
	java.lang.Object [com.google.common.collect.HashBiMap]  →  com.google.common.collect.HashBiMap.create()


## HashMultimap

.create : com.google.common.collect.HashMultimap.create
	INT [com.google.common.collect.HashMultimap]  →  com.google.common.collect.HashMultimap.create($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.HashMultimap]  →  com.google.common.collect.HashMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.HashMultimap]  →  com.google.common.collect.HashMultimap.create()


## HashMultiset

.create : com.google.common.collect.HashMultiset.create
	java.lang.Iterable [com.google.common.collect.HashMultiset]  →  com.google.common.collect.HashMultiset.create($expr$)
	INT [com.google.common.collect.HashMultiset]  →  com.google.common.collect.HashMultiset.create($expr$)
	java.lang.Object [com.google.common.collect.HashMultiset]  →  com.google.common.collect.HashMultiset.create()


## ImmutableBiMap

.builder : com.google.common.collect.ImmutableBiMap.builder
	java.lang.Object [com.google.common.collect.ImmutableBiMap]  →  com.google.common.collect.ImmutableBiMap.builder()

.toImmutableBiMap : com.google.common.collect.ImmutableBiMap.toImmutableBiMap
	java.util.function.Function [com.google.common.collect.ImmutableBiMap]  →  com.google.common.collect.ImmutableBiMap.toImmutableBiMap($expr$, $arg$)

.copyOf : com.google.common.collect.ImmutableBiMap.copyOf
	java.util.Map [com.google.common.collect.ImmutableBiMap]  →  com.google.common.collect.ImmutableBiMap.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableBiMap]  →  com.google.common.collect.ImmutableBiMap.copyOf($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableBiMap.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableBiMap]  →  com.google.common.collect.ImmutableBiMap.builderWithExpectedSize($expr$)

.ofEntries : com.google.common.collect.ImmutableBiMap.ofEntries
	ARRAY [com.google.common.collect.ImmutableBiMap]  →  com.google.common.collect.ImmutableBiMap.ofEntries($expr$)

.of : com.google.common.collect.ImmutableBiMap.of
	java.lang.Object [com.google.common.collect.ImmutableBiMap]  →  com.google.common.collect.ImmutableBiMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableBiMap]  →  com.google.common.collect.ImmutableBiMap.of()


## ImmutableClassToInstanceMap

.builder : com.google.common.collect.ImmutableClassToInstanceMap.builder
	java.lang.Object [com.google.common.collect.ImmutableClassToInstanceMap]  →  com.google.common.collect.ImmutableClassToInstanceMap.builder()

.of : com.google.common.collect.ImmutableClassToInstanceMap.of
	java.lang.Class [com.google.common.collect.ImmutableClassToInstanceMap]  →  com.google.common.collect.ImmutableClassToInstanceMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableClassToInstanceMap]  →  com.google.common.collect.ImmutableClassToInstanceMap.of()

.copyOf : com.google.common.collect.ImmutableClassToInstanceMap.copyOf
	java.util.Map [com.google.common.collect.ImmutableClassToInstanceMap]  →  com.google.common.collect.ImmutableClassToInstanceMap.copyOf($expr$)


## ImmutableList

.builder : com.google.common.collect.ImmutableList.builder
	java.lang.Object [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.builder()

.sortedCopyOf : com.google.common.collect.ImmutableList.sortedCopyOf
	java.util.Comparator [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.sortedCopyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.sortedCopyOf($expr$)

.copyOf : com.google.common.collect.ImmutableList.copyOf
	java.util.Collection [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.copyOf($expr$)
	ARRAY [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.copyOf($expr$)
	java.util.Iterator [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.copyOf($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableList.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.builderWithExpectedSize($expr$)

.toImmutableList : com.google.common.collect.ImmutableList.toImmutableList
	java.lang.Object [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.toImmutableList()

.of : com.google.common.collect.ImmutableList.of
	java.lang.Object [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableList]  →  com.google.common.collect.ImmutableList.of()


## ImmutableListMultimap

.toImmutableListMultimap : com.google.common.collect.ImmutableListMultimap.toImmutableListMultimap
	java.util.function.Function [com.google.common.collect.ImmutableListMultimap]  →  com.google.common.collect.ImmutableListMultimap.toImmutableListMultimap($expr$, $arg$)

.builder : com.google.common.collect.ImmutableListMultimap.builder
	java.lang.Object [com.google.common.collect.ImmutableListMultimap]  →  com.google.common.collect.ImmutableListMultimap.builder()

.copyOf : com.google.common.collect.ImmutableListMultimap.copyOf
	java.lang.Iterable [com.google.common.collect.ImmutableListMultimap]  →  com.google.common.collect.ImmutableListMultimap.copyOf($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.ImmutableListMultimap]  →  com.google.common.collect.ImmutableListMultimap.copyOf($expr$)

.flatteningToImmutableListMultimap : com.google.common.collect.ImmutableListMultimap.flatteningToImmutableListMultimap
	java.util.function.Function [com.google.common.collect.ImmutableListMultimap]  →  com.google.common.collect.ImmutableListMultimap.flatteningToImmutableListMultimap($expr$, $arg$)

.of : com.google.common.collect.ImmutableListMultimap.of
	java.lang.Object [com.google.common.collect.ImmutableListMultimap]  →  com.google.common.collect.ImmutableListMultimap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableListMultimap]  →  com.google.common.collect.ImmutableListMultimap.of()


## ImmutableMap

.toImmutableMap : com.google.common.collect.ImmutableMap.toImmutableMap
	java.util.function.Function [com.google.common.collect.ImmutableMap]  →  com.google.common.collect.ImmutableMap.toImmutableMap($expr$, $arg$)

.builder : com.google.common.collect.ImmutableMap.builder
	java.lang.Object [com.google.common.collect.ImmutableMap]  →  com.google.common.collect.ImmutableMap.builder()

.copyOf : com.google.common.collect.ImmutableMap.copyOf
	java.util.Map [com.google.common.collect.ImmutableMap]  →  com.google.common.collect.ImmutableMap.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableMap]  →  com.google.common.collect.ImmutableMap.copyOf($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableMap.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableMap]  →  com.google.common.collect.ImmutableMap.builderWithExpectedSize($expr$)

.ofEntries : com.google.common.collect.ImmutableMap.ofEntries
	ARRAY [com.google.common.collect.ImmutableMap]  →  com.google.common.collect.ImmutableMap.ofEntries($expr$)

.of : com.google.common.collect.ImmutableMap.of
	java.lang.Object [com.google.common.collect.ImmutableMap]  →  com.google.common.collect.ImmutableMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableMap]  →  com.google.common.collect.ImmutableMap.of()


## ImmutableMultimap

.builder : com.google.common.collect.ImmutableMultimap.builder
	java.lang.Object [com.google.common.collect.ImmutableMultimap]  →  com.google.common.collect.ImmutableMultimap.builder()

.of : com.google.common.collect.ImmutableMultimap.of
	java.lang.Object [com.google.common.collect.ImmutableMultimap]  →  com.google.common.collect.ImmutableMultimap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableMultimap]  →  com.google.common.collect.ImmutableMultimap.of()

.copyOf : com.google.common.collect.ImmutableMultimap.copyOf
	java.lang.Iterable [com.google.common.collect.ImmutableMultimap]  →  com.google.common.collect.ImmutableMultimap.copyOf($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.ImmutableMultimap]  →  com.google.common.collect.ImmutableMultimap.copyOf($expr$)


## ImmutableMultiset

.builder : com.google.common.collect.ImmutableMultiset.builder
	java.lang.Object [com.google.common.collect.ImmutableMultiset]  →  com.google.common.collect.ImmutableMultiset.builder()

.toImmutableMultiset : com.google.common.collect.ImmutableMultiset.toImmutableMultiset
	java.util.function.Function [com.google.common.collect.ImmutableMultiset]  →  com.google.common.collect.ImmutableMultiset.toImmutableMultiset($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableMultiset]  →  com.google.common.collect.ImmutableMultiset.toImmutableMultiset()

.of : com.google.common.collect.ImmutableMultiset.of
	java.lang.Object [com.google.common.collect.ImmutableMultiset]  →  com.google.common.collect.ImmutableMultiset.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableMultiset]  →  com.google.common.collect.ImmutableMultiset.of()

.copyOf : com.google.common.collect.ImmutableMultiset.copyOf
	ARRAY [com.google.common.collect.ImmutableMultiset]  →  com.google.common.collect.ImmutableMultiset.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableMultiset]  →  com.google.common.collect.ImmutableMultiset.copyOf($expr$)
	java.util.Iterator [com.google.common.collect.ImmutableMultiset]  →  com.google.common.collect.ImmutableMultiset.copyOf($expr$)


## ImmutableRangeMap

.builder : com.google.common.collect.ImmutableRangeMap.builder
	java.lang.Object [com.google.common.collect.ImmutableRangeMap]  →  com.google.common.collect.ImmutableRangeMap.builder()

.of : com.google.common.collect.ImmutableRangeMap.of
	com.google.common.collect.Range [com.google.common.collect.ImmutableRangeMap]  →  com.google.common.collect.ImmutableRangeMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableRangeMap]  →  com.google.common.collect.ImmutableRangeMap.of()

.copyOf : com.google.common.collect.ImmutableRangeMap.copyOf
	com.google.common.collect.RangeMap [com.google.common.collect.ImmutableRangeMap]  →  com.google.common.collect.ImmutableRangeMap.copyOf($expr$)

.toImmutableRangeMap : com.google.common.collect.ImmutableRangeMap.toImmutableRangeMap
	java.util.function.Function [com.google.common.collect.ImmutableRangeMap]  →  com.google.common.collect.ImmutableRangeMap.toImmutableRangeMap($expr$, $arg$)


## ImmutableRangeSet

.unionOf : com.google.common.collect.ImmutableRangeSet.unionOf
	java.lang.Iterable [com.google.common.collect.ImmutableRangeSet]  →  com.google.common.collect.ImmutableRangeSet.unionOf($expr$)

.builder : com.google.common.collect.ImmutableRangeSet.builder
	java.lang.Object [com.google.common.collect.ImmutableRangeSet]  →  com.google.common.collect.ImmutableRangeSet.builder()

.copyOf : com.google.common.collect.ImmutableRangeSet.copyOf
	java.lang.Iterable [com.google.common.collect.ImmutableRangeSet]  →  com.google.common.collect.ImmutableRangeSet.copyOf($expr$)
	com.google.common.collect.RangeSet [com.google.common.collect.ImmutableRangeSet]  →  com.google.common.collect.ImmutableRangeSet.copyOf($expr$)

.toImmutableRangeSet : com.google.common.collect.ImmutableRangeSet.toImmutableRangeSet
	java.lang.Object [com.google.common.collect.ImmutableRangeSet]  →  com.google.common.collect.ImmutableRangeSet.toImmutableRangeSet()

.of : com.google.common.collect.ImmutableRangeSet.of
	com.google.common.collect.Range [com.google.common.collect.ImmutableRangeSet]  →  com.google.common.collect.ImmutableRangeSet.of($expr$)
	java.lang.Object [com.google.common.collect.ImmutableRangeSet]  →  com.google.common.collect.ImmutableRangeSet.of()


## ImmutableSet

.builder : com.google.common.collect.ImmutableSet.builder
	java.lang.Object [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.builder()

.toImmutableSet : com.google.common.collect.ImmutableSet.toImmutableSet
	java.lang.Object [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.toImmutableSet()

.copyOf : com.google.common.collect.ImmutableSet.copyOf
	java.util.Collection [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.copyOf($expr$)
	ARRAY [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.copyOf($expr$)
	java.util.Iterator [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.copyOf($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableSet.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.builderWithExpectedSize($expr$)

.of : com.google.common.collect.ImmutableSet.of
	java.lang.Object [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSet]  →  com.google.common.collect.ImmutableSet.of()


## ImmutableSetMultimap

.flatteningToImmutableSetMultimap : com.google.common.collect.ImmutableSetMultimap.flatteningToImmutableSetMultimap
	java.util.function.Function [com.google.common.collect.ImmutableSetMultimap]  →  com.google.common.collect.ImmutableSetMultimap.flatteningToImmutableSetMultimap($expr$, $arg$)

.builder : com.google.common.collect.ImmutableSetMultimap.builder
	java.lang.Object [com.google.common.collect.ImmutableSetMultimap]  →  com.google.common.collect.ImmutableSetMultimap.builder()

.toImmutableSetMultimap : com.google.common.collect.ImmutableSetMultimap.toImmutableSetMultimap
	java.util.function.Function [com.google.common.collect.ImmutableSetMultimap]  →  com.google.common.collect.ImmutableSetMultimap.toImmutableSetMultimap($expr$, $arg$)

.copyOf : com.google.common.collect.ImmutableSetMultimap.copyOf
	java.lang.Iterable [com.google.common.collect.ImmutableSetMultimap]  →  com.google.common.collect.ImmutableSetMultimap.copyOf($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.ImmutableSetMultimap]  →  com.google.common.collect.ImmutableSetMultimap.copyOf($expr$)

.of : com.google.common.collect.ImmutableSetMultimap.of
	java.lang.Object [com.google.common.collect.ImmutableSetMultimap]  →  com.google.common.collect.ImmutableSetMultimap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSetMultimap]  →  com.google.common.collect.ImmutableSetMultimap.of()


## ImmutableSortedMap

.reverseOrder : com.google.common.collect.ImmutableSortedMap.reverseOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.reverseOrder()

.copyOfSorted : com.google.common.collect.ImmutableSortedMap.copyOfSorted
	java.util.SortedMap [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.copyOfSorted($expr$)

.toImmutableSortedMap : com.google.common.collect.ImmutableSortedMap.toImmutableSortedMap
	java.util.Comparator [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.toImmutableSortedMap($expr$, $arg$)

.builder : com.google.common.collect.ImmutableSortedMap.builder
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.builder()

.copyOf : com.google.common.collect.ImmutableSortedMap.copyOf
	java.util.Map [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.copyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.copyOf($expr$, $arg$)

.naturalOrder : com.google.common.collect.ImmutableSortedMap.naturalOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.naturalOrder()

.orderedBy : com.google.common.collect.ImmutableSortedMap.orderedBy
	java.util.Comparator [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.orderedBy($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableSortedMap.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.builderWithExpectedSize($expr$)

.ofEntries : com.google.common.collect.ImmutableSortedMap.ofEntries
	ARRAY [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.ofEntries($expr$)

.of : com.google.common.collect.ImmutableSortedMap.of
	java.lang.Comparable [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  com.google.common.collect.ImmutableSortedMap.of()


## ImmutableSortedMultiset

.reverseOrder : com.google.common.collect.ImmutableSortedMultiset.reverseOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.reverseOrder()

.toImmutableSortedMultiset : com.google.common.collect.ImmutableSortedMultiset.toImmutableSortedMultiset
	java.util.Comparator [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.toImmutableSortedMultiset($expr$, $arg$)

.copyOfSorted : com.google.common.collect.ImmutableSortedMultiset.copyOfSorted
	com.google.common.collect.SortedMultiset [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.copyOfSorted($expr$)

.builder : com.google.common.collect.ImmutableSortedMultiset.builder
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.builder()

.copyOf : com.google.common.collect.ImmutableSortedMultiset.copyOf
	ARRAY [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.copyOf($expr$)
	java.util.Comparator [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.copyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.copyOf($expr$)
	java.util.Iterator [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.copyOf($expr$)

.naturalOrder : com.google.common.collect.ImmutableSortedMultiset.naturalOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.naturalOrder()

.orderedBy : com.google.common.collect.ImmutableSortedMultiset.orderedBy
	java.util.Comparator [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.orderedBy($expr$)

.of : com.google.common.collect.ImmutableSortedMultiset.of
	java.lang.Comparable [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  com.google.common.collect.ImmutableSortedMultiset.of()


## ImmutableSortedSet

.reverseOrder : com.google.common.collect.ImmutableSortedSet.reverseOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.reverseOrder()

.copyOfSorted : com.google.common.collect.ImmutableSortedSet.copyOfSorted
	java.util.SortedSet [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.copyOfSorted($expr$)

.builder : com.google.common.collect.ImmutableSortedSet.builder
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.builder()

.copyOf : com.google.common.collect.ImmutableSortedSet.copyOf
	java.util.Iterator [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.copyOf($expr$)
	java.util.Comparator [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.copyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.copyOf($expr$)
	java.util.Collection [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.copyOf($expr$)
	ARRAY [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.copyOf($expr$)

.naturalOrder : com.google.common.collect.ImmutableSortedSet.naturalOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.naturalOrder()

.orderedBy : com.google.common.collect.ImmutableSortedSet.orderedBy
	java.util.Comparator [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.orderedBy($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableSortedSet.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.builderWithExpectedSize($expr$)

.of : com.google.common.collect.ImmutableSortedSet.of
	java.lang.Comparable [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.of()

.toImmutableSortedSet : com.google.common.collect.ImmutableSortedSet.toImmutableSortedSet
	java.util.Comparator [com.google.common.collect.ImmutableSortedSet]  →  com.google.common.collect.ImmutableSortedSet.toImmutableSortedSet($expr$)


## ImmutableTable

.builder : com.google.common.collect.ImmutableTable.builder
	java.lang.Object [com.google.common.collect.ImmutableTable]  →  com.google.common.collect.ImmutableTable.builder()

.of : com.google.common.collect.ImmutableTable.of
	java.lang.Object [com.google.common.collect.ImmutableTable]  →  com.google.common.collect.ImmutableTable.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableTable]  →  com.google.common.collect.ImmutableTable.of()

.copyOf : com.google.common.collect.ImmutableTable.copyOf
	com.google.common.collect.Table [com.google.common.collect.ImmutableTable]  →  com.google.common.collect.ImmutableTable.copyOf($expr$)

.toImmutableTable : com.google.common.collect.ImmutableTable.toImmutableTable
	java.util.function.Function [com.google.common.collect.ImmutableTable]  →  com.google.common.collect.ImmutableTable.toImmutableTable($expr$, $arg$)


## Interners

.newBuilder : com.google.common.collect.Interners.newBuilder
	java.lang.Object [com.google.common.collect.Interners]  →  com.google.common.collect.Interners.newBuilder()

.newStrongInterner : com.google.common.collect.Interners.newStrongInterner
	java.lang.Object [com.google.common.collect.Interners]  →  com.google.common.collect.Interners.newStrongInterner()

.asFunction : com.google.common.collect.Interners.asFunction
	com.google.common.collect.Interner [com.google.common.collect.Interners]  →  com.google.common.collect.Interners.asFunction($expr$)

.newWeakInterner : com.google.common.collect.Interners.newWeakInterner
	java.lang.Object [com.google.common.collect.Interners]  →  com.google.common.collect.Interners.newWeakInterner()


## Iterables

.find : com.google.common.collect.Iterables.find
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.find($expr$, $arg$)

.any : com.google.common.collect.Iterables.any
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.any($expr$, $arg$)

.tryFind : com.google.common.collect.Iterables.tryFind
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.tryFind($expr$, $arg$)

.size : com.google.common.collect.Iterables.size
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.size($expr$)

.elementsEqual : com.google.common.collect.Iterables.elementsEqual
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.elementsEqual($expr$, $arg$)

.getLast : com.google.common.collect.Iterables.getLast
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.getLast($expr$, $arg$)

.all : com.google.common.collect.Iterables.all
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.all($expr$, $arg$)

.addAll : com.google.common.collect.Iterables.addAll
	java.util.Collection [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.addAll($expr$, $arg$)

.consumingIterable : com.google.common.collect.Iterables.consumingIterable
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.consumingIterable($expr$)

.concat : com.google.common.collect.Iterables.concat
	ARRAY [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.concat($expr$)
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.concat($expr$, $arg$)

.partition : com.google.common.collect.Iterables.partition
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.partition($expr$, $arg$)

.unmodifiableIterable : com.google.common.collect.Iterables.unmodifiableIterable
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.unmodifiableIterable($expr$)

.skip : com.google.common.collect.Iterables.skip
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.skip($expr$, $arg$)

.getOnlyElement : com.google.common.collect.Iterables.getOnlyElement
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.getOnlyElement($expr$, $arg$)

.filter : com.google.common.collect.Iterables.filter
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.filter($expr$, $arg$)

.mergeSorted : com.google.common.collect.Iterables.mergeSorted
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.mergeSorted($expr$, $arg$)

.cycle : com.google.common.collect.Iterables.cycle
	ARRAY [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.cycle($expr$)
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.cycle($expr$)

.retainAll : com.google.common.collect.Iterables.retainAll
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.retainAll($expr$, $arg$)

.paddedPartition : com.google.common.collect.Iterables.paddedPartition
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.paddedPartition($expr$, $arg$)

.toArray : com.google.common.collect.Iterables.toArray
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.toArray($expr$, $arg$)

.toString : com.google.common.collect.Iterables.toString
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.toString($expr$)

.removeIf : com.google.common.collect.Iterables.removeIf
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.removeIf($expr$, $arg$)

.frequency : com.google.common.collect.Iterables.frequency
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.frequency($expr$, $arg$)

.get : com.google.common.collect.Iterables.get
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.get($expr$, $arg$)

.removeAll : com.google.common.collect.Iterables.removeAll
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.removeAll($expr$, $arg$)

.contains : com.google.common.collect.Iterables.contains
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.contains($expr$, $arg$)

.isEmpty : com.google.common.collect.Iterables.isEmpty
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.isEmpty($expr$)

.limit : com.google.common.collect.Iterables.limit
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.limit($expr$, $arg$)

.transform : com.google.common.collect.Iterables.transform
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.transform($expr$, $arg$)

.indexOf : com.google.common.collect.Iterables.indexOf
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.indexOf($expr$, $arg$)

.getFirst : com.google.common.collect.Iterables.getFirst
	java.lang.Iterable [com.google.common.collect.Iterables]  →  com.google.common.collect.Iterables.getFirst($expr$, $arg$)


## Iterators

.find : com.google.common.collect.Iterators.find
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.find($expr$, $arg$)

.any : com.google.common.collect.Iterators.any
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.any($expr$, $arg$)

.getNext : com.google.common.collect.Iterators.getNext
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.getNext($expr$, $arg$)

.tryFind : com.google.common.collect.Iterators.tryFind
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.tryFind($expr$, $arg$)

.size : com.google.common.collect.Iterators.size
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.size($expr$)

.elementsEqual : com.google.common.collect.Iterators.elementsEqual
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.elementsEqual($expr$, $arg$)

.getLast : com.google.common.collect.Iterators.getLast
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.getLast($expr$, $arg$)

.all : com.google.common.collect.Iterators.all
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.all($expr$, $arg$)

.consumingIterator : com.google.common.collect.Iterators.consumingIterator
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.consumingIterator($expr$)

.addAll : com.google.common.collect.Iterators.addAll
	java.util.Collection [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.addAll($expr$, $arg$)

.concat : com.google.common.collect.Iterators.concat
	ARRAY [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.concat($expr$)
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.concat($expr$, $arg$)

.partition : com.google.common.collect.Iterators.partition
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.partition($expr$, $arg$)

.advance : com.google.common.collect.Iterators.advance
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.advance($expr$, $arg$)

.getOnlyElement : com.google.common.collect.Iterators.getOnlyElement
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.getOnlyElement($expr$, $arg$)

.filter : com.google.common.collect.Iterators.filter
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.filter($expr$, $arg$)

.mergeSorted : com.google.common.collect.Iterators.mergeSorted
	java.lang.Iterable [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.mergeSorted($expr$, $arg$)

.peekingIterator : com.google.common.collect.Iterators.peekingIterator
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.peekingIterator($expr$)

.cycle : com.google.common.collect.Iterators.cycle
	ARRAY [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.cycle($expr$)
	java.lang.Iterable [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.cycle($expr$)

.retainAll : com.google.common.collect.Iterators.retainAll
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.retainAll($expr$, $arg$)

.paddedPartition : com.google.common.collect.Iterators.paddedPartition
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.paddedPartition($expr$, $arg$)

.toArray : com.google.common.collect.Iterators.toArray
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.toArray($expr$, $arg$)

.forArray : com.google.common.collect.Iterators.forArray
	ARRAY [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.forArray($expr$)

.forEnumeration : com.google.common.collect.Iterators.forEnumeration
	java.util.Enumeration [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.forEnumeration($expr$)

.toString : com.google.common.collect.Iterators.toString
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.toString($expr$)

.removeIf : com.google.common.collect.Iterators.removeIf
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.removeIf($expr$, $arg$)

.frequency : com.google.common.collect.Iterators.frequency
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.frequency($expr$, $arg$)

.get : com.google.common.collect.Iterators.get
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.get($expr$, $arg$)

.removeAll : com.google.common.collect.Iterators.removeAll
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.removeAll($expr$, $arg$)

.singletonIterator : com.google.common.collect.Iterators.singletonIterator
	java.lang.Object [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.singletonIterator($expr$)

.contains : com.google.common.collect.Iterators.contains
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.contains($expr$, $arg$)

.limit : com.google.common.collect.Iterators.limit
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.limit($expr$, $arg$)

.transform : com.google.common.collect.Iterators.transform
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.transform($expr$, $arg$)

.indexOf : com.google.common.collect.Iterators.indexOf
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.indexOf($expr$, $arg$)

.asEnumeration : com.google.common.collect.Iterators.asEnumeration
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.asEnumeration($expr$)

.unmodifiableIterator : com.google.common.collect.Iterators.unmodifiableIterator
	java.util.Iterator [com.google.common.collect.Iterators]  →  com.google.common.collect.Iterators.unmodifiableIterator($expr$)


## LinkedHashMultimap

.create : com.google.common.collect.LinkedHashMultimap.create
	INT [com.google.common.collect.LinkedHashMultimap]  →  com.google.common.collect.LinkedHashMultimap.create($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.LinkedHashMultimap]  →  com.google.common.collect.LinkedHashMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.LinkedHashMultimap]  →  com.google.common.collect.LinkedHashMultimap.create()


## LinkedHashMultiset

.create : com.google.common.collect.LinkedHashMultiset.create
	java.lang.Iterable [com.google.common.collect.LinkedHashMultiset]  →  com.google.common.collect.LinkedHashMultiset.create($expr$)
	INT [com.google.common.collect.LinkedHashMultiset]  →  com.google.common.collect.LinkedHashMultiset.create($expr$)
	java.lang.Object [com.google.common.collect.LinkedHashMultiset]  →  com.google.common.collect.LinkedHashMultiset.create()


## LinkedListMultimap

.create : com.google.common.collect.LinkedListMultimap.create
	INT [com.google.common.collect.LinkedListMultimap]  →  com.google.common.collect.LinkedListMultimap.create($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.LinkedListMultimap]  →  com.google.common.collect.LinkedListMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.LinkedListMultimap]  →  com.google.common.collect.LinkedListMultimap.create()


## Lists

.asList : com.google.common.collect.Lists.asList
	java.lang.Object [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.asList($expr$, $arg$)

.newArrayList : com.google.common.collect.Lists.newArrayList
	ARRAY [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayList($expr$)
	java.lang.Iterable [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayList($expr$)
	java.util.Iterator [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayList()

.partition : com.google.common.collect.Lists.partition
	java.util.List [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.partition($expr$, $arg$)

.cartesianProduct : com.google.common.collect.Lists.cartesianProduct
	ARRAY [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.cartesianProduct($expr$)
	java.util.List [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.cartesianProduct($expr$)

.charactersOf : com.google.common.collect.Lists.charactersOf
	java.lang.String [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.charactersOf($expr$)
	java.lang.CharSequence [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.charactersOf($expr$)

.reverse : com.google.common.collect.Lists.reverse
	java.util.List [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.reverse($expr$)

.newArrayListWithExpectedSize : com.google.common.collect.Lists.newArrayListWithExpectedSize
	INT [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayListWithExpectedSize($expr$)

.newCopyOnWriteArrayList : com.google.common.collect.Lists.newCopyOnWriteArrayList
	java.lang.Iterable [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newCopyOnWriteArrayList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newCopyOnWriteArrayList()

.newArrayListWithCapacity : com.google.common.collect.Lists.newArrayListWithCapacity
	INT [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newArrayListWithCapacity($expr$)

.newLinkedList : com.google.common.collect.Lists.newLinkedList
	java.lang.Iterable [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newLinkedList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.newLinkedList()

.transform : com.google.common.collect.Lists.transform
	java.util.List [com.google.common.collect.Lists]  →  com.google.common.collect.Lists.transform($expr$, $arg$)


## Maps

.toImmutableEnumMap : com.google.common.collect.Maps.toImmutableEnumMap
	java.util.function.Function [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.toImmutableEnumMap($expr$, $arg$)

.synchronizedBiMap : com.google.common.collect.Maps.synchronizedBiMap
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.synchronizedBiMap($expr$)

.asConverter : com.google.common.collect.Maps.asConverter
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.asConverter($expr$)

.synchronizedNavigableMap : com.google.common.collect.Maps.synchronizedNavigableMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.synchronizedNavigableMap($expr$)

.toMap : com.google.common.collect.Maps.toMap
	java.lang.Iterable [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.toMap($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.toMap($expr$, $arg$)

.newIdentityHashMap : com.google.common.collect.Maps.newIdentityHashMap
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newIdentityHashMap()

.newLinkedHashMap : com.google.common.collect.Maps.newLinkedHashMap
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newLinkedHashMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newLinkedHashMap()

.filterKeys : com.google.common.collect.Maps.filterKeys
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterKeys($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterKeys($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterKeys($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterKeys($expr$, $arg$)

.filterEntries : com.google.common.collect.Maps.filterEntries
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterEntries($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterEntries($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterEntries($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterEntries($expr$, $arg$)

.transformEntries : com.google.common.collect.Maps.transformEntries
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformEntries($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformEntries($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformEntries($expr$, $arg$)

.newHashMapWithExpectedSize : com.google.common.collect.Maps.newHashMapWithExpectedSize
	INT [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newHashMapWithExpectedSize($expr$)

.uniqueIndex : com.google.common.collect.Maps.uniqueIndex
	java.lang.Iterable [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.uniqueIndex($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.uniqueIndex($expr$, $arg$)

.immutableEnumMap : com.google.common.collect.Maps.immutableEnumMap
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.immutableEnumMap($expr$)

.newEnumMap : com.google.common.collect.Maps.newEnumMap
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newEnumMap($expr$)
	java.lang.Class [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newEnumMap($expr$)

.unmodifiableBiMap : com.google.common.collect.Maps.unmodifiableBiMap
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.unmodifiableBiMap($expr$)

.fromProperties : com.google.common.collect.Maps.fromProperties
	java.util.Properties [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.fromProperties($expr$)

.asMap : com.google.common.collect.Maps.asMap
	java.util.NavigableSet [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.asMap($expr$, $arg$)
	java.util.SortedSet [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.asMap($expr$, $arg$)
	java.util.Set [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.asMap($expr$, $arg$)

.unmodifiableNavigableMap : com.google.common.collect.Maps.unmodifiableNavigableMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.unmodifiableNavigableMap($expr$)

.transformValues : com.google.common.collect.Maps.transformValues
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformValues($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformValues($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.transformValues($expr$, $arg$)

.newConcurrentMap : com.google.common.collect.Maps.newConcurrentMap
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newConcurrentMap()

.filterValues : com.google.common.collect.Maps.filterValues
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterValues($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterValues($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterValues($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.filterValues($expr$, $arg$)

.subMap : com.google.common.collect.Maps.subMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.subMap($expr$, $arg$)

.difference : com.google.common.collect.Maps.difference
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.difference($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.difference($expr$, $arg$)

.newHashMap : com.google.common.collect.Maps.newHashMap
	java.util.Map [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newHashMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newHashMap()

.newLinkedHashMapWithExpectedSize : com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize
	INT [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize($expr$)

.immutableEntry : com.google.common.collect.Maps.immutableEntry
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.immutableEntry($expr$, $arg$)

.newTreeMap : com.google.common.collect.Maps.newTreeMap
	java.util.Comparator [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newTreeMap($expr$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newTreeMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  com.google.common.collect.Maps.newTreeMap()


## MinMaxPriorityQueue

.expectedSize : com.google.common.collect.MinMaxPriorityQueue.expectedSize
	INT [com.google.common.collect.MinMaxPriorityQueue]  →  com.google.common.collect.MinMaxPriorityQueue.expectedSize($expr$)

.maximumSize : com.google.common.collect.MinMaxPriorityQueue.maximumSize
	INT [com.google.common.collect.MinMaxPriorityQueue]  →  com.google.common.collect.MinMaxPriorityQueue.maximumSize($expr$)

.orderedBy : com.google.common.collect.MinMaxPriorityQueue.orderedBy
	java.util.Comparator [com.google.common.collect.MinMaxPriorityQueue]  →  com.google.common.collect.MinMaxPriorityQueue.orderedBy($expr$)

.create : com.google.common.collect.MinMaxPriorityQueue.create
	java.lang.Iterable [com.google.common.collect.MinMaxPriorityQueue]  →  com.google.common.collect.MinMaxPriorityQueue.create($expr$)
	java.lang.Object [com.google.common.collect.MinMaxPriorityQueue]  →  com.google.common.collect.MinMaxPriorityQueue.create()


## MoreCollectors

.toOptional : com.google.common.collect.MoreCollectors.toOptional
	java.lang.Object [com.google.common.collect.MoreCollectors]  →  com.google.common.collect.MoreCollectors.toOptional()

.onlyElement : com.google.common.collect.MoreCollectors.onlyElement
	java.lang.Object [com.google.common.collect.MoreCollectors]  →  com.google.common.collect.MoreCollectors.onlyElement()


## MultimapBuilder

.enumKeys : com.google.common.collect.MultimapBuilder.enumKeys
	java.lang.Class [com.google.common.collect.MultimapBuilder]  →  com.google.common.collect.MultimapBuilder.enumKeys($expr$)

.treeKeys : com.google.common.collect.MultimapBuilder.treeKeys
	java.util.Comparator [com.google.common.collect.MultimapBuilder]  →  com.google.common.collect.MultimapBuilder.treeKeys($expr$)
	java.lang.Object [com.google.common.collect.MultimapBuilder]  →  com.google.common.collect.MultimapBuilder.treeKeys()

.linkedHashKeys : com.google.common.collect.MultimapBuilder.linkedHashKeys
	INT [com.google.common.collect.MultimapBuilder]  →  com.google.common.collect.MultimapBuilder.linkedHashKeys($expr$)
	java.lang.Object [com.google.common.collect.MultimapBuilder]  →  com.google.common.collect.MultimapBuilder.linkedHashKeys()

.hashKeys : com.google.common.collect.MultimapBuilder.hashKeys
	INT [com.google.common.collect.MultimapBuilder]  →  com.google.common.collect.MultimapBuilder.hashKeys($expr$)
	java.lang.Object [com.google.common.collect.MultimapBuilder]  →  com.google.common.collect.MultimapBuilder.hashKeys()


## Multimaps

.newSortedSetMultimap : com.google.common.collect.Multimaps.newSortedSetMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.newSortedSetMultimap($expr$, $arg$)

.synchronizedMultimap : com.google.common.collect.Multimaps.synchronizedMultimap
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.synchronizedMultimap($expr$)

.forMap : com.google.common.collect.Multimaps.forMap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.forMap($expr$)

.filterKeys : com.google.common.collect.Multimaps.filterKeys
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterKeys($expr$, $arg$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterKeys($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterKeys($expr$, $arg$)

.toMultimap : com.google.common.collect.Multimaps.toMultimap
	java.util.function.Function [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.toMultimap($expr$, $arg$)

.filterEntries : com.google.common.collect.Multimaps.filterEntries
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterEntries($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterEntries($expr$, $arg$)

.invertFrom : com.google.common.collect.Multimaps.invertFrom
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.invertFrom($expr$, $arg$)

.transformEntries : com.google.common.collect.Multimaps.transformEntries
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.transformEntries($expr$, $arg$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.transformEntries($expr$, $arg$)

.unmodifiableListMultimap : com.google.common.collect.Multimaps.unmodifiableListMultimap
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.unmodifiableListMultimap($expr$)

.newListMultimap : com.google.common.collect.Multimaps.newListMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.newListMultimap($expr$, $arg$)

.unmodifiableSetMultimap : com.google.common.collect.Multimaps.unmodifiableSetMultimap
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.unmodifiableSetMultimap($expr$)

.newSetMultimap : com.google.common.collect.Multimaps.newSetMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.newSetMultimap($expr$, $arg$)

.newMultimap : com.google.common.collect.Multimaps.newMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.newMultimap($expr$, $arg$)

.unmodifiableMultimap : com.google.common.collect.Multimaps.unmodifiableMultimap
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.unmodifiableMultimap($expr$)

.asMap : com.google.common.collect.Multimaps.asMap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.asMap($expr$)
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.asMap($expr$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.asMap($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.asMap($expr$)

.flatteningToMultimap : com.google.common.collect.Multimaps.flatteningToMultimap
	java.util.function.Function [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.flatteningToMultimap($expr$, $arg$)

.transformValues : com.google.common.collect.Multimaps.transformValues
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.transformValues($expr$, $arg$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.transformValues($expr$, $arg$)

.synchronizedListMultimap : com.google.common.collect.Multimaps.synchronizedListMultimap
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.synchronizedListMultimap($expr$)

.synchronizedSortedSetMultimap : com.google.common.collect.Multimaps.synchronizedSortedSetMultimap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.synchronizedSortedSetMultimap($expr$)

.filterValues : com.google.common.collect.Multimaps.filterValues
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterValues($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.filterValues($expr$, $arg$)

.unmodifiableSortedSetMultimap : com.google.common.collect.Multimaps.unmodifiableSortedSetMultimap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.unmodifiableSortedSetMultimap($expr$)

.synchronizedSetMultimap : com.google.common.collect.Multimaps.synchronizedSetMultimap
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.synchronizedSetMultimap($expr$)

.index : com.google.common.collect.Multimaps.index
	java.lang.Iterable [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.index($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Multimaps]  →  com.google.common.collect.Multimaps.index($expr$, $arg$)


## Multisets

.union : com.google.common.collect.Multisets.union
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.union($expr$, $arg$)

.intersection : com.google.common.collect.Multisets.intersection
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.intersection($expr$, $arg$)

.unmodifiableMultiset : com.google.common.collect.Multisets.unmodifiableMultiset
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.unmodifiableMultiset($expr$)

.toMultiset : com.google.common.collect.Multisets.toMultiset
	java.util.function.Function [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.toMultiset($expr$, $arg$)

.removeOccurrences : com.google.common.collect.Multisets.removeOccurrences
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.removeOccurrences($expr$, $arg$)

.retainOccurrences : com.google.common.collect.Multisets.retainOccurrences
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.retainOccurrences($expr$, $arg$)

.filter : com.google.common.collect.Multisets.filter
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.filter($expr$, $arg$)

.copyHighestCountFirst : com.google.common.collect.Multisets.copyHighestCountFirst
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.copyHighestCountFirst($expr$)

.unmodifiableSortedMultiset : com.google.common.collect.Multisets.unmodifiableSortedMultiset
	com.google.common.collect.SortedMultiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.unmodifiableSortedMultiset($expr$)

.difference : com.google.common.collect.Multisets.difference
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.difference($expr$, $arg$)

.sum : com.google.common.collect.Multisets.sum
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.sum($expr$, $arg$)

.immutableEntry : com.google.common.collect.Multisets.immutableEntry
	java.lang.Object [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.immutableEntry($expr$, $arg$)

.containsOccurrences : com.google.common.collect.Multisets.containsOccurrences
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  com.google.common.collect.Multisets.containsOccurrences($expr$, $arg$)


## MutableClassToInstanceMap

.create : com.google.common.collect.MutableClassToInstanceMap.create
	java.util.Map [com.google.common.collect.MutableClassToInstanceMap]  →  com.google.common.collect.MutableClassToInstanceMap.create($expr$)
	java.lang.Object [com.google.common.collect.MutableClassToInstanceMap]  →  com.google.common.collect.MutableClassToInstanceMap.create()


## ObjectArrays

.newArray : com.google.common.collect.ObjectArrays.newArray
	ARRAY [com.google.common.collect.ObjectArrays]  →  com.google.common.collect.ObjectArrays.newArray($expr$, $arg$)
	java.lang.Class [com.google.common.collect.ObjectArrays]  →  com.google.common.collect.ObjectArrays.newArray($expr$, $arg$)

.concat : com.google.common.collect.ObjectArrays.concat
	ARRAY [com.google.common.collect.ObjectArrays]  →  com.google.common.collect.ObjectArrays.concat($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ObjectArrays]  →  com.google.common.collect.ObjectArrays.concat($expr$, $arg$)


## Ordering

.compound : com.google.common.collect.Ordering.compound
	java.lang.Iterable [com.google.common.collect.Ordering]  →  com.google.common.collect.Ordering.compound($expr$)

.usingToString : com.google.common.collect.Ordering.usingToString
	java.lang.Object [com.google.common.collect.Ordering]  →  com.google.common.collect.Ordering.usingToString()

.allEqual : com.google.common.collect.Ordering.allEqual
	java.lang.Object [com.google.common.collect.Ordering]  →  com.google.common.collect.Ordering.allEqual()

.arbitrary : com.google.common.collect.Ordering.arbitrary
	java.lang.Object [com.google.common.collect.Ordering]  →  com.google.common.collect.Ordering.arbitrary()

.from : com.google.common.collect.Ordering.from
	java.util.Comparator [com.google.common.collect.Ordering]  →  com.google.common.collect.Ordering.from($expr$)

.natural : com.google.common.collect.Ordering.natural
	java.lang.Object [com.google.common.collect.Ordering]  →  com.google.common.collect.Ordering.natural()

.explicit : com.google.common.collect.Ordering.explicit
	java.util.List [com.google.common.collect.Ordering]  →  com.google.common.collect.Ordering.explicit($expr$)
	java.lang.Object [com.google.common.collect.Ordering]  →  com.google.common.collect.Ordering.explicit($expr$, $arg$)


## Queues

.drainUninterruptibly : com.google.common.collect.Queues.drainUninterruptibly
	java.util.concurrent.BlockingQueue [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.drainUninterruptibly($expr$, $arg$)

.newArrayBlockingQueue : com.google.common.collect.Queues.newArrayBlockingQueue
	INT [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newArrayBlockingQueue($expr$)

.drain : com.google.common.collect.Queues.drain
	java.util.concurrent.BlockingQueue [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.drain($expr$, $arg$)

.newPriorityBlockingQueue : com.google.common.collect.Queues.newPriorityBlockingQueue
	java.lang.Iterable [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newPriorityBlockingQueue($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newPriorityBlockingQueue()

.newPriorityQueue : com.google.common.collect.Queues.newPriorityQueue
	java.lang.Iterable [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newPriorityQueue($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newPriorityQueue()

.newLinkedBlockingDeque : com.google.common.collect.Queues.newLinkedBlockingDeque
	java.lang.Iterable [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newLinkedBlockingDeque($expr$)
	INT [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newLinkedBlockingDeque($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newLinkedBlockingDeque()

.newLinkedBlockingQueue : com.google.common.collect.Queues.newLinkedBlockingQueue
	java.lang.Iterable [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newLinkedBlockingQueue($expr$)
	INT [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newLinkedBlockingQueue($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newLinkedBlockingQueue()

.synchronizedDeque : com.google.common.collect.Queues.synchronizedDeque
	java.util.Deque [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.synchronizedDeque($expr$)

.newArrayDeque : com.google.common.collect.Queues.newArrayDeque
	java.lang.Iterable [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newArrayDeque($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newArrayDeque()

.synchronizedQueue : com.google.common.collect.Queues.synchronizedQueue
	java.util.Queue [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.synchronizedQueue($expr$)

.newConcurrentLinkedQueue : com.google.common.collect.Queues.newConcurrentLinkedQueue
	java.lang.Iterable [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newConcurrentLinkedQueue($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newConcurrentLinkedQueue()

.newSynchronousQueue : com.google.common.collect.Queues.newSynchronousQueue
	java.lang.Object [com.google.common.collect.Queues]  →  com.google.common.collect.Queues.newSynchronousQueue()


## Range

.atLeast : com.google.common.collect.Range.atLeast
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.atLeast($expr$)

.closed : com.google.common.collect.Range.closed
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.closed($expr$, $arg$)

.lessThan : com.google.common.collect.Range.lessThan
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.lessThan($expr$)

.all : com.google.common.collect.Range.all
	java.lang.Object [com.google.common.collect.Range]  →  com.google.common.collect.Range.all()

.greaterThan : com.google.common.collect.Range.greaterThan
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.greaterThan($expr$)

.open : com.google.common.collect.Range.open
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.open($expr$, $arg$)

.atMost : com.google.common.collect.Range.atMost
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.atMost($expr$)

.upTo : com.google.common.collect.Range.upTo
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.upTo($expr$, $arg$)

.closedOpen : com.google.common.collect.Range.closedOpen
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.closedOpen($expr$, $arg$)

.range : com.google.common.collect.Range.range
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.range($expr$, $arg$)

.encloseAll : com.google.common.collect.Range.encloseAll
	java.lang.Iterable [com.google.common.collect.Range]  →  com.google.common.collect.Range.encloseAll($expr$)

.singleton : com.google.common.collect.Range.singleton
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.singleton($expr$)

.downTo : com.google.common.collect.Range.downTo
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.downTo($expr$, $arg$)

.openClosed : com.google.common.collect.Range.openClosed
	java.lang.Comparable [com.google.common.collect.Range]  →  com.google.common.collect.Range.openClosed($expr$, $arg$)


## Sets

.subSet : com.google.common.collect.Sets.subSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.subSet($expr$, $arg$)

.unmodifiableNavigableSet : com.google.common.collect.Sets.unmodifiableNavigableSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.unmodifiableNavigableSet($expr$)

.symmetricDifference : com.google.common.collect.Sets.symmetricDifference
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.symmetricDifference($expr$, $arg$)

.newConcurrentHashSet : com.google.common.collect.Sets.newConcurrentHashSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newConcurrentHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newConcurrentHashSet()

.union : com.google.common.collect.Sets.union
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.union($expr$, $arg$)

.intersection : com.google.common.collect.Sets.intersection
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.intersection($expr$, $arg$)

.synchronizedNavigableSet : com.google.common.collect.Sets.synchronizedNavigableSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.synchronizedNavigableSet($expr$)

.newLinkedHashSet : com.google.common.collect.Sets.newLinkedHashSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newLinkedHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newLinkedHashSet()

.cartesianProduct : com.google.common.collect.Sets.cartesianProduct
	ARRAY [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.cartesianProduct($expr$)
	java.util.List [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.cartesianProduct($expr$)

.newCopyOnWriteArraySet : com.google.common.collect.Sets.newCopyOnWriteArraySet
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newCopyOnWriteArraySet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newCopyOnWriteArraySet()

.filter : com.google.common.collect.Sets.filter
	java.util.SortedSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.filter($expr$, $arg$)
	java.util.NavigableSet [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.filter($expr$, $arg$)
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.filter($expr$, $arg$)

.newHashSetWithExpectedSize : com.google.common.collect.Sets.newHashSetWithExpectedSize
	INT [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSetWithExpectedSize($expr$)

.newEnumSet : com.google.common.collect.Sets.newEnumSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newEnumSet($expr$, $arg$)

.combinations : com.google.common.collect.Sets.combinations
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.combinations($expr$, $arg$)

.newHashSet : com.google.common.collect.Sets.newHashSet
	ARRAY [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSet($expr$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSet($expr$)
	java.util.Iterator [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newHashSet()

.newTreeSet : com.google.common.collect.Sets.newTreeSet
	java.util.Comparator [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newTreeSet($expr$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newTreeSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newTreeSet()

.complementOf : com.google.common.collect.Sets.complementOf
	java.util.Collection [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.complementOf($expr$, $arg$)

.newLinkedHashSetWithExpectedSize : com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize
	INT [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize($expr$)

.toImmutableEnumSet : com.google.common.collect.Sets.toImmutableEnumSet
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.toImmutableEnumSet()

.immutableEnumSet : com.google.common.collect.Sets.immutableEnumSet
	java.lang.Enum [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.immutableEnumSet($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.immutableEnumSet($expr$)

.newIdentityHashSet : com.google.common.collect.Sets.newIdentityHashSet
	java.lang.Object [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.newIdentityHashSet()

.powerSet : com.google.common.collect.Sets.powerSet
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.powerSet($expr$)

.difference : com.google.common.collect.Sets.difference
	java.util.Set [com.google.common.collect.Sets]  →  com.google.common.collect.Sets.difference($expr$, $arg$)


## Streams

.mapWithIndex : com.google.common.collect.Streams.mapWithIndex
	java.util.stream.DoubleStream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.mapWithIndex($expr$, $arg$)
	java.util.stream.IntStream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.mapWithIndex($expr$, $arg$)
	java.util.stream.LongStream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.mapWithIndex($expr$, $arg$)
	java.util.stream.Stream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.mapWithIndex($expr$, $arg$)

.zip : com.google.common.collect.Streams.zip
	java.util.stream.Stream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.zip($expr$, $arg$)

.concat : com.google.common.collect.Streams.concat
	ARRAY [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.concat($expr$)

.forEachPair : com.google.common.collect.Streams.forEachPair
	java.util.stream.Stream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.forEachPair($expr$, $arg$)

.findLast : com.google.common.collect.Streams.findLast
	java.util.stream.DoubleStream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.findLast($expr$)
	java.util.stream.IntStream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.findLast($expr$)
	java.util.stream.LongStream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.findLast($expr$)
	java.util.stream.Stream [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.findLast($expr$)

.stream : com.google.common.collect.Streams.stream
	java.util.Optional [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.stream($expr$)
	java.util.Iterator [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.stream($expr$)
	com.google.common.base.Optional [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.stream($expr$)
	java.lang.Iterable [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.stream($expr$)
	java.util.OptionalInt [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.stream($expr$)
	java.util.OptionalLong [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.stream($expr$)
	java.util.OptionalDouble [com.google.common.collect.Streams]  →  com.google.common.collect.Streams.stream($expr$)


## Tables

.unmodifiableRowSortedTable : com.google.common.collect.Tables.unmodifiableRowSortedTable
	com.google.common.collect.RowSortedTable [com.google.common.collect.Tables]  →  com.google.common.collect.Tables.unmodifiableRowSortedTable($expr$)

.newCustomTable : com.google.common.collect.Tables.newCustomTable
	java.util.Map [com.google.common.collect.Tables]  →  com.google.common.collect.Tables.newCustomTable($expr$, $arg$)

.immutableCell : com.google.common.collect.Tables.immutableCell
	java.lang.Object [com.google.common.collect.Tables]  →  com.google.common.collect.Tables.immutableCell($expr$, $arg$)

.toTable : com.google.common.collect.Tables.toTable
	java.util.function.Function [com.google.common.collect.Tables]  →  com.google.common.collect.Tables.toTable($expr$, $arg$)

.transformValues : com.google.common.collect.Tables.transformValues
	com.google.common.collect.Table [com.google.common.collect.Tables]  →  com.google.common.collect.Tables.transformValues($expr$, $arg$)

.unmodifiableTable : com.google.common.collect.Tables.unmodifiableTable
	com.google.common.collect.Table [com.google.common.collect.Tables]  →  com.google.common.collect.Tables.unmodifiableTable($expr$)

.transpose : com.google.common.collect.Tables.transpose
	com.google.common.collect.Table [com.google.common.collect.Tables]  →  com.google.common.collect.Tables.transpose($expr$)

.synchronizedTable : com.google.common.collect.Tables.synchronizedTable
	com.google.common.collect.Table [com.google.common.collect.Tables]  →  com.google.common.collect.Tables.synchronizedTable($expr$)


## TreeBasedTable

.create : com.google.common.collect.TreeBasedTable.create
	com.google.common.collect.TreeBasedTable [com.google.common.collect.TreeBasedTable]  →  com.google.common.collect.TreeBasedTable.create($expr$)
	java.util.Comparator [com.google.common.collect.TreeBasedTable]  →  com.google.common.collect.TreeBasedTable.create($expr$, $arg$)
	java.lang.Object [com.google.common.collect.TreeBasedTable]  →  com.google.common.collect.TreeBasedTable.create()


## TreeMultimap

.create : com.google.common.collect.TreeMultimap.create
	java.util.Comparator [com.google.common.collect.TreeMultimap]  →  com.google.common.collect.TreeMultimap.create($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.TreeMultimap]  →  com.google.common.collect.TreeMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.TreeMultimap]  →  com.google.common.collect.TreeMultimap.create()


## TreeMultiset

.create : com.google.common.collect.TreeMultiset.create
	java.util.Comparator [com.google.common.collect.TreeMultiset]  →  com.google.common.collect.TreeMultiset.create($expr$)
	java.lang.Iterable [com.google.common.collect.TreeMultiset]  →  com.google.common.collect.TreeMultiset.create($expr$)
	java.lang.Object [com.google.common.collect.TreeMultiset]  →  com.google.common.collect.TreeMultiset.create()


## TreeRangeMap

.create : com.google.common.collect.TreeRangeMap.create
	java.lang.Object [com.google.common.collect.TreeRangeMap]  →  com.google.common.collect.TreeRangeMap.create()


## TreeRangeSet

.create : com.google.common.collect.TreeRangeSet.create
	com.google.common.collect.RangeSet [com.google.common.collect.TreeRangeSet]  →  com.google.common.collect.TreeRangeSet.create($expr$)
	java.lang.Iterable [com.google.common.collect.TreeRangeSet]  →  com.google.common.collect.TreeRangeSet.create($expr$)
	java.lang.Object [com.google.common.collect.TreeRangeSet]  →  com.google.common.collect.TreeRangeSet.create()


## ArrayBasedEscaperMap

.create : com.google.common.escape.ArrayBasedEscaperMap.create
	java.util.Map [com.google.common.escape.ArrayBasedEscaperMap]  →  com.google.common.escape.ArrayBasedEscaperMap.create($expr$)


## Escapers

.builder : com.google.common.escape.Escapers.builder
	java.lang.Object [com.google.common.escape.Escapers]  →  com.google.common.escape.Escapers.builder()

.nullEscaper : com.google.common.escape.Escapers.nullEscaper
	java.lang.Object [com.google.common.escape.Escapers]  →  com.google.common.escape.Escapers.nullEscaper()

.computeReplacement : com.google.common.escape.Escapers.computeReplacement
	com.google.common.escape.CharEscaper [com.google.common.escape.Escapers]  →  com.google.common.escape.Escapers.computeReplacement($expr$, $arg$)
	com.google.common.escape.UnicodeEscaper [com.google.common.escape.Escapers]  →  com.google.common.escape.Escapers.computeReplacement($expr$, $arg$)


## ElementOrder

.sorted : com.google.common.graph.ElementOrder.sorted
	java.util.Comparator [com.google.common.graph.ElementOrder]  →  com.google.common.graph.ElementOrder.sorted($expr$)

.unordered : com.google.common.graph.ElementOrder.unordered
	java.lang.Object [com.google.common.graph.ElementOrder]  →  com.google.common.graph.ElementOrder.unordered()

.natural : com.google.common.graph.ElementOrder.natural
	java.lang.Object [com.google.common.graph.ElementOrder]  →  com.google.common.graph.ElementOrder.natural()

.stable : com.google.common.graph.ElementOrder.stable
	java.lang.Object [com.google.common.graph.ElementOrder]  →  com.google.common.graph.ElementOrder.stable()

.insertion : com.google.common.graph.ElementOrder.insertion
	java.lang.Object [com.google.common.graph.ElementOrder]  →  com.google.common.graph.ElementOrder.insertion()


## EndpointPair

.unordered : com.google.common.graph.EndpointPair.unordered
	java.lang.Object [com.google.common.graph.EndpointPair]  →  com.google.common.graph.EndpointPair.unordered($expr$, $arg$)

.ordered : com.google.common.graph.EndpointPair.ordered
	java.lang.Object [com.google.common.graph.EndpointPair]  →  com.google.common.graph.EndpointPair.ordered($expr$, $arg$)


## GraphBuilder

.from : com.google.common.graph.GraphBuilder.from
	com.google.common.graph.Graph [com.google.common.graph.GraphBuilder]  →  com.google.common.graph.GraphBuilder.from($expr$)

.directed : com.google.common.graph.GraphBuilder.directed
	java.lang.Object [com.google.common.graph.GraphBuilder]  →  com.google.common.graph.GraphBuilder.directed()

.undirected : com.google.common.graph.GraphBuilder.undirected
	java.lang.Object [com.google.common.graph.GraphBuilder]  →  com.google.common.graph.GraphBuilder.undirected()


## Graphs

.inducedSubgraph : com.google.common.graph.Graphs.inducedSubgraph
	com.google.common.graph.ValueGraph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.inducedSubgraph($expr$, $arg$)
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.inducedSubgraph($expr$, $arg$)
	com.google.common.graph.Network [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.inducedSubgraph($expr$, $arg$)

.hasCycle : com.google.common.graph.Graphs.hasCycle
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.hasCycle($expr$)
	com.google.common.graph.Network [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.hasCycle($expr$)

.copyOf : com.google.common.graph.Graphs.copyOf
	com.google.common.graph.ValueGraph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.copyOf($expr$)
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.copyOf($expr$)
	com.google.common.graph.Network [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.copyOf($expr$)

.transitiveClosure : com.google.common.graph.Graphs.transitiveClosure
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.transitiveClosure($expr$)

.transpose : com.google.common.graph.Graphs.transpose
	com.google.common.graph.ValueGraph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.transpose($expr$)
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.transpose($expr$)
	com.google.common.graph.Network [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.transpose($expr$)

.reachableNodes : com.google.common.graph.Graphs.reachableNodes
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  com.google.common.graph.Graphs.reachableNodes($expr$, $arg$)


## ImmutableGraph

.copyOf : com.google.common.graph.ImmutableGraph.copyOf
	com.google.common.graph.Graph [com.google.common.graph.ImmutableGraph]  →  com.google.common.graph.ImmutableGraph.copyOf($expr$)


## ImmutableNetwork

.copyOf : com.google.common.graph.ImmutableNetwork.copyOf
	com.google.common.graph.Network [com.google.common.graph.ImmutableNetwork]  →  com.google.common.graph.ImmutableNetwork.copyOf($expr$)


## ImmutableValueGraph

.copyOf : com.google.common.graph.ImmutableValueGraph.copyOf
	com.google.common.graph.ValueGraph [com.google.common.graph.ImmutableValueGraph]  →  com.google.common.graph.ImmutableValueGraph.copyOf($expr$)


## NetworkBuilder

.from : com.google.common.graph.NetworkBuilder.from
	com.google.common.graph.Network [com.google.common.graph.NetworkBuilder]  →  com.google.common.graph.NetworkBuilder.from($expr$)

.directed : com.google.common.graph.NetworkBuilder.directed
	java.lang.Object [com.google.common.graph.NetworkBuilder]  →  com.google.common.graph.NetworkBuilder.directed()

.undirected : com.google.common.graph.NetworkBuilder.undirected
	java.lang.Object [com.google.common.graph.NetworkBuilder]  →  com.google.common.graph.NetworkBuilder.undirected()


## Traverser

.forGraph : com.google.common.graph.Traverser.forGraph
	com.google.common.graph.SuccessorsFunction [com.google.common.graph.Traverser]  →  com.google.common.graph.Traverser.forGraph($expr$)

.forTree : com.google.common.graph.Traverser.forTree
	com.google.common.graph.SuccessorsFunction [com.google.common.graph.Traverser]  →  com.google.common.graph.Traverser.forTree($expr$)


## ValueGraphBuilder

.from : com.google.common.graph.ValueGraphBuilder.from
	com.google.common.graph.ValueGraph [com.google.common.graph.ValueGraphBuilder]  →  com.google.common.graph.ValueGraphBuilder.from($expr$)

.directed : com.google.common.graph.ValueGraphBuilder.directed
	java.lang.Object [com.google.common.graph.ValueGraphBuilder]  →  com.google.common.graph.ValueGraphBuilder.directed()

.undirected : com.google.common.graph.ValueGraphBuilder.undirected
	java.lang.Object [com.google.common.graph.ValueGraphBuilder]  →  com.google.common.graph.ValueGraphBuilder.undirected()


## BloomFilter

.toBloomFilter : com.google.common.hash.BloomFilter.toBloomFilter
	com.google.common.hash.Funnel [com.google.common.hash.BloomFilter]  →  com.google.common.hash.BloomFilter.toBloomFilter($expr$, $arg$)

.readFrom : com.google.common.hash.BloomFilter.readFrom
	java.io.InputStream [com.google.common.hash.BloomFilter]  →  com.google.common.hash.BloomFilter.readFrom($expr$, $arg$)

.create : com.google.common.hash.BloomFilter.create
	com.google.common.hash.Funnel [com.google.common.hash.BloomFilter]  →  com.google.common.hash.BloomFilter.create($expr$, $arg$)


## Funnels

.longFunnel : com.google.common.hash.Funnels.longFunnel
	java.lang.Object [com.google.common.hash.Funnels]  →  com.google.common.hash.Funnels.longFunnel()

.unencodedCharsFunnel : com.google.common.hash.Funnels.unencodedCharsFunnel
	java.lang.Object [com.google.common.hash.Funnels]  →  com.google.common.hash.Funnels.unencodedCharsFunnel()

.asOutputStream : com.google.common.hash.Funnels.asOutputStream
	com.google.common.hash.PrimitiveSink [com.google.common.hash.Funnels]  →  com.google.common.hash.Funnels.asOutputStream($expr$)

.integerFunnel : com.google.common.hash.Funnels.integerFunnel
	java.lang.Object [com.google.common.hash.Funnels]  →  com.google.common.hash.Funnels.integerFunnel()

.stringFunnel : com.google.common.hash.Funnels.stringFunnel
	java.nio.charset.Charset [com.google.common.hash.Funnels]  →  com.google.common.hash.Funnels.stringFunnel($expr$)

.sequentialFunnel : com.google.common.hash.Funnels.sequentialFunnel
	com.google.common.hash.Funnel [com.google.common.hash.Funnels]  →  com.google.common.hash.Funnels.sequentialFunnel($expr$)

.byteArrayFunnel : com.google.common.hash.Funnels.byteArrayFunnel
	java.lang.Object [com.google.common.hash.Funnels]  →  com.google.common.hash.Funnels.byteArrayFunnel()


## HashCode

.fromBytes : com.google.common.hash.HashCode.fromBytes
	ARRAY [com.google.common.hash.HashCode]  →  com.google.common.hash.HashCode.fromBytes($expr$)

.fromInt : com.google.common.hash.HashCode.fromInt
	INT [com.google.common.hash.HashCode]  →  com.google.common.hash.HashCode.fromInt($expr$)

.fromString : com.google.common.hash.HashCode.fromString
	java.lang.String [com.google.common.hash.HashCode]  →  com.google.common.hash.HashCode.fromString($expr$)

.fromLong : com.google.common.hash.HashCode.fromLong
	LONG [com.google.common.hash.HashCode]  →  com.google.common.hash.HashCode.fromLong($expr$)


## Hashing

.consistentHash : com.google.common.hash.Hashing.consistentHash
	LONG [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.consistentHash($expr$, $arg$)
	com.google.common.hash.HashCode [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.consistentHash($expr$, $arg$)

.crc32 : com.google.common.hash.Hashing.crc32
	java.lang.Object [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.crc32()

.adler32 : com.google.common.hash.Hashing.adler32
	java.lang.Object [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.adler32()

.goodFastHash : com.google.common.hash.Hashing.goodFastHash
	INT [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.goodFastHash($expr$)

.crc32c : com.google.common.hash.Hashing.crc32c
	java.lang.Object [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.crc32c()

.hmacMd5 : com.google.common.hash.Hashing.hmacMd5
	ARRAY [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.hmacMd5($expr$)
	java.security.Key [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.hmacMd5($expr$)

.combineOrdered : com.google.common.hash.Hashing.combineOrdered
	java.lang.Iterable [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.combineOrdered($expr$)

.sha256 : com.google.common.hash.Hashing.sha256
	java.lang.Object [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.sha256()

.combineUnordered : com.google.common.hash.Hashing.combineUnordered
	java.lang.Iterable [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.combineUnordered($expr$)

.hmacSha256 : com.google.common.hash.Hashing.hmacSha256
	ARRAY [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.hmacSha256($expr$)
	java.security.Key [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.hmacSha256($expr$)

.hmacSha512 : com.google.common.hash.Hashing.hmacSha512
	ARRAY [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.hmacSha512($expr$)
	java.security.Key [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.hmacSha512($expr$)

.sha384 : com.google.common.hash.Hashing.sha384
	java.lang.Object [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.sha384()

.farmHashFingerprint64 : com.google.common.hash.Hashing.farmHashFingerprint64
	java.lang.Object [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.farmHashFingerprint64()

.sha512 : com.google.common.hash.Hashing.sha512
	java.lang.Object [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.sha512()

.sipHash24 : com.google.common.hash.Hashing.sipHash24
	LONG [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.sipHash24($expr$, $arg$)
	java.lang.Object [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.sipHash24()

.concatenating : com.google.common.hash.Hashing.concatenating
	java.lang.Iterable [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.concatenating($expr$)
	com.google.common.hash.HashFunction [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.concatenating($expr$, $arg$)

.hmacSha1 : com.google.common.hash.Hashing.hmacSha1
	ARRAY [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.hmacSha1($expr$)
	java.security.Key [com.google.common.hash.Hashing]  →  com.google.common.hash.Hashing.hmacSha1($expr$)


## HashingInputStream

.nullInputStream : com.google.common.hash.HashingInputStream.nullInputStream
	java.lang.Object [com.google.common.hash.HashingInputStream]  →  com.google.common.hash.HashingInputStream.nullInputStream()


## HashingOutputStream

.nullOutputStream : com.google.common.hash.HashingOutputStream.nullOutputStream
	java.lang.Object [com.google.common.hash.HashingOutputStream]  →  com.google.common.hash.HashingOutputStream.nullOutputStream()


## HtmlEscapers

.htmlEscaper : com.google.common.html.HtmlEscapers.htmlEscaper
	java.lang.Object [com.google.common.html.HtmlEscapers]  →  com.google.common.html.HtmlEscapers.htmlEscaper()


## BaseEncoding

.base64 : com.google.common.io.BaseEncoding.base64
	java.lang.Object [com.google.common.io.BaseEncoding]  →  com.google.common.io.BaseEncoding.base64()

.base32Hex : com.google.common.io.BaseEncoding.base32Hex
	java.lang.Object [com.google.common.io.BaseEncoding]  →  com.google.common.io.BaseEncoding.base32Hex()

.base16 : com.google.common.io.BaseEncoding.base16
	java.lang.Object [com.google.common.io.BaseEncoding]  →  com.google.common.io.BaseEncoding.base16()

.base32 : com.google.common.io.BaseEncoding.base32
	java.lang.Object [com.google.common.io.BaseEncoding]  →  com.google.common.io.BaseEncoding.base32()

.base64Url : com.google.common.io.BaseEncoding.base64Url
	java.lang.Object [com.google.common.io.BaseEncoding]  →  com.google.common.io.BaseEncoding.base64Url()


## ByteSource

.empty : com.google.common.io.ByteSource.empty
	java.lang.Object [com.google.common.io.ByteSource]  →  com.google.common.io.ByteSource.empty()

.concat : com.google.common.io.ByteSource.concat
	ARRAY [com.google.common.io.ByteSource]  →  com.google.common.io.ByteSource.concat($expr$)
	java.lang.Iterable [com.google.common.io.ByteSource]  →  com.google.common.io.ByteSource.concat($expr$)
	java.util.Iterator [com.google.common.io.ByteSource]  →  com.google.common.io.ByteSource.concat($expr$)

.wrap : com.google.common.io.ByteSource.wrap
	ARRAY [com.google.common.io.ByteSource]  →  com.google.common.io.ByteSource.wrap($expr$)


## ByteStreams

.read : com.google.common.io.ByteStreams.read
	java.io.InputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.read($expr$, $arg$)

.newDataInput : com.google.common.io.ByteStreams.newDataInput
	ARRAY [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.newDataInput($expr$, $arg$)
	java.io.ByteArrayInputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.newDataInput($expr$)

.newDataOutput : com.google.common.io.ByteStreams.newDataOutput
	java.io.ByteArrayOutputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.newDataOutput($expr$)
	INT [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.newDataOutput($expr$)
	java.lang.Object [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.newDataOutput()

.skipFully : com.google.common.io.ByteStreams.skipFully
	java.io.InputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.skipFully($expr$, $arg$)

.exhaust : com.google.common.io.ByteStreams.exhaust
	java.io.InputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.exhaust($expr$)

.readBytes : com.google.common.io.ByteStreams.readBytes
	java.io.InputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.readBytes($expr$, $arg$)

.nullOutputStream : com.google.common.io.ByteStreams.nullOutputStream
	java.lang.Object [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.nullOutputStream()

.copy : com.google.common.io.ByteStreams.copy
	java.nio.channels.ReadableByteChannel [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.copy($expr$, $arg$)
	java.io.InputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.copy($expr$, $arg$)

.readFully : com.google.common.io.ByteStreams.readFully
	java.io.InputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.readFully($expr$, $arg$)

.toByteArray : com.google.common.io.ByteStreams.toByteArray
	java.io.InputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.toByteArray($expr$)

.limit : com.google.common.io.ByteStreams.limit
	java.io.InputStream [com.google.common.io.ByteStreams]  →  com.google.common.io.ByteStreams.limit($expr$, $arg$)


## CharSource

.empty : com.google.common.io.CharSource.empty
	java.lang.Object [com.google.common.io.CharSource]  →  com.google.common.io.CharSource.empty()

.concat : com.google.common.io.CharSource.concat
	ARRAY [com.google.common.io.CharSource]  →  com.google.common.io.CharSource.concat($expr$)
	java.lang.Iterable [com.google.common.io.CharSource]  →  com.google.common.io.CharSource.concat($expr$)
	java.util.Iterator [com.google.common.io.CharSource]  →  com.google.common.io.CharSource.concat($expr$)

.wrap : com.google.common.io.CharSource.wrap
	java.lang.CharSequence [com.google.common.io.CharSource]  →  com.google.common.io.CharSource.wrap($expr$)


## CharStreams

.skipFully : com.google.common.io.CharStreams.skipFully
	java.io.Reader [com.google.common.io.CharStreams]  →  com.google.common.io.CharStreams.skipFully($expr$, $arg$)

.exhaust : com.google.common.io.CharStreams.exhaust
	java.lang.Readable [com.google.common.io.CharStreams]  →  com.google.common.io.CharStreams.exhaust($expr$)

.readLines : com.google.common.io.CharStreams.readLines
	java.lang.Readable [com.google.common.io.CharStreams]  →  com.google.common.io.CharStreams.readLines($expr$, $arg$)

.asWriter : com.google.common.io.CharStreams.asWriter
	java.lang.Appendable [com.google.common.io.CharStreams]  →  com.google.common.io.CharStreams.asWriter($expr$)

.nullWriter : com.google.common.io.CharStreams.nullWriter
	java.lang.Object [com.google.common.io.CharStreams]  →  com.google.common.io.CharStreams.nullWriter()

.copy : com.google.common.io.CharStreams.copy
	java.lang.Readable [com.google.common.io.CharStreams]  →  com.google.common.io.CharStreams.copy($expr$, $arg$)

.toString : com.google.common.io.CharStreams.toString
	java.lang.Readable [com.google.common.io.CharStreams]  →  com.google.common.io.CharStreams.toString($expr$)


## Closeables

.closeQuietly : com.google.common.io.Closeables.closeQuietly
	java.io.Reader [com.google.common.io.Closeables]  →  com.google.common.io.Closeables.closeQuietly($expr$)
	java.io.InputStream [com.google.common.io.Closeables]  →  com.google.common.io.Closeables.closeQuietly($expr$)

.close : com.google.common.io.Closeables.close
	java.io.Closeable [com.google.common.io.Closeables]  →  com.google.common.io.Closeables.close($expr$, $arg$)


## Closer

.create : com.google.common.io.Closer.create
	java.lang.Object [com.google.common.io.Closer]  →  com.google.common.io.Closer.create()


## CountingInputStream

.nullInputStream : com.google.common.io.CountingInputStream.nullInputStream
	java.lang.Object [com.google.common.io.CountingInputStream]  →  com.google.common.io.CountingInputStream.nullInputStream()


## CountingOutputStream

.nullOutputStream : com.google.common.io.CountingOutputStream.nullOutputStream
	java.lang.Object [com.google.common.io.CountingOutputStream]  →  com.google.common.io.CountingOutputStream.nullOutputStream()


## FileBackedOutputStream

.nullOutputStream : com.google.common.io.FileBackedOutputStream.nullOutputStream
	java.lang.Object [com.google.common.io.FileBackedOutputStream]  →  com.google.common.io.FileBackedOutputStream.nullOutputStream()


## Files

.move : com.google.common.io.Files.move
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.move($expr$, $arg$)

.asByteSource : com.google.common.io.Files.asByteSource
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.asByteSource($expr$)

.map : com.google.common.io.Files.map
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.map($expr$, $arg$)

.touch : com.google.common.io.Files.touch
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.touch($expr$)

.getFileExtension : com.google.common.io.Files.getFileExtension
	java.lang.String [com.google.common.io.Files]  →  com.google.common.io.Files.getFileExtension($expr$)

.isDirectory : com.google.common.io.Files.isDirectory
	java.lang.Object [com.google.common.io.Files]  →  com.google.common.io.Files.isDirectory()

.readLines : com.google.common.io.Files.readLines
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.readLines($expr$, $arg$)

.newReader : com.google.common.io.Files.newReader
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.newReader($expr$, $arg$)

.createParentDirs : com.google.common.io.Files.createParentDirs
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.createParentDirs($expr$)

.getNameWithoutExtension : com.google.common.io.Files.getNameWithoutExtension
	java.lang.String [com.google.common.io.Files]  →  com.google.common.io.Files.getNameWithoutExtension($expr$)

.equal : com.google.common.io.Files.equal
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.equal($expr$, $arg$)

.isFile : com.google.common.io.Files.isFile
	java.lang.Object [com.google.common.io.Files]  →  com.google.common.io.Files.isFile()

.fileTraverser : com.google.common.io.Files.fileTraverser
	java.lang.Object [com.google.common.io.Files]  →  com.google.common.io.Files.fileTraverser()

.copy : com.google.common.io.Files.copy
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.copy($expr$, $arg$)

.toByteArray : com.google.common.io.Files.toByteArray
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.toByteArray($expr$)

.asCharSink : com.google.common.io.Files.asCharSink
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.asCharSink($expr$, $arg$)

.asByteSink : com.google.common.io.Files.asByteSink
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.asByteSink($expr$, $arg$)

.asCharSource : com.google.common.io.Files.asCharSource
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.asCharSource($expr$, $arg$)

.write : com.google.common.io.Files.write
	ARRAY [com.google.common.io.Files]  →  com.google.common.io.Files.write($expr$, $arg$)

.newWriter : com.google.common.io.Files.newWriter
	java.io.File [com.google.common.io.Files]  →  com.google.common.io.Files.newWriter($expr$, $arg$)

.simplifyPath : com.google.common.io.Files.simplifyPath
	java.lang.String [com.google.common.io.Files]  →  com.google.common.io.Files.simplifyPath($expr$)


## Flushables

.flush : com.google.common.io.Flushables.flush
	java.io.Flushable [com.google.common.io.Flushables]  →  com.google.common.io.Flushables.flush($expr$, $arg$)

.flushQuietly : com.google.common.io.Flushables.flushQuietly
	java.io.Flushable [com.google.common.io.Flushables]  →  com.google.common.io.Flushables.flushQuietly($expr$)


## LittleEndianDataInputStream

.nullInputStream : com.google.common.io.LittleEndianDataInputStream.nullInputStream
	java.lang.Object [com.google.common.io.LittleEndianDataInputStream]  →  com.google.common.io.LittleEndianDataInputStream.nullInputStream()


## LittleEndianDataOutputStream

.nullOutputStream : com.google.common.io.LittleEndianDataOutputStream.nullOutputStream
	java.lang.Object [com.google.common.io.LittleEndianDataOutputStream]  →  com.google.common.io.LittleEndianDataOutputStream.nullOutputStream()


## MoreFiles

.listFiles : com.google.common.io.MoreFiles.listFiles
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.listFiles($expr$)

.asByteSource : com.google.common.io.MoreFiles.asByteSource
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.asByteSource($expr$, $arg$)

.touch : com.google.common.io.MoreFiles.touch
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.touch($expr$)

.deleteDirectoryContents : com.google.common.io.MoreFiles.deleteDirectoryContents
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.deleteDirectoryContents($expr$, $arg$)

.isRegularFile : com.google.common.io.MoreFiles.isRegularFile
	ARRAY [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.isRegularFile($expr$)

.getFileExtension : com.google.common.io.MoreFiles.getFileExtension
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.getFileExtension($expr$)

.isDirectory : com.google.common.io.MoreFiles.isDirectory
	ARRAY [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.isDirectory($expr$)

.createParentDirectories : com.google.common.io.MoreFiles.createParentDirectories
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.createParentDirectories($expr$, $arg$)

.getNameWithoutExtension : com.google.common.io.MoreFiles.getNameWithoutExtension
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.getNameWithoutExtension($expr$)

.equal : com.google.common.io.MoreFiles.equal
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.equal($expr$, $arg$)

.fileTraverser : com.google.common.io.MoreFiles.fileTraverser
	java.lang.Object [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.fileTraverser()

.asCharSink : com.google.common.io.MoreFiles.asCharSink
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.asCharSink($expr$, $arg$)

.asByteSink : com.google.common.io.MoreFiles.asByteSink
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.asByteSink($expr$, $arg$)

.asCharSource : com.google.common.io.MoreFiles.asCharSource
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.asCharSource($expr$, $arg$)

.deleteRecursively : com.google.common.io.MoreFiles.deleteRecursively
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  com.google.common.io.MoreFiles.deleteRecursively($expr$, $arg$)


## Resources

.asByteSource : com.google.common.io.Resources.asByteSource
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.asByteSource($expr$)

.getResource : com.google.common.io.Resources.getResource
	java.lang.String [com.google.common.io.Resources]  →  com.google.common.io.Resources.getResource($expr$)
	java.lang.Class [com.google.common.io.Resources]  →  com.google.common.io.Resources.getResource($expr$, $arg$)

.readLines : com.google.common.io.Resources.readLines
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.readLines($expr$, $arg$)

.copy : com.google.common.io.Resources.copy
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.copy($expr$, $arg$)

.toString : com.google.common.io.Resources.toString
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.toString($expr$, $arg$)

.toByteArray : com.google.common.io.Resources.toByteArray
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.toByteArray($expr$)

.asCharSource : com.google.common.io.Resources.asCharSource
	java.net.URL [com.google.common.io.Resources]  →  com.google.common.io.Resources.asCharSource($expr$, $arg$)


## BigDecimalMath

.roundToDouble : com.google.common.math.BigDecimalMath.roundToDouble
	java.math.BigDecimal [com.google.common.math.BigDecimalMath]  →  com.google.common.math.BigDecimalMath.roundToDouble($expr$, $arg$)


## BigIntegerMath

.log2 : com.google.common.math.BigIntegerMath.log2
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.log2($expr$, $arg$)

.factorial : com.google.common.math.BigIntegerMath.factorial
	INT [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.factorial($expr$)

.roundToDouble : com.google.common.math.BigIntegerMath.roundToDouble
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.roundToDouble($expr$, $arg$)

.log10 : com.google.common.math.BigIntegerMath.log10
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.log10($expr$, $arg$)

.divide : com.google.common.math.BigIntegerMath.divide
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.divide($expr$, $arg$)

.sqrt : com.google.common.math.BigIntegerMath.sqrt
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.sqrt($expr$, $arg$)

.floorPowerOfTwo : com.google.common.math.BigIntegerMath.floorPowerOfTwo
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.floorPowerOfTwo($expr$)

.binomial : com.google.common.math.BigIntegerMath.binomial
	INT [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.binomial($expr$, $arg$)

.isPowerOfTwo : com.google.common.math.BigIntegerMath.isPowerOfTwo
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.isPowerOfTwo($expr$)

.ceilingPowerOfTwo : com.google.common.math.BigIntegerMath.ceilingPowerOfTwo
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  com.google.common.math.BigIntegerMath.ceilingPowerOfTwo($expr$)


## DoubleMath

.log2 : com.google.common.math.DoubleMath.log2
	DOUBLE [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.log2($expr$, $arg$)

.factorial : com.google.common.math.DoubleMath.factorial
	INT [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.factorial($expr$)

.fuzzyEquals : com.google.common.math.DoubleMath.fuzzyEquals
	DOUBLE [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.fuzzyEquals($expr$, $arg$)

.roundToInt : com.google.common.math.DoubleMath.roundToInt
	DOUBLE [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.roundToInt($expr$, $arg$)

.fuzzyCompare : com.google.common.math.DoubleMath.fuzzyCompare
	DOUBLE [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.fuzzyCompare($expr$, $arg$)

.isPowerOfTwo : com.google.common.math.DoubleMath.isPowerOfTwo
	DOUBLE [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.isPowerOfTwo($expr$)

.isMathematicalInteger : com.google.common.math.DoubleMath.isMathematicalInteger
	DOUBLE [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.isMathematicalInteger($expr$)

.roundToLong : com.google.common.math.DoubleMath.roundToLong
	DOUBLE [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.roundToLong($expr$, $arg$)

.roundToBigInteger : com.google.common.math.DoubleMath.roundToBigInteger
	DOUBLE [com.google.common.math.DoubleMath]  →  com.google.common.math.DoubleMath.roundToBigInteger($expr$, $arg$)


## IntMath

.log2 : com.google.common.math.IntMath.log2
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.log2($expr$, $arg$)

.factorial : com.google.common.math.IntMath.factorial
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.factorial($expr$)

.saturatedPow : com.google.common.math.IntMath.saturatedPow
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.saturatedPow($expr$, $arg$)

.saturatedMultiply : com.google.common.math.IntMath.saturatedMultiply
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.saturatedMultiply($expr$, $arg$)

.mod : com.google.common.math.IntMath.mod
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.mod($expr$, $arg$)

.log10 : com.google.common.math.IntMath.log10
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.log10($expr$, $arg$)

.mean : com.google.common.math.IntMath.mean
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.mean($expr$, $arg$)

.divide : com.google.common.math.IntMath.divide
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.divide($expr$, $arg$)

.saturatedSubtract : com.google.common.math.IntMath.saturatedSubtract
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.saturatedSubtract($expr$, $arg$)

.pow : com.google.common.math.IntMath.pow
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.pow($expr$, $arg$)

.sqrt : com.google.common.math.IntMath.sqrt
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.sqrt($expr$, $arg$)

.floorPowerOfTwo : com.google.common.math.IntMath.floorPowerOfTwo
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.floorPowerOfTwo($expr$)

.isPrime : com.google.common.math.IntMath.isPrime
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.isPrime($expr$)

.binomial : com.google.common.math.IntMath.binomial
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.binomial($expr$, $arg$)

.checkedPow : com.google.common.math.IntMath.checkedPow
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.checkedPow($expr$, $arg$)

.isPowerOfTwo : com.google.common.math.IntMath.isPowerOfTwo
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.isPowerOfTwo($expr$)

.checkedSubtract : com.google.common.math.IntMath.checkedSubtract
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.checkedSubtract($expr$, $arg$)

.checkedAdd : com.google.common.math.IntMath.checkedAdd
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.checkedAdd($expr$, $arg$)

.saturatedAdd : com.google.common.math.IntMath.saturatedAdd
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.saturatedAdd($expr$, $arg$)

.ceilingPowerOfTwo : com.google.common.math.IntMath.ceilingPowerOfTwo
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.ceilingPowerOfTwo($expr$)

.checkedMultiply : com.google.common.math.IntMath.checkedMultiply
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.checkedMultiply($expr$, $arg$)

.gcd : com.google.common.math.IntMath.gcd
	INT [com.google.common.math.IntMath]  →  com.google.common.math.IntMath.gcd($expr$, $arg$)


## LinearTransformation

.forNaN : com.google.common.math.LinearTransformation.forNaN
	java.lang.Object [com.google.common.math.LinearTransformation]  →  com.google.common.math.LinearTransformation.forNaN()

.horizontal : com.google.common.math.LinearTransformation.horizontal
	DOUBLE [com.google.common.math.LinearTransformation]  →  com.google.common.math.LinearTransformation.horizontal($expr$)

.mapping : com.google.common.math.LinearTransformation.mapping
	DOUBLE [com.google.common.math.LinearTransformation]  →  com.google.common.math.LinearTransformation.mapping($expr$, $arg$)

.vertical : com.google.common.math.LinearTransformation.vertical
	DOUBLE [com.google.common.math.LinearTransformation]  →  com.google.common.math.LinearTransformation.vertical($expr$)


## LongMath

.log2 : com.google.common.math.LongMath.log2
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.log2($expr$, $arg$)

.factorial : com.google.common.math.LongMath.factorial
	INT [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.factorial($expr$)

.saturatedPow : com.google.common.math.LongMath.saturatedPow
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.saturatedPow($expr$, $arg$)

.saturatedMultiply : com.google.common.math.LongMath.saturatedMultiply
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.saturatedMultiply($expr$, $arg$)

.mod : com.google.common.math.LongMath.mod
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.mod($expr$, $arg$)

.roundToDouble : com.google.common.math.LongMath.roundToDouble
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.roundToDouble($expr$, $arg$)

.log10 : com.google.common.math.LongMath.log10
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.log10($expr$, $arg$)

.mean : com.google.common.math.LongMath.mean
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.mean($expr$, $arg$)

.divide : com.google.common.math.LongMath.divide
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.divide($expr$, $arg$)

.saturatedSubtract : com.google.common.math.LongMath.saturatedSubtract
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.saturatedSubtract($expr$, $arg$)

.pow : com.google.common.math.LongMath.pow
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.pow($expr$, $arg$)

.sqrt : com.google.common.math.LongMath.sqrt
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.sqrt($expr$, $arg$)

.floorPowerOfTwo : com.google.common.math.LongMath.floorPowerOfTwo
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.floorPowerOfTwo($expr$)

.isPrime : com.google.common.math.LongMath.isPrime
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.isPrime($expr$)

.binomial : com.google.common.math.LongMath.binomial
	INT [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.binomial($expr$, $arg$)

.checkedPow : com.google.common.math.LongMath.checkedPow
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.checkedPow($expr$, $arg$)

.isPowerOfTwo : com.google.common.math.LongMath.isPowerOfTwo
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.isPowerOfTwo($expr$)

.checkedSubtract : com.google.common.math.LongMath.checkedSubtract
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.checkedSubtract($expr$, $arg$)

.checkedAdd : com.google.common.math.LongMath.checkedAdd
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.checkedAdd($expr$, $arg$)

.saturatedAdd : com.google.common.math.LongMath.saturatedAdd
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.saturatedAdd($expr$, $arg$)

.ceilingPowerOfTwo : com.google.common.math.LongMath.ceilingPowerOfTwo
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.ceilingPowerOfTwo($expr$)

.checkedMultiply : com.google.common.math.LongMath.checkedMultiply
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.checkedMultiply($expr$, $arg$)

.gcd : com.google.common.math.LongMath.gcd
	LONG [com.google.common.math.LongMath]  →  com.google.common.math.LongMath.gcd($expr$, $arg$)


## PairedStats

.fromByteArray : com.google.common.math.PairedStats.fromByteArray
	ARRAY [com.google.common.math.PairedStats]  →  com.google.common.math.PairedStats.fromByteArray($expr$)


## Quantiles

.median : com.google.common.math.Quantiles.median
	java.lang.Object [com.google.common.math.Quantiles]  →  com.google.common.math.Quantiles.median()

.percentiles : com.google.common.math.Quantiles.percentiles
	java.lang.Object [com.google.common.math.Quantiles]  →  com.google.common.math.Quantiles.percentiles()

.quartiles : com.google.common.math.Quantiles.quartiles
	java.lang.Object [com.google.common.math.Quantiles]  →  com.google.common.math.Quantiles.quartiles()

.scale : com.google.common.math.Quantiles.scale
	INT [com.google.common.math.Quantiles]  →  com.google.common.math.Quantiles.scale($expr$)


## Stats

.meanOf : com.google.common.math.Stats.meanOf
	ARRAY [com.google.common.math.Stats]  →  com.google.common.math.Stats.meanOf($expr$)
	java.lang.Iterable [com.google.common.math.Stats]  →  com.google.common.math.Stats.meanOf($expr$)
	java.util.Iterator [com.google.common.math.Stats]  →  com.google.common.math.Stats.meanOf($expr$)

.of : com.google.common.math.Stats.of
	java.util.Iterator [com.google.common.math.Stats]  →  com.google.common.math.Stats.of($expr$)
	java.util.stream.IntStream [com.google.common.math.Stats]  →  com.google.common.math.Stats.of($expr$)
	java.lang.Iterable [com.google.common.math.Stats]  →  com.google.common.math.Stats.of($expr$)
	ARRAY [com.google.common.math.Stats]  →  com.google.common.math.Stats.of($expr$)
	java.util.stream.LongStream [com.google.common.math.Stats]  →  com.google.common.math.Stats.of($expr$)
	java.util.stream.DoubleStream [com.google.common.math.Stats]  →  com.google.common.math.Stats.of($expr$)

.fromByteArray : com.google.common.math.Stats.fromByteArray
	ARRAY [com.google.common.math.Stats]  →  com.google.common.math.Stats.fromByteArray($expr$)

.toStats : com.google.common.math.Stats.toStats
	java.lang.Object [com.google.common.math.Stats]  →  com.google.common.math.Stats.toStats()


## HostAndPort

.fromParts : com.google.common.net.HostAndPort.fromParts
	java.lang.String [com.google.common.net.HostAndPort]  →  com.google.common.net.HostAndPort.fromParts($expr$, $arg$)

.fromString : com.google.common.net.HostAndPort.fromString
	java.lang.String [com.google.common.net.HostAndPort]  →  com.google.common.net.HostAndPort.fromString($expr$)

.fromHost : com.google.common.net.HostAndPort.fromHost
	java.lang.String [com.google.common.net.HostAndPort]  →  com.google.common.net.HostAndPort.fromHost($expr$)


## HostSpecifier

.fromValid : com.google.common.net.HostSpecifier.fromValid
	java.lang.String [com.google.common.net.HostSpecifier]  →  com.google.common.net.HostSpecifier.fromValid($expr$)

.from : com.google.common.net.HostSpecifier.from
	java.lang.String [com.google.common.net.HostSpecifier]  →  com.google.common.net.HostSpecifier.from($expr$)

.isValid : com.google.common.net.HostSpecifier.isValid
	java.lang.String [com.google.common.net.HostSpecifier]  →  com.google.common.net.HostSpecifier.isValid($expr$)


## InetAddresses

.toAddrString : com.google.common.net.InetAddresses.toAddrString
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.toAddrString($expr$)

.getEmbeddedIPv4ClientAddress : com.google.common.net.InetAddresses.getEmbeddedIPv4ClientAddress
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.getEmbeddedIPv4ClientAddress($expr$)

.getCoercedIPv4Address : com.google.common.net.InetAddresses.getCoercedIPv4Address
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.getCoercedIPv4Address($expr$)

.isMaximum : com.google.common.net.InetAddresses.isMaximum
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.isMaximum($expr$)

.fromLittleEndianByteArray : com.google.common.net.InetAddresses.fromLittleEndianByteArray
	ARRAY [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.fromLittleEndianByteArray($expr$)

.fromIPv4BigInteger : com.google.common.net.InetAddresses.fromIPv4BigInteger
	java.math.BigInteger [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.fromIPv4BigInteger($expr$)

.get6to4IPv4Address : com.google.common.net.InetAddresses.get6to4IPv4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.get6to4IPv4Address($expr$)

.toUriString : com.google.common.net.InetAddresses.toUriString
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.toUriString($expr$)

.fromIPv6BigInteger : com.google.common.net.InetAddresses.fromIPv6BigInteger
	java.math.BigInteger [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.fromIPv6BigInteger($expr$)

.isTeredoAddress : com.google.common.net.InetAddresses.isTeredoAddress
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.isTeredoAddress($expr$)

.coerceToInteger : com.google.common.net.InetAddresses.coerceToInteger
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.coerceToInteger($expr$)

.is6to4Address : com.google.common.net.InetAddresses.is6to4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.is6to4Address($expr$)

.isMappedIPv4Address : com.google.common.net.InetAddresses.isMappedIPv4Address
	java.lang.String [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.isMappedIPv4Address($expr$)

.isInetAddress : com.google.common.net.InetAddresses.isInetAddress
	java.lang.String [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.isInetAddress($expr$)

.getTeredoInfo : com.google.common.net.InetAddresses.getTeredoInfo
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.getTeredoInfo($expr$)

.getIsatapIPv4Address : com.google.common.net.InetAddresses.getIsatapIPv4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.getIsatapIPv4Address($expr$)

.decrement : com.google.common.net.InetAddresses.decrement
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.decrement($expr$)

.forString : com.google.common.net.InetAddresses.forString
	java.lang.String [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.forString($expr$)

.isCompatIPv4Address : com.google.common.net.InetAddresses.isCompatIPv4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.isCompatIPv4Address($expr$)

.fromInteger : com.google.common.net.InetAddresses.fromInteger
	INT [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.fromInteger($expr$)

.getCompatIPv4Address : com.google.common.net.InetAddresses.getCompatIPv4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.getCompatIPv4Address($expr$)

.increment : com.google.common.net.InetAddresses.increment
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.increment($expr$)

.hasEmbeddedIPv4ClientAddress : com.google.common.net.InetAddresses.hasEmbeddedIPv4ClientAddress
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.hasEmbeddedIPv4ClientAddress($expr$)

.isUriInetAddress : com.google.common.net.InetAddresses.isUriInetAddress
	java.lang.String [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.isUriInetAddress($expr$)

.forUriString : com.google.common.net.InetAddresses.forUriString
	java.lang.String [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.forUriString($expr$)

.toBigInteger : com.google.common.net.InetAddresses.toBigInteger
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.toBigInteger($expr$)

.isIsatapAddress : com.google.common.net.InetAddresses.isIsatapAddress
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  com.google.common.net.InetAddresses.isIsatapAddress($expr$)


## InternetDomainName

.from : com.google.common.net.InternetDomainName.from
	java.lang.String [com.google.common.net.InternetDomainName]  →  com.google.common.net.InternetDomainName.from($expr$)

.isValid : com.google.common.net.InternetDomainName.isValid
	java.lang.String [com.google.common.net.InternetDomainName]  →  com.google.common.net.InternetDomainName.isValid($expr$)


## MediaType

.parse : com.google.common.net.MediaType.parse
	java.lang.String [com.google.common.net.MediaType]  →  com.google.common.net.MediaType.parse($expr$)

.create : com.google.common.net.MediaType.create
	java.lang.String [com.google.common.net.MediaType]  →  com.google.common.net.MediaType.create($expr$, $arg$)


## UrlEscapers

.urlFragmentEscaper : com.google.common.net.UrlEscapers.urlFragmentEscaper
	java.lang.Object [com.google.common.net.UrlEscapers]  →  com.google.common.net.UrlEscapers.urlFragmentEscaper()

.urlPathSegmentEscaper : com.google.common.net.UrlEscapers.urlPathSegmentEscaper
	java.lang.Object [com.google.common.net.UrlEscapers]  →  com.google.common.net.UrlEscapers.urlPathSegmentEscaper()

.urlFormParameterEscaper : com.google.common.net.UrlEscapers.urlFormParameterEscaper
	java.lang.Object [com.google.common.net.UrlEscapers]  →  com.google.common.net.UrlEscapers.urlFormParameterEscaper()


## Booleans

.trueFirst : com.google.common.primitives.Booleans.trueFirst
	java.lang.Object [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.trueFirst()

.asList : com.google.common.primitives.Booleans.asList
	ARRAY [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.asList($expr$)

.join : com.google.common.primitives.Booleans.join
	java.lang.String [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Booleans.lastIndexOf
	ARRAY [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.lastIndexOf($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Booleans.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.lexicographicalComparator()

.concat : com.google.common.primitives.Booleans.concat
	ARRAY [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.concat($expr$)

.ensureCapacity : com.google.common.primitives.Booleans.ensureCapacity
	ARRAY [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Booleans.reverse
	ARRAY [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.reverse($expr$, $arg$)

.toArray : com.google.common.primitives.Booleans.toArray
	java.util.Collection [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.toArray($expr$)

.countTrue : com.google.common.primitives.Booleans.countTrue
	ARRAY [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.countTrue($expr$)

.falseFirst : com.google.common.primitives.Booleans.falseFirst
	java.lang.Object [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.falseFirst()

.contains : com.google.common.primitives.Booleans.contains
	ARRAY [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Booleans.indexOf
	ARRAY [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Booleans.compare
	BOOLEAN [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Booleans.hashCode
	BOOLEAN [com.google.common.primitives.Booleans]  →  com.google.common.primitives.Booleans.hashCode($expr$)


## Bytes

.asList : com.google.common.primitives.Bytes.asList
	ARRAY [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.asList($expr$)

.lastIndexOf : com.google.common.primitives.Bytes.lastIndexOf
	ARRAY [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.lastIndexOf($expr$, $arg$)

.concat : com.google.common.primitives.Bytes.concat
	ARRAY [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.concat($expr$)

.ensureCapacity : com.google.common.primitives.Bytes.ensureCapacity
	ARRAY [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Bytes.reverse
	ARRAY [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.reverse($expr$, $arg$)

.toArray : com.google.common.primitives.Bytes.toArray
	java.util.Collection [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.toArray($expr$)

.contains : com.google.common.primitives.Bytes.contains
	ARRAY [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Bytes.indexOf
	ARRAY [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.indexOf($expr$, $arg$)

.hashCode : com.google.common.primitives.Bytes.hashCode
	BYTE [com.google.common.primitives.Bytes]  →  com.google.common.primitives.Bytes.hashCode($expr$)


## Chars

.asList : com.google.common.primitives.Chars.asList
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.asList($expr$)

.join : com.google.common.primitives.Chars.join
	java.lang.String [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Chars.lastIndexOf
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Chars.constrainToRange
	CHAR [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Chars.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.lexicographicalComparator()

.concat : com.google.common.primitives.Chars.concat
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.concat($expr$)

.min : com.google.common.primitives.Chars.min
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.min($expr$)

.fromByteArray : com.google.common.primitives.Chars.fromByteArray
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.fromByteArray($expr$)

.ensureCapacity : com.google.common.primitives.Chars.ensureCapacity
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Chars.reverse
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.reverse($expr$, $arg$)

.max : com.google.common.primitives.Chars.max
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.max($expr$)

.saturatedCast : com.google.common.primitives.Chars.saturatedCast
	LONG [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.saturatedCast($expr$)

.toArray : com.google.common.primitives.Chars.toArray
	java.util.Collection [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.toArray($expr$)

.checkedCast : com.google.common.primitives.Chars.checkedCast
	LONG [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.checkedCast($expr$)

.fromBytes : com.google.common.primitives.Chars.fromBytes
	BYTE [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.fromBytes($expr$, $arg$)

.toByteArray : com.google.common.primitives.Chars.toByteArray
	CHAR [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.toByteArray($expr$)

.sortDescending : com.google.common.primitives.Chars.sortDescending
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Chars.contains
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Chars.indexOf
	ARRAY [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Chars.compare
	CHAR [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Chars.hashCode
	CHAR [com.google.common.primitives.Chars]  →  com.google.common.primitives.Chars.hashCode($expr$)


## Doubles

.asList : com.google.common.primitives.Doubles.asList
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.asList($expr$)

.join : com.google.common.primitives.Doubles.join
	java.lang.String [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Doubles.lastIndexOf
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Doubles.constrainToRange
	DOUBLE [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Doubles.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.lexicographicalComparator()

.concat : com.google.common.primitives.Doubles.concat
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.concat($expr$)

.min : com.google.common.primitives.Doubles.min
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.min($expr$)

.stringConverter : com.google.common.primitives.Doubles.stringConverter
	java.lang.Object [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.stringConverter()

.ensureCapacity : com.google.common.primitives.Doubles.ensureCapacity
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Doubles.reverse
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.reverse($expr$, $arg$)

.isFinite : com.google.common.primitives.Doubles.isFinite
	DOUBLE [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.isFinite($expr$)

.max : com.google.common.primitives.Doubles.max
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.max($expr$)

.toArray : com.google.common.primitives.Doubles.toArray
	java.util.Collection [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.toArray($expr$)

.tryParse : com.google.common.primitives.Doubles.tryParse
	java.lang.String [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.tryParse($expr$)

.sortDescending : com.google.common.primitives.Doubles.sortDescending
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Doubles.contains
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Doubles.indexOf
	ARRAY [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Doubles.compare
	DOUBLE [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Doubles.hashCode
	DOUBLE [com.google.common.primitives.Doubles]  →  com.google.common.primitives.Doubles.hashCode($expr$)


## Floats

.asList : com.google.common.primitives.Floats.asList
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.asList($expr$)

.join : com.google.common.primitives.Floats.join
	java.lang.String [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Floats.lastIndexOf
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Floats.constrainToRange
	FLOAT [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Floats.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.lexicographicalComparator()

.concat : com.google.common.primitives.Floats.concat
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.concat($expr$)

.min : com.google.common.primitives.Floats.min
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.min($expr$)

.stringConverter : com.google.common.primitives.Floats.stringConverter
	java.lang.Object [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.stringConverter()

.ensureCapacity : com.google.common.primitives.Floats.ensureCapacity
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Floats.reverse
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.reverse($expr$, $arg$)

.isFinite : com.google.common.primitives.Floats.isFinite
	FLOAT [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.isFinite($expr$)

.max : com.google.common.primitives.Floats.max
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.max($expr$)

.toArray : com.google.common.primitives.Floats.toArray
	java.util.Collection [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.toArray($expr$)

.tryParse : com.google.common.primitives.Floats.tryParse
	java.lang.String [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.tryParse($expr$)

.sortDescending : com.google.common.primitives.Floats.sortDescending
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Floats.contains
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Floats.indexOf
	ARRAY [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Floats.compare
	FLOAT [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Floats.hashCode
	FLOAT [com.google.common.primitives.Floats]  →  com.google.common.primitives.Floats.hashCode($expr$)


## ImmutableDoubleArray

.builder : com.google.common.primitives.ImmutableDoubleArray.builder
	INT [com.google.common.primitives.ImmutableDoubleArray]  →  com.google.common.primitives.ImmutableDoubleArray.builder($expr$)
	java.lang.Object [com.google.common.primitives.ImmutableDoubleArray]  →  com.google.common.primitives.ImmutableDoubleArray.builder()

.of : com.google.common.primitives.ImmutableDoubleArray.of
	DOUBLE [com.google.common.primitives.ImmutableDoubleArray]  →  com.google.common.primitives.ImmutableDoubleArray.of($expr$, $arg$)
	java.lang.Object [com.google.common.primitives.ImmutableDoubleArray]  →  com.google.common.primitives.ImmutableDoubleArray.of()

.copyOf : com.google.common.primitives.ImmutableDoubleArray.copyOf
	ARRAY [com.google.common.primitives.ImmutableDoubleArray]  →  com.google.common.primitives.ImmutableDoubleArray.copyOf($expr$)
	java.util.Collection [com.google.common.primitives.ImmutableDoubleArray]  →  com.google.common.primitives.ImmutableDoubleArray.copyOf($expr$)
	java.util.stream.DoubleStream [com.google.common.primitives.ImmutableDoubleArray]  →  com.google.common.primitives.ImmutableDoubleArray.copyOf($expr$)
	java.lang.Iterable [com.google.common.primitives.ImmutableDoubleArray]  →  com.google.common.primitives.ImmutableDoubleArray.copyOf($expr$)


## ImmutableIntArray

.builder : com.google.common.primitives.ImmutableIntArray.builder
	INT [com.google.common.primitives.ImmutableIntArray]  →  com.google.common.primitives.ImmutableIntArray.builder($expr$)
	java.lang.Object [com.google.common.primitives.ImmutableIntArray]  →  com.google.common.primitives.ImmutableIntArray.builder()

.of : com.google.common.primitives.ImmutableIntArray.of
	INT [com.google.common.primitives.ImmutableIntArray]  →  com.google.common.primitives.ImmutableIntArray.of($expr$, $arg$)
	java.lang.Object [com.google.common.primitives.ImmutableIntArray]  →  com.google.common.primitives.ImmutableIntArray.of()

.copyOf : com.google.common.primitives.ImmutableIntArray.copyOf
	ARRAY [com.google.common.primitives.ImmutableIntArray]  →  com.google.common.primitives.ImmutableIntArray.copyOf($expr$)
	java.util.Collection [com.google.common.primitives.ImmutableIntArray]  →  com.google.common.primitives.ImmutableIntArray.copyOf($expr$)
	java.util.stream.IntStream [com.google.common.primitives.ImmutableIntArray]  →  com.google.common.primitives.ImmutableIntArray.copyOf($expr$)
	java.lang.Iterable [com.google.common.primitives.ImmutableIntArray]  →  com.google.common.primitives.ImmutableIntArray.copyOf($expr$)


## ImmutableLongArray

.builder : com.google.common.primitives.ImmutableLongArray.builder
	INT [com.google.common.primitives.ImmutableLongArray]  →  com.google.common.primitives.ImmutableLongArray.builder($expr$)
	java.lang.Object [com.google.common.primitives.ImmutableLongArray]  →  com.google.common.primitives.ImmutableLongArray.builder()

.of : com.google.common.primitives.ImmutableLongArray.of
	LONG [com.google.common.primitives.ImmutableLongArray]  →  com.google.common.primitives.ImmutableLongArray.of($expr$, $arg$)
	java.lang.Object [com.google.common.primitives.ImmutableLongArray]  →  com.google.common.primitives.ImmutableLongArray.of()

.copyOf : com.google.common.primitives.ImmutableLongArray.copyOf
	ARRAY [com.google.common.primitives.ImmutableLongArray]  →  com.google.common.primitives.ImmutableLongArray.copyOf($expr$)
	java.util.Collection [com.google.common.primitives.ImmutableLongArray]  →  com.google.common.primitives.ImmutableLongArray.copyOf($expr$)
	java.lang.Iterable [com.google.common.primitives.ImmutableLongArray]  →  com.google.common.primitives.ImmutableLongArray.copyOf($expr$)
	java.util.stream.LongStream [com.google.common.primitives.ImmutableLongArray]  →  com.google.common.primitives.ImmutableLongArray.copyOf($expr$)


## Ints

.asList : com.google.common.primitives.Ints.asList
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.asList($expr$)

.join : com.google.common.primitives.Ints.join
	java.lang.String [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Ints.lastIndexOf
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Ints.constrainToRange
	INT [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Ints.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.lexicographicalComparator()

.concat : com.google.common.primitives.Ints.concat
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.concat($expr$)

.min : com.google.common.primitives.Ints.min
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.min($expr$)

.stringConverter : com.google.common.primitives.Ints.stringConverter
	java.lang.Object [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.stringConverter()

.fromByteArray : com.google.common.primitives.Ints.fromByteArray
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.fromByteArray($expr$)

.ensureCapacity : com.google.common.primitives.Ints.ensureCapacity
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Ints.reverse
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.reverse($expr$, $arg$)

.max : com.google.common.primitives.Ints.max
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.max($expr$)

.saturatedCast : com.google.common.primitives.Ints.saturatedCast
	LONG [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.saturatedCast($expr$)

.toArray : com.google.common.primitives.Ints.toArray
	java.util.Collection [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.toArray($expr$)

.tryParse : com.google.common.primitives.Ints.tryParse
	java.lang.String [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.tryParse($expr$, $arg$)

.checkedCast : com.google.common.primitives.Ints.checkedCast
	LONG [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.checkedCast($expr$)

.fromBytes : com.google.common.primitives.Ints.fromBytes
	BYTE [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.fromBytes($expr$, $arg$)

.toByteArray : com.google.common.primitives.Ints.toByteArray
	INT [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.toByteArray($expr$)

.sortDescending : com.google.common.primitives.Ints.sortDescending
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Ints.contains
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Ints.indexOf
	ARRAY [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Ints.compare
	INT [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Ints.hashCode
	INT [com.google.common.primitives.Ints]  →  com.google.common.primitives.Ints.hashCode($expr$)


## Longs

.asList : com.google.common.primitives.Longs.asList
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.asList($expr$)

.join : com.google.common.primitives.Longs.join
	java.lang.String [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Longs.lastIndexOf
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Longs.constrainToRange
	LONG [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Longs.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.lexicographicalComparator()

.concat : com.google.common.primitives.Longs.concat
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.concat($expr$)

.min : com.google.common.primitives.Longs.min
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.min($expr$)

.stringConverter : com.google.common.primitives.Longs.stringConverter
	java.lang.Object [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.stringConverter()

.fromByteArray : com.google.common.primitives.Longs.fromByteArray
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.fromByteArray($expr$)

.ensureCapacity : com.google.common.primitives.Longs.ensureCapacity
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Longs.reverse
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.reverse($expr$, $arg$)

.max : com.google.common.primitives.Longs.max
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.max($expr$)

.toArray : com.google.common.primitives.Longs.toArray
	java.util.Collection [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.toArray($expr$)

.tryParse : com.google.common.primitives.Longs.tryParse
	java.lang.String [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.tryParse($expr$, $arg$)

.fromBytes : com.google.common.primitives.Longs.fromBytes
	BYTE [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.fromBytes($expr$, $arg$)

.toByteArray : com.google.common.primitives.Longs.toByteArray
	LONG [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.toByteArray($expr$)

.sortDescending : com.google.common.primitives.Longs.sortDescending
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Longs.contains
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Longs.indexOf
	ARRAY [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Longs.compare
	LONG [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Longs.hashCode
	LONG [com.google.common.primitives.Longs]  →  com.google.common.primitives.Longs.hashCode($expr$)


## Primitives

.allPrimitiveTypes : com.google.common.primitives.Primitives.allPrimitiveTypes
	java.lang.Object [com.google.common.primitives.Primitives]  →  com.google.common.primitives.Primitives.allPrimitiveTypes()

.isWrapperType : com.google.common.primitives.Primitives.isWrapperType
	java.lang.Class [com.google.common.primitives.Primitives]  →  com.google.common.primitives.Primitives.isWrapperType($expr$)

.unwrap : com.google.common.primitives.Primitives.unwrap
	java.lang.Class [com.google.common.primitives.Primitives]  →  com.google.common.primitives.Primitives.unwrap($expr$)

.wrap : com.google.common.primitives.Primitives.wrap
	java.lang.Class [com.google.common.primitives.Primitives]  →  com.google.common.primitives.Primitives.wrap($expr$)

.allWrapperTypes : com.google.common.primitives.Primitives.allWrapperTypes
	java.lang.Object [com.google.common.primitives.Primitives]  →  com.google.common.primitives.Primitives.allWrapperTypes()


## Shorts

.asList : com.google.common.primitives.Shorts.asList
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.asList($expr$)

.join : com.google.common.primitives.Shorts.join
	java.lang.String [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Shorts.lastIndexOf
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Shorts.constrainToRange
	SHORT [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Shorts.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.lexicographicalComparator()

.concat : com.google.common.primitives.Shorts.concat
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.concat($expr$)

.min : com.google.common.primitives.Shorts.min
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.min($expr$)

.stringConverter : com.google.common.primitives.Shorts.stringConverter
	java.lang.Object [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.stringConverter()

.fromByteArray : com.google.common.primitives.Shorts.fromByteArray
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.fromByteArray($expr$)

.ensureCapacity : com.google.common.primitives.Shorts.ensureCapacity
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Shorts.reverse
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.reverse($expr$, $arg$)

.max : com.google.common.primitives.Shorts.max
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.max($expr$)

.saturatedCast : com.google.common.primitives.Shorts.saturatedCast
	LONG [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.saturatedCast($expr$)

.toArray : com.google.common.primitives.Shorts.toArray
	java.util.Collection [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.toArray($expr$)

.checkedCast : com.google.common.primitives.Shorts.checkedCast
	LONG [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.checkedCast($expr$)

.fromBytes : com.google.common.primitives.Shorts.fromBytes
	BYTE [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.fromBytes($expr$, $arg$)

.toByteArray : com.google.common.primitives.Shorts.toByteArray
	SHORT [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.toByteArray($expr$)

.sortDescending : com.google.common.primitives.Shorts.sortDescending
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Shorts.contains
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Shorts.indexOf
	ARRAY [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Shorts.compare
	SHORT [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Shorts.hashCode
	SHORT [com.google.common.primitives.Shorts]  →  com.google.common.primitives.Shorts.hashCode($expr$)


## SignedBytes

.join : com.google.common.primitives.SignedBytes.join
	java.lang.String [com.google.common.primitives.SignedBytes]  →  com.google.common.primitives.SignedBytes.join($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.SignedBytes.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.SignedBytes]  →  com.google.common.primitives.SignedBytes.lexicographicalComparator()

.min : com.google.common.primitives.SignedBytes.min
	ARRAY [com.google.common.primitives.SignedBytes]  →  com.google.common.primitives.SignedBytes.min($expr$)

.max : com.google.common.primitives.SignedBytes.max
	ARRAY [com.google.common.primitives.SignedBytes]  →  com.google.common.primitives.SignedBytes.max($expr$)

.saturatedCast : com.google.common.primitives.SignedBytes.saturatedCast
	LONG [com.google.common.primitives.SignedBytes]  →  com.google.common.primitives.SignedBytes.saturatedCast($expr$)

.checkedCast : com.google.common.primitives.SignedBytes.checkedCast
	LONG [com.google.common.primitives.SignedBytes]  →  com.google.common.primitives.SignedBytes.checkedCast($expr$)

.sortDescending : com.google.common.primitives.SignedBytes.sortDescending
	ARRAY [com.google.common.primitives.SignedBytes]  →  com.google.common.primitives.SignedBytes.sortDescending($expr$, $arg$)

.compare : com.google.common.primitives.SignedBytes.compare
	BYTE [com.google.common.primitives.SignedBytes]  →  com.google.common.primitives.SignedBytes.compare($expr$, $arg$)


## UnsignedBytes

.parseUnsignedByte : com.google.common.primitives.UnsignedBytes.parseUnsignedByte
	java.lang.String [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.parseUnsignedByte($expr$, $arg$)

.join : com.google.common.primitives.UnsignedBytes.join
	java.lang.String [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.join($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.UnsignedBytes.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.lexicographicalComparator()

.min : com.google.common.primitives.UnsignedBytes.min
	ARRAY [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.min($expr$)

.max : com.google.common.primitives.UnsignedBytes.max
	ARRAY [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.max($expr$)

.saturatedCast : com.google.common.primitives.UnsignedBytes.saturatedCast
	LONG [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.saturatedCast($expr$)

.toInt : com.google.common.primitives.UnsignedBytes.toInt
	BYTE [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.toInt($expr$)

.checkedCast : com.google.common.primitives.UnsignedBytes.checkedCast
	LONG [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.checkedCast($expr$)

.toString : com.google.common.primitives.UnsignedBytes.toString
	BYTE [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.toString($expr$, $arg$)

.sort : com.google.common.primitives.UnsignedBytes.sort
	ARRAY [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.sort($expr$, $arg$)

.sortDescending : com.google.common.primitives.UnsignedBytes.sortDescending
	ARRAY [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.sortDescending($expr$, $arg$)

.compare : com.google.common.primitives.UnsignedBytes.compare
	BYTE [com.google.common.primitives.UnsignedBytes]  →  com.google.common.primitives.UnsignedBytes.compare($expr$, $arg$)


## UnsignedInteger

.valueOf : com.google.common.primitives.UnsignedInteger.valueOf
	java.lang.String [com.google.common.primitives.UnsignedInteger]  →  com.google.common.primitives.UnsignedInteger.valueOf($expr$, $arg$)
	LONG [com.google.common.primitives.UnsignedInteger]  →  com.google.common.primitives.UnsignedInteger.valueOf($expr$)
	java.math.BigInteger [com.google.common.primitives.UnsignedInteger]  →  com.google.common.primitives.UnsignedInteger.valueOf($expr$)

.fromIntBits : com.google.common.primitives.UnsignedInteger.fromIntBits
	INT [com.google.common.primitives.UnsignedInteger]  →  com.google.common.primitives.UnsignedInteger.fromIntBits($expr$)


## UnsignedInts

.remainder : com.google.common.primitives.UnsignedInts.remainder
	INT [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.remainder($expr$, $arg$)

.join : com.google.common.primitives.UnsignedInts.join
	java.lang.String [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.join($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.UnsignedInts.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.lexicographicalComparator()

.min : com.google.common.primitives.UnsignedInts.min
	ARRAY [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.min($expr$)

.divide : com.google.common.primitives.UnsignedInts.divide
	INT [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.divide($expr$, $arg$)

.decode : com.google.common.primitives.UnsignedInts.decode
	java.lang.String [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.decode($expr$)

.toLong : com.google.common.primitives.UnsignedInts.toLong
	INT [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.toLong($expr$)

.max : com.google.common.primitives.UnsignedInts.max
	ARRAY [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.max($expr$)

.saturatedCast : com.google.common.primitives.UnsignedInts.saturatedCast
	LONG [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.saturatedCast($expr$)

.parseUnsignedInt : com.google.common.primitives.UnsignedInts.parseUnsignedInt
	java.lang.String [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.parseUnsignedInt($expr$, $arg$)

.checkedCast : com.google.common.primitives.UnsignedInts.checkedCast
	LONG [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.checkedCast($expr$)

.toString : com.google.common.primitives.UnsignedInts.toString
	INT [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.toString($expr$, $arg$)

.sort : com.google.common.primitives.UnsignedInts.sort
	ARRAY [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.sort($expr$, $arg$)

.sortDescending : com.google.common.primitives.UnsignedInts.sortDescending
	ARRAY [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.sortDescending($expr$, $arg$)

.compare : com.google.common.primitives.UnsignedInts.compare
	INT [com.google.common.primitives.UnsignedInts]  →  com.google.common.primitives.UnsignedInts.compare($expr$, $arg$)


## UnsignedLong

.fromLongBits : com.google.common.primitives.UnsignedLong.fromLongBits
	LONG [com.google.common.primitives.UnsignedLong]  →  com.google.common.primitives.UnsignedLong.fromLongBits($expr$)

.valueOf : com.google.common.primitives.UnsignedLong.valueOf
	java.lang.String [com.google.common.primitives.UnsignedLong]  →  com.google.common.primitives.UnsignedLong.valueOf($expr$, $arg$)
	LONG [com.google.common.primitives.UnsignedLong]  →  com.google.common.primitives.UnsignedLong.valueOf($expr$)
	java.math.BigInteger [com.google.common.primitives.UnsignedLong]  →  com.google.common.primitives.UnsignedLong.valueOf($expr$)


## UnsignedLongs

.remainder : com.google.common.primitives.UnsignedLongs.remainder
	LONG [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.remainder($expr$, $arg$)

.join : com.google.common.primitives.UnsignedLongs.join
	java.lang.String [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.join($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.UnsignedLongs.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.lexicographicalComparator()

.min : com.google.common.primitives.UnsignedLongs.min
	ARRAY [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.min($expr$)

.divide : com.google.common.primitives.UnsignedLongs.divide
	LONG [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.divide($expr$, $arg$)

.decode : com.google.common.primitives.UnsignedLongs.decode
	java.lang.String [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.decode($expr$)

.parseUnsignedLong : com.google.common.primitives.UnsignedLongs.parseUnsignedLong
	java.lang.String [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.parseUnsignedLong($expr$, $arg$)

.max : com.google.common.primitives.UnsignedLongs.max
	ARRAY [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.max($expr$)

.toString : com.google.common.primitives.UnsignedLongs.toString
	LONG [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.toString($expr$, $arg$)

.sort : com.google.common.primitives.UnsignedLongs.sort
	ARRAY [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.sort($expr$, $arg$)

.sortDescending : com.google.common.primitives.UnsignedLongs.sortDescending
	ARRAY [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.sortDescending($expr$, $arg$)

.compare : com.google.common.primitives.UnsignedLongs.compare
	LONG [com.google.common.primitives.UnsignedLongs]  →  com.google.common.primitives.UnsignedLongs.compare($expr$, $arg$)


## ClassPath

.from : com.google.common.reflect.ClassPath.from
	java.lang.ClassLoader [com.google.common.reflect.ClassPath]  →  com.google.common.reflect.ClassPath.from($expr$)


## ImmutableTypeToInstanceMap

.builder : com.google.common.reflect.ImmutableTypeToInstanceMap.builder
	java.lang.Object [com.google.common.reflect.ImmutableTypeToInstanceMap]  →  com.google.common.reflect.ImmutableTypeToInstanceMap.builder()

.of : com.google.common.reflect.ImmutableTypeToInstanceMap.of
	java.lang.Object [com.google.common.reflect.ImmutableTypeToInstanceMap]  →  com.google.common.reflect.ImmutableTypeToInstanceMap.of()


## Invokable

.from : com.google.common.reflect.Invokable.from
	java.lang.reflect.Constructor [com.google.common.reflect.Invokable]  →  com.google.common.reflect.Invokable.from($expr$)
	java.lang.reflect.Method [com.google.common.reflect.Invokable]  →  com.google.common.reflect.Invokable.from($expr$)


## Reflection

.initialize : com.google.common.reflect.Reflection.initialize
	ARRAY [com.google.common.reflect.Reflection]  →  com.google.common.reflect.Reflection.initialize($expr$)

.getPackageName : com.google.common.reflect.Reflection.getPackageName
	java.lang.String [com.google.common.reflect.Reflection]  →  com.google.common.reflect.Reflection.getPackageName($expr$)
	java.lang.Class [com.google.common.reflect.Reflection]  →  com.google.common.reflect.Reflection.getPackageName($expr$)

.newProxy : com.google.common.reflect.Reflection.newProxy
	java.lang.Class [com.google.common.reflect.Reflection]  →  com.google.common.reflect.Reflection.newProxy($expr$, $arg$)


## TypeToken

.of : com.google.common.reflect.TypeToken.of
	java.lang.reflect.Type [com.google.common.reflect.TypeToken]  →  com.google.common.reflect.TypeToken.of($expr$)
	java.lang.Class [com.google.common.reflect.TypeToken]  →  com.google.common.reflect.TypeToken.of($expr$)


## AtomicLongMap

.create : com.google.common.util.concurrent.AtomicLongMap.create
	java.util.Map [com.google.common.util.concurrent.AtomicLongMap]  →  com.google.common.util.concurrent.AtomicLongMap.create($expr$)
	java.lang.Object [com.google.common.util.concurrent.AtomicLongMap]  →  com.google.common.util.concurrent.AtomicLongMap.create()


## Atomics

.newReferenceArray : com.google.common.util.concurrent.Atomics.newReferenceArray
	ARRAY [com.google.common.util.concurrent.Atomics]  →  com.google.common.util.concurrent.Atomics.newReferenceArray($expr$)
	INT [com.google.common.util.concurrent.Atomics]  →  com.google.common.util.concurrent.Atomics.newReferenceArray($expr$)

.newReference : com.google.common.util.concurrent.Atomics.newReference
	java.lang.Object [com.google.common.util.concurrent.Atomics]  →  com.google.common.util.concurrent.Atomics.newReference($expr$)
	java.lang.Object [com.google.common.util.concurrent.Atomics]  →  com.google.common.util.concurrent.Atomics.newReference()


## Callables

.asAsyncCallable : com.google.common.util.concurrent.Callables.asAsyncCallable
	java.util.concurrent.Callable [com.google.common.util.concurrent.Callables]  →  com.google.common.util.concurrent.Callables.asAsyncCallable($expr$, $arg$)

.returning : com.google.common.util.concurrent.Callables.returning
	java.lang.Object [com.google.common.util.concurrent.Callables]  →  com.google.common.util.concurrent.Callables.returning($expr$)


## ClosingFuture

.whenAllSucceed : com.google.common.util.concurrent.ClosingFuture.whenAllSucceed
	java.lang.Iterable [com.google.common.util.concurrent.ClosingFuture]  →  com.google.common.util.concurrent.ClosingFuture.whenAllSucceed($expr$)
	com.google.common.util.concurrent.ClosingFuture [com.google.common.util.concurrent.ClosingFuture]  →  com.google.common.util.concurrent.ClosingFuture.whenAllSucceed($expr$, $arg$)

.withoutCloser : com.google.common.util.concurrent.ClosingFuture.withoutCloser
	com.google.common.util.concurrent.AsyncFunction [com.google.common.util.concurrent.ClosingFuture]  →  com.google.common.util.concurrent.ClosingFuture.withoutCloser($expr$)

.whenAllComplete : com.google.common.util.concurrent.ClosingFuture.whenAllComplete
	java.lang.Iterable [com.google.common.util.concurrent.ClosingFuture]  →  com.google.common.util.concurrent.ClosingFuture.whenAllComplete($expr$)
	com.google.common.util.concurrent.ClosingFuture [com.google.common.util.concurrent.ClosingFuture]  →  com.google.common.util.concurrent.ClosingFuture.whenAllComplete($expr$, $arg$)

.submit : com.google.common.util.concurrent.ClosingFuture.submit
	com.google.common.util.concurrent.ClosingFuture.ClosingCallable [com.google.common.util.concurrent.ClosingFuture]  →  com.google.common.util.concurrent.ClosingFuture.submit($expr$, $arg$)

.submitAsync : com.google.common.util.concurrent.ClosingFuture.submitAsync
	com.google.common.util.concurrent.ClosingFuture.AsyncClosingCallable [com.google.common.util.concurrent.ClosingFuture]  →  com.google.common.util.concurrent.ClosingFuture.submitAsync($expr$, $arg$)

.from : com.google.common.util.concurrent.ClosingFuture.from
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.ClosingFuture]  →  com.google.common.util.concurrent.ClosingFuture.from($expr$)


## CycleDetectingLockFactory

.newInstance : com.google.common.util.concurrent.CycleDetectingLockFactory.newInstance
	com.google.common.util.concurrent.CycleDetectingLockFactory.Policy [com.google.common.util.concurrent.CycleDetectingLockFactory]  →  com.google.common.util.concurrent.CycleDetectingLockFactory.newInstance($expr$)

.newInstanceWithExplicitOrdering : com.google.common.util.concurrent.CycleDetectingLockFactory.newInstanceWithExplicitOrdering
	java.lang.Class [com.google.common.util.concurrent.CycleDetectingLockFactory]  →  com.google.common.util.concurrent.CycleDetectingLockFactory.newInstanceWithExplicitOrdering($expr$, $arg$)


## ExecutionSequencer

.create : com.google.common.util.concurrent.ExecutionSequencer.create
	java.lang.Object [com.google.common.util.concurrent.ExecutionSequencer]  →  com.google.common.util.concurrent.ExecutionSequencer.create()


## FluentFuture

.from : com.google.common.util.concurrent.FluentFuture.from
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.FluentFuture]  →  com.google.common.util.concurrent.FluentFuture.from($expr$)


## Futures

.withTimeout : com.google.common.util.concurrent.Futures.withTimeout
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.withTimeout($expr$, $arg$)

.successfulAsList : com.google.common.util.concurrent.Futures.successfulAsList
	ARRAY [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.successfulAsList($expr$)
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.successfulAsList($expr$)

.whenAllSucceed : com.google.common.util.concurrent.Futures.whenAllSucceed
	ARRAY [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.whenAllSucceed($expr$)
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.whenAllSucceed($expr$)

.getUnchecked : com.google.common.util.concurrent.Futures.getUnchecked
	java.util.concurrent.Future [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.getUnchecked($expr$)

.immediateFailedFuture : com.google.common.util.concurrent.Futures.immediateFailedFuture
	java.lang.Throwable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.immediateFailedFuture($expr$)

.whenAllComplete : com.google.common.util.concurrent.Futures.whenAllComplete
	ARRAY [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.whenAllComplete($expr$)
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.whenAllComplete($expr$)

.submit : com.google.common.util.concurrent.Futures.submit
	java.util.concurrent.Callable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.submit($expr$, $arg$)
	java.lang.Runnable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.submit($expr$, $arg$)

.allAsList : com.google.common.util.concurrent.Futures.allAsList
	ARRAY [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.allAsList($expr$)
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.allAsList($expr$)

.immediateCancelledFuture : com.google.common.util.concurrent.Futures.immediateCancelledFuture
	java.lang.Object [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.immediateCancelledFuture()

.catching : com.google.common.util.concurrent.Futures.catching
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.catching($expr$, $arg$)

.submitAsync : com.google.common.util.concurrent.Futures.submitAsync
	com.google.common.util.concurrent.AsyncCallable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.submitAsync($expr$, $arg$)

.getChecked : com.google.common.util.concurrent.Futures.getChecked
	java.util.concurrent.Future [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.getChecked($expr$, $arg$)

.transformAsync : com.google.common.util.concurrent.Futures.transformAsync
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.transformAsync($expr$, $arg$)

.catchingAsync : com.google.common.util.concurrent.Futures.catchingAsync
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.catchingAsync($expr$, $arg$)

.nonCancellationPropagating : com.google.common.util.concurrent.Futures.nonCancellationPropagating
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.nonCancellationPropagating($expr$)

.lazyTransform : com.google.common.util.concurrent.Futures.lazyTransform
	java.util.concurrent.Future [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.lazyTransform($expr$, $arg$)

.inCompletionOrder : com.google.common.util.concurrent.Futures.inCompletionOrder
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.inCompletionOrder($expr$)

.scheduleAsync : com.google.common.util.concurrent.Futures.scheduleAsync
	com.google.common.util.concurrent.AsyncCallable [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.scheduleAsync($expr$, $arg$)

.addCallback : com.google.common.util.concurrent.Futures.addCallback
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.addCallback($expr$, $arg$)

.immediateFuture : com.google.common.util.concurrent.Futures.immediateFuture
	java.lang.Object [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.immediateFuture($expr$)

.immediateVoidFuture : com.google.common.util.concurrent.Futures.immediateVoidFuture
	java.lang.Object [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.immediateVoidFuture()

.transform : com.google.common.util.concurrent.Futures.transform
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.transform($expr$, $arg$)

.getDone : com.google.common.util.concurrent.Futures.getDone
	java.util.concurrent.Future [com.google.common.util.concurrent.Futures]  →  com.google.common.util.concurrent.Futures.getDone($expr$)


## JdkFutureAdapters

.listenInPoolThread : com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread
	java.util.concurrent.Future [com.google.common.util.concurrent.JdkFutureAdapters]  →  com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread($expr$, $arg$)


## ListenableFutureTask

.create : com.google.common.util.concurrent.ListenableFutureTask.create
	java.util.concurrent.Callable [com.google.common.util.concurrent.ListenableFutureTask]  →  com.google.common.util.concurrent.ListenableFutureTask.create($expr$)
	java.lang.Runnable [com.google.common.util.concurrent.ListenableFutureTask]  →  com.google.common.util.concurrent.ListenableFutureTask.create($expr$, $arg$)


## MoreExecutors

.addDelayedShutdownHook : com.google.common.util.concurrent.MoreExecutors.addDelayedShutdownHook
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.addDelayedShutdownHook($expr$, $arg$)

.listeningDecorator : com.google.common.util.concurrent.MoreExecutors.listeningDecorator
	java.util.concurrent.ScheduledExecutorService [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.listeningDecorator($expr$)
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.listeningDecorator($expr$)

.getExitingExecutorService : com.google.common.util.concurrent.MoreExecutors.getExitingExecutorService
	java.util.concurrent.ThreadPoolExecutor [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.getExitingExecutorService($expr$, $arg$)

.newSequentialExecutor : com.google.common.util.concurrent.MoreExecutors.newSequentialExecutor
	java.util.concurrent.Executor [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.newSequentialExecutor($expr$)

.platformThreadFactory : com.google.common.util.concurrent.MoreExecutors.platformThreadFactory
	java.lang.Object [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.platformThreadFactory()

.shutdownAndAwaitTermination : com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination($expr$, $arg$)

.newDirectExecutorService : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService
	java.lang.Object [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()

.directExecutor : com.google.common.util.concurrent.MoreExecutors.directExecutor
	java.lang.Object [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.directExecutor()

.getExitingScheduledExecutorService : com.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService
	java.util.concurrent.ScheduledThreadPoolExecutor [com.google.common.util.concurrent.MoreExecutors]  →  com.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService($expr$, $arg$)


## RateLimiter

.create : com.google.common.util.concurrent.RateLimiter.create
	DOUBLE [com.google.common.util.concurrent.RateLimiter]  →  com.google.common.util.concurrent.RateLimiter.create($expr$, $arg$)


## Runnables

.doNothing : com.google.common.util.concurrent.Runnables.doNothing
	java.lang.Object [com.google.common.util.concurrent.Runnables]  →  com.google.common.util.concurrent.Runnables.doNothing()


## SettableFuture

.create : com.google.common.util.concurrent.SettableFuture.create
	java.lang.Object [com.google.common.util.concurrent.SettableFuture]  →  com.google.common.util.concurrent.SettableFuture.create()


## SimpleTimeLimiter

.create : com.google.common.util.concurrent.SimpleTimeLimiter.create
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.SimpleTimeLimiter]  →  com.google.common.util.concurrent.SimpleTimeLimiter.create($expr$)


## Striped

.lazyWeakSemaphore : com.google.common.util.concurrent.Striped.lazyWeakSemaphore
	INT [com.google.common.util.concurrent.Striped]  →  com.google.common.util.concurrent.Striped.lazyWeakSemaphore($expr$, $arg$)

.lazyWeakLock : com.google.common.util.concurrent.Striped.lazyWeakLock
	INT [com.google.common.util.concurrent.Striped]  →  com.google.common.util.concurrent.Striped.lazyWeakLock($expr$)

.lock : com.google.common.util.concurrent.Striped.lock
	INT [com.google.common.util.concurrent.Striped]  →  com.google.common.util.concurrent.Striped.lock($expr$)

.lazyWeakReadWriteLock : com.google.common.util.concurrent.Striped.lazyWeakReadWriteLock
	INT [com.google.common.util.concurrent.Striped]  →  com.google.common.util.concurrent.Striped.lazyWeakReadWriteLock($expr$)

.readWriteLock : com.google.common.util.concurrent.Striped.readWriteLock
	INT [com.google.common.util.concurrent.Striped]  →  com.google.common.util.concurrent.Striped.readWriteLock($expr$)

.semaphore : com.google.common.util.concurrent.Striped.semaphore
	INT [com.google.common.util.concurrent.Striped]  →  com.google.common.util.concurrent.Striped.semaphore($expr$, $arg$)


## UncaughtExceptionHandlers

.systemExit : com.google.common.util.concurrent.UncaughtExceptionHandlers.systemExit
	java.lang.Object [com.google.common.util.concurrent.UncaughtExceptionHandlers]  →  com.google.common.util.concurrent.UncaughtExceptionHandlers.systemExit()


## Uninterruptibles

.awaitUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly
	java.util.concurrent.locks.Condition [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly($expr$, $arg$)
	java.util.concurrent.CountDownLatch [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly($expr$, $arg$)

.tryLockUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly
	java.util.concurrent.locks.Lock [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly($expr$, $arg$)

.sleepUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly
	java.time.Duration [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly($expr$)
	LONG [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly($expr$, $arg$)

.awaitTerminationUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly($expr$, $arg$)

.joinUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly
	java.lang.Thread [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly($expr$, $arg$)

.putUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.putUninterruptibly
	java.util.concurrent.BlockingQueue [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.putUninterruptibly($expr$, $arg$)

.getUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly
	java.util.concurrent.Future [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly($expr$, $arg$)

.takeUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly
	java.util.concurrent.BlockingQueue [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly($expr$)

.tryAcquireUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly
	java.util.concurrent.Semaphore [com.google.common.util.concurrent.Uninterruptibles]  →  com.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly($expr$, $arg$)


## InternalFutures

.tryInternalFastPathGetFailure : com.google.common.util.concurrent.internal.InternalFutures.tryInternalFastPathGetFailure
	com.google.common.util.concurrent.internal.InternalFutureFailureAccess [com.google.common.util.concurrent.internal.InternalFutures]  →  com.google.common.util.concurrent.internal.InternalFutures.tryInternalFastPathGetFailure($expr$)


## XmlEscapers

.xmlAttributeEscaper : com.google.common.xml.XmlEscapers.xmlAttributeEscaper
	java.lang.Object [com.google.common.xml.XmlEscapers]  →  com.google.common.xml.XmlEscapers.xmlAttributeEscaper()

.xmlContentEscaper : com.google.common.xml.XmlEscapers.xmlContentEscaper
	java.lang.Object [com.google.common.xml.XmlEscapers]  →  com.google.common.xml.XmlEscapers.xmlContentEscaper()


## Optional

.ofNullable : java.util.Optional.ofNullable
	java.lang.Object [java.util.Optional]  →  java.util.Optional.ofNullable($expr$)

.of : java.util.Optional.of
	java.lang.Object [java.util.Optional]  →  java.util.Optional.of($expr$)

.empty : java.util.Optional.empty
	java.lang.Object [java.util.Optional]  →  java.util.Optional.empty()


## Collectors

.joining : java.util.stream.Collectors.joining
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.joining($arg$))

.partitioningBy : java.util.stream.Collectors.partitioningBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.partitioningBy($arg$))

.summingLong : java.util.stream.Collectors.summingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summingLong($arg$))

.groupingBy : java.util.stream.Collectors.groupingBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.groupingBy($arg$))

.summarizingLong : java.util.stream.Collectors.summarizingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summarizingLong($arg$))

.toUnmodifiableSet : java.util.stream.Collectors.toUnmodifiableSet
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toUnmodifiableSet($arg$))

.minBy : java.util.stream.Collectors.minBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.minBy($arg$))

.summarizingInt : java.util.stream.Collectors.summarizingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summarizingInt($arg$))

.toSet : java.util.stream.Collectors.toSet
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toSet($arg$))

.toMap : java.util.stream.Collectors.toMap
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toMap($arg$))

.averagingLong : java.util.stream.Collectors.averagingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.averagingLong($arg$))

.toList : java.util.stream.Collectors.toList
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toList($arg$))

.teeing : java.util.stream.Collectors.teeing
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.teeing($arg$))

.mapping : java.util.stream.Collectors.mapping
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.mapping($arg$))

.summingDouble : java.util.stream.Collectors.summingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summingDouble($arg$))

.summingInt : java.util.stream.Collectors.summingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summingInt($arg$))

.toConcurrentMap : java.util.stream.Collectors.toConcurrentMap
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toConcurrentMap($arg$))

.maxBy : java.util.stream.Collectors.maxBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.maxBy($arg$))

.toUnmodifiableMap : java.util.stream.Collectors.toUnmodifiableMap
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toUnmodifiableMap($arg$))

.counting : java.util.stream.Collectors.counting
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.counting($arg$))

.groupingByConcurrent : java.util.stream.Collectors.groupingByConcurrent
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.groupingByConcurrent($arg$))

.reducing : java.util.stream.Collectors.reducing
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.reducing($arg$))

.summarizingDouble : java.util.stream.Collectors.summarizingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.summarizingDouble($arg$))

.filtering : java.util.stream.Collectors.filtering
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.filtering($arg$))

.flatMapping : java.util.stream.Collectors.flatMapping
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.flatMapping($arg$))

.toCollection : java.util.stream.Collectors.toCollection
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toCollection($arg$))

.averagingDouble : java.util.stream.Collectors.averagingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.averagingDouble($arg$))

.toUnmodifiableList : java.util.stream.Collectors.toUnmodifiableList
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.toUnmodifiableList($arg$))

.collectingAndThen : java.util.stream.Collectors.collectingAndThen
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.collectingAndThen($arg$))

.averagingInt : java.util.stream.Collectors.averagingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(Collectors.averagingInt($arg$))


## Collections

.unmodifiableNavigableSet : java.util.Collections.unmodifiableNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  java.util.Collections.unmodifiableNavigableSet($expr$)

.checkedSortedMap : java.util.Collections.checkedSortedMap
	java.util.SortedMap [java.util.Collections]  →  java.util.Collections.checkedSortedMap($expr$, $arg$)

.emptyIterator : java.util.Collections.emptyIterator
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyIterator()

.unmodifiableList : java.util.Collections.unmodifiableList
	java.util.List [java.util.Collections]  →  java.util.Collections.unmodifiableList($expr$)

.synchronizedCollection : java.util.Collections.synchronizedCollection
	java.util.Collection [java.util.Collections]  →  java.util.Collections.synchronizedCollection($expr$)

.asLifoQueue : java.util.Collections.asLifoQueue
	java.util.Deque [java.util.Collections]  →  java.util.Collections.asLifoQueue($expr$)

.checkedQueue : java.util.Collections.checkedQueue
	java.util.Queue [java.util.Collections]  →  java.util.Collections.checkedQueue($expr$, $arg$)

.reverseOrder : java.util.Collections.reverseOrder
	java.util.Comparator [java.util.Collections]  →  java.util.Collections.reverseOrder($expr$)
	java.lang.Object [java.util.Collections]  →  java.util.Collections.reverseOrder()

.synchronizedSet : java.util.Collections.synchronizedSet
	java.util.Set [java.util.Collections]  →  java.util.Collections.synchronizedSet($expr$)

.synchronizedNavigableMap : java.util.Collections.synchronizedNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  java.util.Collections.synchronizedNavigableMap($expr$)

.emptyEnumeration : java.util.Collections.emptyEnumeration
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyEnumeration()

.synchronizedNavigableSet : java.util.Collections.synchronizedNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  java.util.Collections.synchronizedNavigableSet($expr$)

.checkedList : java.util.Collections.checkedList
	java.util.List [java.util.Collections]  →  java.util.Collections.checkedList($expr$, $arg$)

.emptySortedSet : java.util.Collections.emptySortedSet
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptySortedSet()

.addAll : java.util.Collections.addAll
	java.util.Collection [java.util.Collections]  →  java.util.Collections.addAll($expr$, $arg$)

.nCopies : java.util.Collections.nCopies
	INT [java.util.Collections]  →  java.util.Collections.nCopies($expr$, $arg$)

.unmodifiableMap : java.util.Collections.unmodifiableMap
	java.util.Map [java.util.Collections]  →  java.util.Collections.unmodifiableMap($expr$)

.emptyList : java.util.Collections.emptyList
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyList()

.min : java.util.Collections.min
	java.util.Collection [java.util.Collections]  →  java.util.Collections.min($expr$, $arg$)

.emptySet : java.util.Collections.emptySet
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptySet()

.emptyMap : java.util.Collections.emptyMap
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyMap()

.unmodifiableCollection : java.util.Collections.unmodifiableCollection
	java.util.Collection [java.util.Collections]  →  java.util.Collections.unmodifiableCollection($expr$)

.synchronizedList : java.util.Collections.synchronizedList
	java.util.List [java.util.Collections]  →  java.util.Collections.synchronizedList($expr$)

.newSetFromMap : java.util.Collections.newSetFromMap
	java.util.Map [java.util.Collections]  →  java.util.Collections.newSetFromMap($expr$)

.checkedCollection : java.util.Collections.checkedCollection
	java.util.Collection [java.util.Collections]  →  java.util.Collections.checkedCollection($expr$, $arg$)

.checkedNavigableSet : java.util.Collections.checkedNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  java.util.Collections.checkedNavigableSet($expr$, $arg$)

.emptyNavigableMap : java.util.Collections.emptyNavigableMap
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyNavigableMap()

.reverse : java.util.Collections.reverse
	java.util.List [java.util.Collections]  →  java.util.Collections.reverse($expr$)

.rotate : java.util.Collections.rotate
	java.util.List [java.util.Collections]  →  java.util.Collections.rotate($expr$, $arg$)

.lastIndexOfSubList : java.util.Collections.lastIndexOfSubList
	java.util.List [java.util.Collections]  →  java.util.Collections.lastIndexOfSubList($expr$, $arg$)

.synchronizedSortedSet : java.util.Collections.synchronizedSortedSet
	java.util.SortedSet [java.util.Collections]  →  java.util.Collections.synchronizedSortedSet($expr$)

.unmodifiableSortedSet : java.util.Collections.unmodifiableSortedSet
	java.util.SortedSet [java.util.Collections]  →  java.util.Collections.unmodifiableSortedSet($expr$)

.checkedNavigableMap : java.util.Collections.checkedNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  java.util.Collections.checkedNavigableMap($expr$, $arg$)

.max : java.util.Collections.max
	java.util.Collection [java.util.Collections]  →  java.util.Collections.max($expr$, $arg$)

.unmodifiableSortedMap : java.util.Collections.unmodifiableSortedMap
	java.util.SortedMap [java.util.Collections]  →  java.util.Collections.unmodifiableSortedMap($expr$)

.fill : java.util.Collections.fill
	java.util.List [java.util.Collections]  →  java.util.Collections.fill($expr$, $arg$)

.emptyNavigableSet : java.util.Collections.emptyNavigableSet
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyNavigableSet()

.checkedSortedSet : java.util.Collections.checkedSortedSet
	java.util.SortedSet [java.util.Collections]  →  java.util.Collections.checkedSortedSet($expr$, $arg$)

.synchronizedMap : java.util.Collections.synchronizedMap
	java.util.Map [java.util.Collections]  →  java.util.Collections.synchronizedMap($expr$)

.checkedMap : java.util.Collections.checkedMap
	java.util.Map [java.util.Collections]  →  java.util.Collections.checkedMap($expr$, $arg$)

.singletonList : java.util.Collections.singletonList
	java.lang.Object [java.util.Collections]  →  java.util.Collections.singletonList($expr$)

.enumeration : java.util.Collections.enumeration
	java.util.Collection [java.util.Collections]  →  java.util.Collections.enumeration($expr$)

.unmodifiableNavigableMap : java.util.Collections.unmodifiableNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  java.util.Collections.unmodifiableNavigableMap($expr$)

.shuffle : java.util.Collections.shuffle
	java.util.List [java.util.Collections]  →  java.util.Collections.shuffle($expr$, $arg$)

.swap : java.util.Collections.swap
	java.util.List [java.util.Collections]  →  java.util.Collections.swap($expr$, $arg$)

.copy : java.util.Collections.copy
	java.util.List [java.util.Collections]  →  java.util.Collections.copy($expr$, $arg$)

.singleton : java.util.Collections.singleton
	java.lang.Object [java.util.Collections]  →  java.util.Collections.singleton($expr$)

.disjoint : java.util.Collections.disjoint
	java.util.Collection [java.util.Collections]  →  java.util.Collections.disjoint($expr$, $arg$)

.frequency : java.util.Collections.frequency
	java.util.Collection [java.util.Collections]  →  java.util.Collections.frequency($expr$, $arg$)

.indexOfSubList : java.util.Collections.indexOfSubList
	java.util.List [java.util.Collections]  →  java.util.Collections.indexOfSubList($expr$, $arg$)

.checkedSet : java.util.Collections.checkedSet
	java.util.Set [java.util.Collections]  →  java.util.Collections.checkedSet($expr$, $arg$)

.emptySortedMap : java.util.Collections.emptySortedMap
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptySortedMap()

.sort : java.util.Collections.sort
	java.util.List [java.util.Collections]  →  java.util.Collections.sort($expr$, $arg$)

.binarySearch : java.util.Collections.binarySearch
	java.util.List [java.util.Collections]  →  java.util.Collections.binarySearch($expr$, $arg$)

.unmodifiableSet : java.util.Collections.unmodifiableSet
	java.util.Set [java.util.Collections]  →  java.util.Collections.unmodifiableSet($expr$)

.synchronizedSortedMap : java.util.Collections.synchronizedSortedMap
	java.util.SortedMap [java.util.Collections]  →  java.util.Collections.synchronizedSortedMap($expr$)

.replaceAll : java.util.Collections.replaceAll
	java.util.List [java.util.Collections]  →  java.util.Collections.replaceAll($expr$, $arg$)

.singletonMap : java.util.Collections.singletonMap
	java.lang.Object [java.util.Collections]  →  java.util.Collections.singletonMap($expr$, $arg$)

.emptyListIterator : java.util.Collections.emptyListIterator
	java.lang.Object [java.util.Collections]  →  java.util.Collections.emptyListIterator()

.list : java.util.Collections.list
	java.util.Enumeration [java.util.Collections]  →  java.util.Collections.list($expr$)


## Arrays

.compareUnsigned : java.util.Arrays.compareUnsigned
	ARRAY [java.util.Arrays]  →  java.util.Arrays.compareUnsigned($expr$, $arg$)

.mismatch : java.util.Arrays.mismatch
	ARRAY [java.util.Arrays]  →  java.util.Arrays.mismatch($expr$, $arg$)

.asList : java.util.Arrays.asList
	ARRAY [java.util.Arrays]  →  java.util.Arrays.asList($expr$)

.parallelPrefix : java.util.Arrays.parallelPrefix
	ARRAY [java.util.Arrays]  →  java.util.Arrays.parallelPrefix($expr$, $arg$)

.parallelSetAll : java.util.Arrays.parallelSetAll
	ARRAY [java.util.Arrays]  →  java.util.Arrays.parallelSetAll($expr$, $arg$)

.equals : java.util.Arrays.equals
	ARRAY [java.util.Arrays]  →  java.util.Arrays.equals($expr$, $arg$)

.deepHashCode : java.util.Arrays.deepHashCode
	ARRAY [java.util.Arrays]  →  java.util.Arrays.deepHashCode($expr$)

.copyOf : java.util.Arrays.copyOf
	ARRAY [java.util.Arrays]  →  java.util.Arrays.copyOf($expr$, $arg$)

.deepEquals : java.util.Arrays.deepEquals
	ARRAY [java.util.Arrays]  →  java.util.Arrays.deepEquals($expr$, $arg$)

.fill : java.util.Arrays.fill
	ARRAY [java.util.Arrays]  →  java.util.Arrays.fill($expr$, $arg$)

.stream : java.util.Arrays.stream
	ARRAY [java.util.Arrays]  →  java.util.Arrays.stream($expr$, $arg$)

.copyOfRange : java.util.Arrays.copyOfRange
	ARRAY [java.util.Arrays]  →  java.util.Arrays.copyOfRange($expr$, $arg$)

.deepToString : java.util.Arrays.deepToString
	ARRAY [java.util.Arrays]  →  java.util.Arrays.deepToString($expr$)

.parallelSort : java.util.Arrays.parallelSort
	ARRAY [java.util.Arrays]  →  java.util.Arrays.parallelSort($expr$, $arg$)

.toString : java.util.Arrays.toString
	ARRAY [java.util.Arrays]  →  java.util.Arrays.toString($expr$)

.setAll : java.util.Arrays.setAll
	ARRAY [java.util.Arrays]  →  java.util.Arrays.setAll($expr$, $arg$)

.sort : java.util.Arrays.sort
	ARRAY [java.util.Arrays]  →  java.util.Arrays.sort($expr$, $arg$)

.binarySearch : java.util.Arrays.binarySearch
	ARRAY [java.util.Arrays]  →  java.util.Arrays.binarySearch($expr$, $arg$)

.compare : java.util.Arrays.compare
	ARRAY [java.util.Arrays]  →  java.util.Arrays.compare($expr$, $arg$)

.spliterator : java.util.Arrays.spliterator
	ARRAY [java.util.Arrays]  →  java.util.Arrays.spliterator($expr$, $arg$)

.hashCode : java.util.Arrays.hashCode
	ARRAY [java.util.Arrays]  →  java.util.Arrays.hashCode($expr$)


## String

.join : java.lang.String.join
	java.lang.CharSequence [java.lang.String]  →  java.lang.String.join($expr$, $arg$)

.copyValueOf : java.lang.String.copyValueOf
	ARRAY [java.lang.String]  →  java.lang.String.copyValueOf($expr$, $arg$)

.valueOf : java.lang.String.valueOf
	FLOAT [java.lang.String]  →  java.lang.String.valueOf($expr$)
	CHAR [java.lang.String]  →  java.lang.String.valueOf($expr$)
	DOUBLE [java.lang.String]  →  java.lang.String.valueOf($expr$)
	INT [java.lang.String]  →  java.lang.String.valueOf($expr$)
	ARRAY [java.lang.String]  →  java.lang.String.valueOf($expr$, $arg$)
	java.lang.Object [java.lang.String]  →  java.lang.String.valueOf($expr$)
	BOOLEAN [java.lang.String]  →  java.lang.String.valueOf($expr$)
	LONG [java.lang.String]  →  java.lang.String.valueOf($expr$)

.format : java.lang.String.format
	java.lang.String [java.lang.String]  →  java.lang.String.format($expr$, $arg$)
	java.util.Locale [java.lang.String]  →  java.lang.String.format($expr$, $arg$)

