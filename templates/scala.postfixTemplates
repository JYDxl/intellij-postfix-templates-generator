## Templates for JYD_XL Custom Postfix Templates ##

## BitUtil

.lastN : org.github.util.BitUtil.lastN
	LONG [org.github.util.BitUtil]  →  BitUtil.lastN($expr$, $arg$)
	INT [org.github.util.BitUtil]  →  BitUtil.lastN($expr$, $arg$)


## BufUtil

.beforeRelease : org.github.util.BufUtil.beforeRelease
	io.netty.buffer.ByteBuf [org.github.util.BufUtil]  →  BufUtil.beforeRelease($expr$, $arg$)


## FuncUtil

.throwing : org.github.util.FuncUtil.throwing
	java.lang.Object [org.github.util.FuncUtil]  →  FuncUtil.throwing()

.map : org.github.util.FuncUtil.map
	java.lang.Object [org.github.util.FuncUtil]  →  FuncUtil.map($expr$, $arg$)

.nonNull : org.github.util.FuncUtil.nonNull
	java.lang.Object [org.github.util.FuncUtil]  →  FuncUtil.nonNull()

.noPass : org.github.util.FuncUtil.noPass
	java.lang.Object [org.github.util.FuncUtil]  →  FuncUtil.noPass()

.optional : org.github.util.FuncUtil.optional
	java.util.function.Function [org.github.util.FuncUtil]  →  FuncUtil.optional($expr$, $arg$)

.stream : org.github.util.FuncUtil.stream
	java.util.Collection [org.github.util.FuncUtil]  →  FuncUtil.stream($expr$)

.pass : org.github.util.FuncUtil.pass
	java.lang.Object [org.github.util.FuncUtil]  →  FuncUtil.pass()


## ObjUtil

.firstOne : org.github.util.ObjUtil.firstOne
	java.util.function.Predicate [org.github.util.ObjUtil]  →  ObjUtil.firstOne($expr$, $arg$)

.firstNonBlank : org.github.util.ObjUtil.firstNonBlank
	scala.Array [org.github.util.ObjUtil]  →  ObjUtil.firstNonBlank($expr$)

.firstNonNull : org.github.util.ObjUtil.firstNonNull
	scala.Array [org.github.util.ObjUtil]  →  ObjUtil.firstNonNull($expr$)


## TreeUtil

.buildTree : org.github.util.tree.TreeUtil.buildTree
	java.util.List [org.github.util.tree.TreeUtil]  →  TreeUtil.buildTree($expr$, $arg$)


## Ascii

.equalsIgnoreCase : com.google.common.base.Ascii.equalsIgnoreCase
	java.lang.CharSequence [com.google.common.base.Ascii]  →  Ascii.equalsIgnoreCase($expr$, $arg$)

.truncate : com.google.common.base.Ascii.truncate
	java.lang.CharSequence [com.google.common.base.Ascii]  →  Ascii.truncate($expr$, $arg$)

.toLowerCase : com.google.common.base.Ascii.toLowerCase
	java.lang.String [com.google.common.base.Ascii]  →  Ascii.toLowerCase($expr$)
	CHAR [com.google.common.base.Ascii]  →  Ascii.toLowerCase($expr$)
	java.lang.CharSequence [com.google.common.base.Ascii]  →  Ascii.toLowerCase($expr$)

.isLowerCase : com.google.common.base.Ascii.isLowerCase
	CHAR [com.google.common.base.Ascii]  →  Ascii.isLowerCase($expr$)

.isUpperCase : com.google.common.base.Ascii.isUpperCase
	CHAR [com.google.common.base.Ascii]  →  Ascii.isUpperCase($expr$)

.toUpperCase : com.google.common.base.Ascii.toUpperCase
	java.lang.String [com.google.common.base.Ascii]  →  Ascii.toUpperCase($expr$)
	CHAR [com.google.common.base.Ascii]  →  Ascii.toUpperCase($expr$)
	java.lang.CharSequence [com.google.common.base.Ascii]  →  Ascii.toUpperCase($expr$)


## CharMatcher

.forPredicate : com.google.common.base.CharMatcher.forPredicate
	com.google.common.base.Predicate [com.google.common.base.CharMatcher]  →  CharMatcher.forPredicate($expr$)

.any : com.google.common.base.CharMatcher.any
	java.lang.Object [com.google.common.base.CharMatcher]  →  CharMatcher.any()

.is : com.google.common.base.CharMatcher.is
	CHAR [com.google.common.base.CharMatcher]  →  CharMatcher.is($expr$)

.javaIsoControl : com.google.common.base.CharMatcher.javaIsoControl
	java.lang.Object [com.google.common.base.CharMatcher]  →  CharMatcher.javaIsoControl()

.anyOf : com.google.common.base.CharMatcher.anyOf
	java.lang.CharSequence [com.google.common.base.CharMatcher]  →  CharMatcher.anyOf($expr$)

.breakingWhitespace : com.google.common.base.CharMatcher.breakingWhitespace
	java.lang.Object [com.google.common.base.CharMatcher]  →  CharMatcher.breakingWhitespace()

.ascii : com.google.common.base.CharMatcher.ascii
	java.lang.Object [com.google.common.base.CharMatcher]  →  CharMatcher.ascii()

.noneOf : com.google.common.base.CharMatcher.noneOf
	java.lang.CharSequence [com.google.common.base.CharMatcher]  →  CharMatcher.noneOf($expr$)

.isNot : com.google.common.base.CharMatcher.isNot
	CHAR [com.google.common.base.CharMatcher]  →  CharMatcher.isNot($expr$)

.whitespace : com.google.common.base.CharMatcher.whitespace
	java.lang.Object [com.google.common.base.CharMatcher]  →  CharMatcher.whitespace()

.none : com.google.common.base.CharMatcher.none
	java.lang.Object [com.google.common.base.CharMatcher]  →  CharMatcher.none()

.inRange : com.google.common.base.CharMatcher.inRange
	CHAR [com.google.common.base.CharMatcher]  →  CharMatcher.inRange($expr$, $arg$)


## Converter

.from : com.google.common.base.Converter.from
	com.google.common.base.Function [com.google.common.base.Converter]  →  Converter.from($expr$, $arg$)

.identity : com.google.common.base.Converter.identity
	java.lang.Object [com.google.common.base.Converter]  →  Converter.identity()


## Defaults

.defaultValue : com.google.common.base.Defaults.defaultValue
	java.lang.Class [com.google.common.base.Defaults]  →  Defaults.defaultValue($expr$)


## Enums

.stringConverter : com.google.common.base.Enums.stringConverter
	java.lang.Class [com.google.common.base.Enums]  →  Enums.stringConverter($expr$)

.getIfPresent : com.google.common.base.Enums.getIfPresent
	java.lang.Class [com.google.common.base.Enums]  →  Enums.getIfPresent($expr$, $arg$)

.getField : com.google.common.base.Enums.getField
	java.lang.Enum [com.google.common.base.Enums]  →  Enums.getField($expr$)


## Equivalence

.identity : com.google.common.base.Equivalence.identity
	java.lang.Object [com.google.common.base.Equivalence]  →  Equivalence.identity()

.equals : com.google.common.base.Equivalence.equals
	java.lang.Object [com.google.common.base.Equivalence]  →  Equivalence.equals()


## FinalizablePhantomReference

.reachabilityFence : com.google.common.base.FinalizablePhantomReference.reachabilityFence
	java.lang.Object [com.google.common.base.FinalizablePhantomReference]  →  FinalizablePhantomReference.reachabilityFence($expr$)


## FinalizableSoftReference

.reachabilityFence : com.google.common.base.FinalizableSoftReference.reachabilityFence
	java.lang.Object [com.google.common.base.FinalizableSoftReference]  →  FinalizableSoftReference.reachabilityFence($expr$)


## FinalizableWeakReference

.reachabilityFence : com.google.common.base.FinalizableWeakReference.reachabilityFence
	java.lang.Object [com.google.common.base.FinalizableWeakReference]  →  FinalizableWeakReference.reachabilityFence($expr$)


## Functions

.constant : com.google.common.base.Functions.constant
	java.lang.Object [com.google.common.base.Functions]  →  Functions.constant($expr$)

.forPredicate : com.google.common.base.Functions.forPredicate
	com.google.common.base.Predicate [com.google.common.base.Functions]  →  Functions.forPredicate($expr$)

.compose : com.google.common.base.Functions.compose
	com.google.common.base.Function [com.google.common.base.Functions]  →  Functions.compose($expr$, $arg$)

.forMap : com.google.common.base.Functions.forMap
	java.util.Map [com.google.common.base.Functions]  →  Functions.forMap($expr$, $arg$)

.forSupplier : com.google.common.base.Functions.forSupplier
	com.google.common.base.Supplier [com.google.common.base.Functions]  →  Functions.forSupplier($expr$)

.toStringFunction : com.google.common.base.Functions.toStringFunction
	java.lang.Object [com.google.common.base.Functions]  →  Functions.toStringFunction()

.identity : com.google.common.base.Functions.identity
	java.lang.Object [com.google.common.base.Functions]  →  Functions.identity()


## Joiner

.on : com.google.common.base.Joiner.on
	java.lang.String [com.google.common.base.Joiner]  →  Joiner.on($expr$)
	CHAR [com.google.common.base.Joiner]  →  Joiner.on($expr$)


## MoreObjects

.toStringHelper : com.google.common.base.MoreObjects.toStringHelper
	java.lang.String [com.google.common.base.MoreObjects]  →  MoreObjects.toStringHelper($expr$)
	java.lang.Class [com.google.common.base.MoreObjects]  →  MoreObjects.toStringHelper($expr$)
	java.lang.Object [com.google.common.base.MoreObjects]  →  MoreObjects.toStringHelper($expr$)

.firstNonNull : com.google.common.base.MoreObjects.firstNonNull
	java.lang.Object [com.google.common.base.MoreObjects]  →  MoreObjects.firstNonNull($expr$, $arg$)


## Objects

.equal : com.google.common.base.Objects.equal
	java.lang.Object [com.google.common.base.Objects]  →  Objects.equal($expr$, $arg$)

.hashCode : com.google.common.base.Objects.hashCode
	scala.Array [com.google.common.base.Objects]  →  Objects.hashCode($expr$)


## Optional

.absent : com.google.common.base.Optional.absent
	java.lang.Object [com.google.common.base.Optional]  →  Optional.absent()

.presentInstances : com.google.common.base.Optional.presentInstances
	java.lang.Iterable [com.google.common.base.Optional]  →  Optional.presentInstances($expr$)

.toJavaUtil : com.google.common.base.Optional.toJavaUtil
	com.google.common.base.Optional [com.google.common.base.Optional]  →  Optional.toJavaUtil($expr$)

.fromJavaUtil : com.google.common.base.Optional.fromJavaUtil
	java.util.Optional [com.google.common.base.Optional]  →  Optional.fromJavaUtil($expr$)

.fromNullable : com.google.common.base.Optional.fromNullable
	java.lang.Object [com.google.common.base.Optional]  →  Optional.fromNullable($expr$)

.of : com.google.common.base.Optional.of
	java.lang.Object [com.google.common.base.Optional]  →  Optional.of($expr$)


## Preconditions

.checkArgument : com.google.common.base.Preconditions.checkArgument
	BOOLEAN [com.google.common.base.Preconditions]  →  Preconditions.checkArgument($expr$, $arg$)

.checkElementIndex : com.google.common.base.Preconditions.checkElementIndex
	INT [com.google.common.base.Preconditions]  →  Preconditions.checkElementIndex($expr$, $arg$)

.checkState : com.google.common.base.Preconditions.checkState
	BOOLEAN [com.google.common.base.Preconditions]  →  Preconditions.checkState($expr$, $arg$)

.checkNotNull : com.google.common.base.Preconditions.checkNotNull
	java.lang.Object [com.google.common.base.Preconditions]  →  Preconditions.checkNotNull($expr$, $arg$)

.checkPositionIndexes : com.google.common.base.Preconditions.checkPositionIndexes
	INT [com.google.common.base.Preconditions]  →  Preconditions.checkPositionIndexes($expr$, $arg$)

.checkPositionIndex : com.google.common.base.Preconditions.checkPositionIndex
	INT [com.google.common.base.Preconditions]  →  Preconditions.checkPositionIndex($expr$, $arg$)


## Predicates

.in : com.google.common.base.Predicates.in
	java.util.Collection [com.google.common.base.Predicates]  →  Predicates.in($expr$)

.instanceOf : com.google.common.base.Predicates.instanceOf
	java.lang.Class [com.google.common.base.Predicates]  →  Predicates.instanceOf($expr$)

.compose : com.google.common.base.Predicates.compose
	com.google.common.base.Predicate [com.google.common.base.Predicates]  →  Predicates.compose($expr$, $arg$)

.isNull : com.google.common.base.Predicates.isNull
	java.lang.Object [com.google.common.base.Predicates]  →  Predicates.isNull()

.subtypeOf : com.google.common.base.Predicates.subtypeOf
	java.lang.Class [com.google.common.base.Predicates]  →  Predicates.subtypeOf($expr$)

.or : com.google.common.base.Predicates.or
	scala.Array [com.google.common.base.Predicates]  →  Predicates.or($expr$)
	com.google.common.base.Predicate [com.google.common.base.Predicates]  →  Predicates.or($expr$, $arg$)
	java.lang.Iterable [com.google.common.base.Predicates]  →  Predicates.or($expr$)

.notNull : com.google.common.base.Predicates.notNull
	java.lang.Object [com.google.common.base.Predicates]  →  Predicates.notNull()

.not : com.google.common.base.Predicates.not
	com.google.common.base.Predicate [com.google.common.base.Predicates]  →  Predicates.not($expr$)

.alwaysTrue : com.google.common.base.Predicates.alwaysTrue
	java.lang.Object [com.google.common.base.Predicates]  →  Predicates.alwaysTrue()

.equalTo : com.google.common.base.Predicates.equalTo
	java.lang.Object [com.google.common.base.Predicates]  →  Predicates.equalTo($expr$)

.containsPattern : com.google.common.base.Predicates.containsPattern
	java.lang.String [com.google.common.base.Predicates]  →  Predicates.containsPattern($expr$)

.contains : com.google.common.base.Predicates.contains
	java.util.regex.Pattern [com.google.common.base.Predicates]  →  Predicates.contains($expr$)

.alwaysFalse : com.google.common.base.Predicates.alwaysFalse
	java.lang.Object [com.google.common.base.Predicates]  →  Predicates.alwaysFalse()

.and : com.google.common.base.Predicates.and
	scala.Array [com.google.common.base.Predicates]  →  Predicates.and($expr$)
	com.google.common.base.Predicate [com.google.common.base.Predicates]  →  Predicates.and($expr$, $arg$)
	java.lang.Iterable [com.google.common.base.Predicates]  →  Predicates.and($expr$)


## Splitter

.on : com.google.common.base.Splitter.on
	java.lang.String [com.google.common.base.Splitter]  →  Splitter.on($expr$)
	com.google.common.base.CharMatcher [com.google.common.base.Splitter]  →  Splitter.on($expr$)
	CHAR [com.google.common.base.Splitter]  →  Splitter.on($expr$)
	java.util.regex.Pattern [com.google.common.base.Splitter]  →  Splitter.on($expr$)

.fixedLength : com.google.common.base.Splitter.fixedLength
	INT [com.google.common.base.Splitter]  →  Splitter.fixedLength($expr$)

.onPattern : com.google.common.base.Splitter.onPattern
	java.lang.String [com.google.common.base.Splitter]  →  Splitter.onPattern($expr$)


## Stopwatch

.createUnstarted : com.google.common.base.Stopwatch.createUnstarted
	com.google.common.base.Ticker [com.google.common.base.Stopwatch]  →  Stopwatch.createUnstarted($expr$)
	java.lang.Object [com.google.common.base.Stopwatch]  →  Stopwatch.createUnstarted()

.createStarted : com.google.common.base.Stopwatch.createStarted
	com.google.common.base.Ticker [com.google.common.base.Stopwatch]  →  Stopwatch.createStarted($expr$)
	java.lang.Object [com.google.common.base.Stopwatch]  →  Stopwatch.createStarted()


## Strings

.padEnd : com.google.common.base.Strings.padEnd
	java.lang.String [com.google.common.base.Strings]  →  Strings.padEnd($expr$, $arg$)

.commonPrefix : com.google.common.base.Strings.commonPrefix
	java.lang.CharSequence [com.google.common.base.Strings]  →  Strings.commonPrefix($expr$, $arg$)

.commonSuffix : com.google.common.base.Strings.commonSuffix
	java.lang.CharSequence [com.google.common.base.Strings]  →  Strings.commonSuffix($expr$, $arg$)

.lenientFormat : com.google.common.base.Strings.lenientFormat
	java.lang.String [com.google.common.base.Strings]  →  Strings.lenientFormat($expr$, $arg$)

.isNullOrEmpty : com.google.common.base.Strings.isNullOrEmpty
	java.lang.String [com.google.common.base.Strings]  →  Strings.isNullOrEmpty($expr$)

.repeat : com.google.common.base.Strings.repeat
	java.lang.String [com.google.common.base.Strings]  →  Strings.repeat($expr$, $arg$)

.nullToEmpty : com.google.common.base.Strings.nullToEmpty
	java.lang.String [com.google.common.base.Strings]  →  Strings.nullToEmpty($expr$)

.padStart : com.google.common.base.Strings.padStart
	java.lang.String [com.google.common.base.Strings]  →  Strings.padStart($expr$, $arg$)

.emptyToNull : com.google.common.base.Strings.emptyToNull
	java.lang.String [com.google.common.base.Strings]  →  Strings.emptyToNull($expr$)


## Suppliers

.compose : com.google.common.base.Suppliers.compose
	com.google.common.base.Function [com.google.common.base.Suppliers]  →  Suppliers.compose($expr$, $arg$)

.ofInstance : com.google.common.base.Suppliers.ofInstance
	java.lang.Object [com.google.common.base.Suppliers]  →  Suppliers.ofInstance($expr$)

.synchronizedSupplier : com.google.common.base.Suppliers.synchronizedSupplier
	com.google.common.base.Supplier [com.google.common.base.Suppliers]  →  Suppliers.synchronizedSupplier($expr$)

.supplierFunction : com.google.common.base.Suppliers.supplierFunction
	java.lang.Object [com.google.common.base.Suppliers]  →  Suppliers.supplierFunction()

.memoizeWithExpiration : com.google.common.base.Suppliers.memoizeWithExpiration
	com.google.common.base.Supplier [com.google.common.base.Suppliers]  →  Suppliers.memoizeWithExpiration($expr$, $arg$)

.memoize : com.google.common.base.Suppliers.memoize
	com.google.common.base.Supplier [com.google.common.base.Suppliers]  →  Suppliers.memoize($expr$)


## Throwables

.getCausalChain : com.google.common.base.Throwables.getCausalChain
	java.lang.Throwable [com.google.common.base.Throwables]  →  Throwables.getCausalChain($expr$)

.lazyStackTrace : com.google.common.base.Throwables.lazyStackTrace
	java.lang.Throwable [com.google.common.base.Throwables]  →  Throwables.lazyStackTrace($expr$)

.propagateIfPossible : com.google.common.base.Throwables.propagateIfPossible
	java.lang.Throwable [com.google.common.base.Throwables]  →  Throwables.propagateIfPossible($expr$, $arg$)

.getCauseAs : com.google.common.base.Throwables.getCauseAs
	java.lang.Throwable [com.google.common.base.Throwables]  →  Throwables.getCauseAs($expr$, $arg$)

.lazyStackTraceIsLazy : com.google.common.base.Throwables.lazyStackTraceIsLazy
	java.lang.Object [com.google.common.base.Throwables]  →  Throwables.lazyStackTraceIsLazy()

.throwIfInstanceOf : com.google.common.base.Throwables.throwIfInstanceOf
	java.lang.Throwable [com.google.common.base.Throwables]  →  Throwables.throwIfInstanceOf($expr$, $arg$)

.getRootCause : com.google.common.base.Throwables.getRootCause
	java.lang.Throwable [com.google.common.base.Throwables]  →  Throwables.getRootCause($expr$)

.throwIfUnchecked : com.google.common.base.Throwables.throwIfUnchecked
	java.lang.Throwable [com.google.common.base.Throwables]  →  Throwables.throwIfUnchecked($expr$)

.getStackTraceAsString : com.google.common.base.Throwables.getStackTraceAsString
	java.lang.Throwable [com.google.common.base.Throwables]  →  Throwables.getStackTraceAsString($expr$)


## Ticker

.systemTicker : com.google.common.base.Ticker.systemTicker
	java.lang.Object [com.google.common.base.Ticker]  →  Ticker.systemTicker()


## Utf8

.encodedLength : com.google.common.base.Utf8.encodedLength
	java.lang.CharSequence [com.google.common.base.Utf8]  →  Utf8.encodedLength($expr$)

.isWellFormed : com.google.common.base.Utf8.isWellFormed
	scala.Array [com.google.common.base.Utf8]  →  Utf8.isWellFormed($expr$, $arg$)


## Verify

.verify : com.google.common.base.Verify.verify
	BOOLEAN [com.google.common.base.Verify]  →  Verify.verify($expr$, $arg$)

.verifyNotNull : com.google.common.base.Verify.verifyNotNull
	java.lang.Object [com.google.common.base.Verify]  →  Verify.verifyNotNull($expr$, $arg$)


## Finalizer

.startFinalizer : com.google.common.base.internal.Finalizer.startFinalizer
	java.lang.Class [com.google.common.base.internal.Finalizer]  →  Finalizer.startFinalizer($expr$, $arg$)


## CacheBuilder

.newBuilder : com.google.common.cache.CacheBuilder.newBuilder
	java.lang.Object [com.google.common.cache.CacheBuilder]  →  CacheBuilder.newBuilder()

.from : com.google.common.cache.CacheBuilder.from
	java.lang.String [com.google.common.cache.CacheBuilder]  →  CacheBuilder.from($expr$)
	com.google.common.cache.CacheBuilderSpec [com.google.common.cache.CacheBuilder]  →  CacheBuilder.from($expr$)


## CacheBuilderSpec

.disableCaching : com.google.common.cache.CacheBuilderSpec.disableCaching
	java.lang.Object [com.google.common.cache.CacheBuilderSpec]  →  CacheBuilderSpec.disableCaching()

.parse : com.google.common.cache.CacheBuilderSpec.parse
	java.lang.String [com.google.common.cache.CacheBuilderSpec]  →  CacheBuilderSpec.parse($expr$)


## CacheLoader

.from : com.google.common.cache.CacheLoader.from
	com.google.common.base.Function [com.google.common.cache.CacheLoader]  →  CacheLoader.from($expr$)
	com.google.common.base.Supplier [com.google.common.cache.CacheLoader]  →  CacheLoader.from($expr$)

.asyncReloading : com.google.common.cache.CacheLoader.asyncReloading
	com.google.common.cache.CacheLoader [com.google.common.cache.CacheLoader]  →  CacheLoader.asyncReloading($expr$, $arg$)


## RemovalListeners

.asynchronous : com.google.common.cache.RemovalListeners.asynchronous
	com.google.common.cache.RemovalListener [com.google.common.cache.RemovalListeners]  →  RemovalListeners.asynchronous($expr$, $arg$)


## RemovalNotification

.create : com.google.common.cache.RemovalNotification.create
	java.lang.Object [com.google.common.cache.RemovalNotification]  →  RemovalNotification.create($expr$, $arg$)


## ArrayListMultimap

.create : com.google.common.collect.ArrayListMultimap.create
	INT [com.google.common.collect.ArrayListMultimap]  →  ArrayListMultimap.create($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.ArrayListMultimap]  →  ArrayListMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.ArrayListMultimap]  →  ArrayListMultimap.create()


## ArrayTable

.create : com.google.common.collect.ArrayTable.create
	com.google.common.collect.Table [com.google.common.collect.ArrayTable]  →  ArrayTable.create($expr$)
	java.lang.Iterable [com.google.common.collect.ArrayTable]  →  ArrayTable.create($expr$, $arg$)


## Collections2

.orderedPermutations : com.google.common.collect.Collections2.orderedPermutations
	java.lang.Iterable [com.google.common.collect.Collections2]  →  Collections2.orderedPermutations($expr$, $arg$)

.filter : com.google.common.collect.Collections2.filter
	java.util.Collection [com.google.common.collect.Collections2]  →  Collections2.filter($expr$, $arg$)

.transform : com.google.common.collect.Collections2.transform
	java.util.Collection [com.google.common.collect.Collections2]  →  Collections2.transform($expr$, $arg$)

.permutations : com.google.common.collect.Collections2.permutations
	java.util.Collection [com.google.common.collect.Collections2]  →  Collections2.permutations($expr$)


## Comparators

.lexicographical : com.google.common.collect.Comparators.lexicographical
	java.util.Comparator [com.google.common.collect.Comparators]  →  Comparators.lexicographical($expr$)

.min : com.google.common.collect.Comparators.min
	java.lang.Comparable [com.google.common.collect.Comparators]  →  Comparators.min($expr$, $arg$)
	java.lang.Object [com.google.common.collect.Comparators]  →  Comparators.min($expr$, $arg$)

.emptiesLast : com.google.common.collect.Comparators.emptiesLast
	java.util.Comparator [com.google.common.collect.Comparators]  →  Comparators.emptiesLast($expr$)

.isInStrictOrder : com.google.common.collect.Comparators.isInStrictOrder
	java.lang.Iterable [com.google.common.collect.Comparators]  →  Comparators.isInStrictOrder($expr$, $arg$)

.isInOrder : com.google.common.collect.Comparators.isInOrder
	java.lang.Iterable [com.google.common.collect.Comparators]  →  Comparators.isInOrder($expr$, $arg$)

.least : com.google.common.collect.Comparators.least
	INT [com.google.common.collect.Comparators]  →  Comparators.least($expr$, $arg$)

.max : com.google.common.collect.Comparators.max
	java.lang.Comparable [com.google.common.collect.Comparators]  →  Comparators.max($expr$, $arg$)
	java.lang.Object [com.google.common.collect.Comparators]  →  Comparators.max($expr$, $arg$)

.greatest : com.google.common.collect.Comparators.greatest
	INT [com.google.common.collect.Comparators]  →  Comparators.greatest($expr$, $arg$)

.emptiesFirst : com.google.common.collect.Comparators.emptiesFirst
	java.util.Comparator [com.google.common.collect.Comparators]  →  Comparators.emptiesFirst($expr$)


## ComparisonChain

.start : com.google.common.collect.ComparisonChain.start
	java.lang.Object [com.google.common.collect.ComparisonChain]  →  ComparisonChain.start()


## ConcurrentHashMultiset

.create : com.google.common.collect.ConcurrentHashMultiset.create
	java.util.concurrent.ConcurrentMap [com.google.common.collect.ConcurrentHashMultiset]  →  ConcurrentHashMultiset.create($expr$)
	java.lang.Iterable [com.google.common.collect.ConcurrentHashMultiset]  →  ConcurrentHashMultiset.create($expr$)
	java.lang.Object [com.google.common.collect.ConcurrentHashMultiset]  →  ConcurrentHashMultiset.create()


## ContiguousSet

.reverseOrder : com.google.common.collect.ContiguousSet.reverseOrder
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  ContiguousSet.reverseOrder()

.closed : com.google.common.collect.ContiguousSet.closed
	LONG [com.google.common.collect.ContiguousSet]  →  ContiguousSet.closed($expr$, $arg$)
	INT [com.google.common.collect.ContiguousSet]  →  ContiguousSet.closed($expr$, $arg$)

.copyOfSorted : com.google.common.collect.ContiguousSet.copyOfSorted
	java.util.SortedSet [com.google.common.collect.ContiguousSet]  →  ContiguousSet.copyOfSorted($expr$)

.create : com.google.common.collect.ContiguousSet.create
	com.google.common.collect.Range [com.google.common.collect.ContiguousSet]  →  ContiguousSet.create($expr$, $arg$)

.builder : com.google.common.collect.ContiguousSet.builder
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  ContiguousSet.builder()

.copyOf : com.google.common.collect.ContiguousSet.copyOf
	java.util.Iterator [com.google.common.collect.ContiguousSet]  →  ContiguousSet.copyOf($expr$)
	java.util.Comparator [com.google.common.collect.ContiguousSet]  →  ContiguousSet.copyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ContiguousSet]  →  ContiguousSet.copyOf($expr$)
	java.util.Collection [com.google.common.collect.ContiguousSet]  →  ContiguousSet.copyOf($expr$)
	scala.Array [com.google.common.collect.ContiguousSet]  →  ContiguousSet.copyOf($expr$)

.naturalOrder : com.google.common.collect.ContiguousSet.naturalOrder
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  ContiguousSet.naturalOrder()

.orderedBy : com.google.common.collect.ContiguousSet.orderedBy
	java.util.Comparator [com.google.common.collect.ContiguousSet]  →  ContiguousSet.orderedBy($expr$)

.builderWithExpectedSize : com.google.common.collect.ContiguousSet.builderWithExpectedSize
	INT [com.google.common.collect.ContiguousSet]  →  ContiguousSet.builderWithExpectedSize($expr$)

.closedOpen : com.google.common.collect.ContiguousSet.closedOpen
	LONG [com.google.common.collect.ContiguousSet]  →  ContiguousSet.closedOpen($expr$, $arg$)
	INT [com.google.common.collect.ContiguousSet]  →  ContiguousSet.closedOpen($expr$, $arg$)

.of : com.google.common.collect.ContiguousSet.of
	java.lang.Comparable [com.google.common.collect.ContiguousSet]  →  ContiguousSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  ContiguousSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ContiguousSet]  →  ContiguousSet.of()

.toImmutableSortedSet : com.google.common.collect.ContiguousSet.toImmutableSortedSet
	java.util.Comparator [com.google.common.collect.ContiguousSet]  →  ContiguousSet.toImmutableSortedSet($expr$)


## DiscreteDomain

.integers : com.google.common.collect.DiscreteDomain.integers
	java.lang.Object [com.google.common.collect.DiscreteDomain]  →  DiscreteDomain.integers()

.bigIntegers : com.google.common.collect.DiscreteDomain.bigIntegers
	java.lang.Object [com.google.common.collect.DiscreteDomain]  →  DiscreteDomain.bigIntegers()

.longs : com.google.common.collect.DiscreteDomain.longs
	java.lang.Object [com.google.common.collect.DiscreteDomain]  →  DiscreteDomain.longs()


## EnumBiMap

.create : com.google.common.collect.EnumBiMap.create
	java.util.Map [com.google.common.collect.EnumBiMap]  →  EnumBiMap.create($expr$)
	java.lang.Class [com.google.common.collect.EnumBiMap]  →  EnumBiMap.create($expr$, $arg$)


## EnumHashBiMap

.create : com.google.common.collect.EnumHashBiMap.create
	java.util.Map [com.google.common.collect.EnumHashBiMap]  →  EnumHashBiMap.create($expr$)
	java.lang.Class [com.google.common.collect.EnumHashBiMap]  →  EnumHashBiMap.create($expr$)


## EnumMultiset

.create : com.google.common.collect.EnumMultiset.create
	java.lang.Iterable [com.google.common.collect.EnumMultiset]  →  EnumMultiset.create($expr$, $arg$)
	java.lang.Class [com.google.common.collect.EnumMultiset]  →  EnumMultiset.create($expr$)


## EvictingQueue

.create : com.google.common.collect.EvictingQueue.create
	INT [com.google.common.collect.EvictingQueue]  →  EvictingQueue.create($expr$)


## FluentIterable

.of : com.google.common.collect.FluentIterable.of
	java.lang.Object [com.google.common.collect.FluentIterable]  →  FluentIterable.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.FluentIterable]  →  FluentIterable.of()

.from : com.google.common.collect.FluentIterable.from
	scala.Array [com.google.common.collect.FluentIterable]  →  FluentIterable.from($expr$)
	java.lang.Iterable [com.google.common.collect.FluentIterable]  →  FluentIterable.from($expr$)

.concat : com.google.common.collect.FluentIterable.concat
	scala.Array [com.google.common.collect.FluentIterable]  →  FluentIterable.concat($expr$)
	java.lang.Iterable [com.google.common.collect.FluentIterable]  →  FluentIterable.concat($expr$, $arg$)


## HashBasedTable

.create : com.google.common.collect.HashBasedTable.create
	com.google.common.collect.Table [com.google.common.collect.HashBasedTable]  →  HashBasedTable.create($expr$)
	INT [com.google.common.collect.HashBasedTable]  →  HashBasedTable.create($expr$, $arg$)
	java.lang.Object [com.google.common.collect.HashBasedTable]  →  HashBasedTable.create()


## HashBiMap

.create : com.google.common.collect.HashBiMap.create
	java.util.Map [com.google.common.collect.HashBiMap]  →  HashBiMap.create($expr$)
	INT [com.google.common.collect.HashBiMap]  →  HashBiMap.create($expr$)
	java.lang.Object [com.google.common.collect.HashBiMap]  →  HashBiMap.create()


## HashMultimap

.create : com.google.common.collect.HashMultimap.create
	INT [com.google.common.collect.HashMultimap]  →  HashMultimap.create($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.HashMultimap]  →  HashMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.HashMultimap]  →  HashMultimap.create()


## HashMultiset

.create : com.google.common.collect.HashMultiset.create
	java.lang.Iterable [com.google.common.collect.HashMultiset]  →  HashMultiset.create($expr$)
	INT [com.google.common.collect.HashMultiset]  →  HashMultiset.create($expr$)
	java.lang.Object [com.google.common.collect.HashMultiset]  →  HashMultiset.create()


## ImmutableBiMap

.builder : com.google.common.collect.ImmutableBiMap.builder
	java.lang.Object [com.google.common.collect.ImmutableBiMap]  →  ImmutableBiMap.builder()

.toImmutableBiMap : com.google.common.collect.ImmutableBiMap.toImmutableBiMap
	java.util.function.Function [com.google.common.collect.ImmutableBiMap]  →  ImmutableBiMap.toImmutableBiMap($expr$, $arg$)

.copyOf : com.google.common.collect.ImmutableBiMap.copyOf
	java.util.Map [com.google.common.collect.ImmutableBiMap]  →  ImmutableBiMap.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableBiMap]  →  ImmutableBiMap.copyOf($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableBiMap.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableBiMap]  →  ImmutableBiMap.builderWithExpectedSize($expr$)

.ofEntries : com.google.common.collect.ImmutableBiMap.ofEntries
	scala.Array [com.google.common.collect.ImmutableBiMap]  →  ImmutableBiMap.ofEntries($expr$)

.of : com.google.common.collect.ImmutableBiMap.of
	java.lang.Object [com.google.common.collect.ImmutableBiMap]  →  ImmutableBiMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableBiMap]  →  ImmutableBiMap.of()


## ImmutableClassToInstanceMap

.builder : com.google.common.collect.ImmutableClassToInstanceMap.builder
	java.lang.Object [com.google.common.collect.ImmutableClassToInstanceMap]  →  ImmutableClassToInstanceMap.builder()

.of : com.google.common.collect.ImmutableClassToInstanceMap.of
	java.lang.Class [com.google.common.collect.ImmutableClassToInstanceMap]  →  ImmutableClassToInstanceMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableClassToInstanceMap]  →  ImmutableClassToInstanceMap.of()

.copyOf : com.google.common.collect.ImmutableClassToInstanceMap.copyOf
	java.util.Map [com.google.common.collect.ImmutableClassToInstanceMap]  →  ImmutableClassToInstanceMap.copyOf($expr$)


## ImmutableList

.builder : com.google.common.collect.ImmutableList.builder
	java.lang.Object [com.google.common.collect.ImmutableList]  →  ImmutableList.builder()

.sortedCopyOf : com.google.common.collect.ImmutableList.sortedCopyOf
	java.util.Comparator [com.google.common.collect.ImmutableList]  →  ImmutableList.sortedCopyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ImmutableList]  →  ImmutableList.sortedCopyOf($expr$)

.copyOf : com.google.common.collect.ImmutableList.copyOf
	java.util.Collection [com.google.common.collect.ImmutableList]  →  ImmutableList.copyOf($expr$)
	scala.Array [com.google.common.collect.ImmutableList]  →  ImmutableList.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableList]  →  ImmutableList.copyOf($expr$)
	java.util.Iterator [com.google.common.collect.ImmutableList]  →  ImmutableList.copyOf($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableList.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableList]  →  ImmutableList.builderWithExpectedSize($expr$)

.toImmutableList : com.google.common.collect.ImmutableList.toImmutableList
	java.lang.Object [com.google.common.collect.ImmutableList]  →  ImmutableList.toImmutableList()

.of : com.google.common.collect.ImmutableList.of
	java.lang.Object [com.google.common.collect.ImmutableList]  →  ImmutableList.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableList]  →  ImmutableList.of()


## ImmutableListMultimap

.toImmutableListMultimap : com.google.common.collect.ImmutableListMultimap.toImmutableListMultimap
	java.util.function.Function [com.google.common.collect.ImmutableListMultimap]  →  ImmutableListMultimap.toImmutableListMultimap($expr$, $arg$)

.builder : com.google.common.collect.ImmutableListMultimap.builder
	java.lang.Object [com.google.common.collect.ImmutableListMultimap]  →  ImmutableListMultimap.builder()

.copyOf : com.google.common.collect.ImmutableListMultimap.copyOf
	java.lang.Iterable [com.google.common.collect.ImmutableListMultimap]  →  ImmutableListMultimap.copyOf($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.ImmutableListMultimap]  →  ImmutableListMultimap.copyOf($expr$)

.flatteningToImmutableListMultimap : com.google.common.collect.ImmutableListMultimap.flatteningToImmutableListMultimap
	java.util.function.Function [com.google.common.collect.ImmutableListMultimap]  →  ImmutableListMultimap.flatteningToImmutableListMultimap($expr$, $arg$)

.of : com.google.common.collect.ImmutableListMultimap.of
	java.lang.Object [com.google.common.collect.ImmutableListMultimap]  →  ImmutableListMultimap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableListMultimap]  →  ImmutableListMultimap.of()


## ImmutableMap

.toImmutableMap : com.google.common.collect.ImmutableMap.toImmutableMap
	java.util.function.Function [com.google.common.collect.ImmutableMap]  →  ImmutableMap.toImmutableMap($expr$, $arg$)

.builder : com.google.common.collect.ImmutableMap.builder
	java.lang.Object [com.google.common.collect.ImmutableMap]  →  ImmutableMap.builder()

.copyOf : com.google.common.collect.ImmutableMap.copyOf
	java.util.Map [com.google.common.collect.ImmutableMap]  →  ImmutableMap.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableMap]  →  ImmutableMap.copyOf($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableMap.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableMap]  →  ImmutableMap.builderWithExpectedSize($expr$)

.ofEntries : com.google.common.collect.ImmutableMap.ofEntries
	scala.Array [com.google.common.collect.ImmutableMap]  →  ImmutableMap.ofEntries($expr$)

.of : com.google.common.collect.ImmutableMap.of
	java.lang.Object [com.google.common.collect.ImmutableMap]  →  ImmutableMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableMap]  →  ImmutableMap.of()


## ImmutableMultimap

.builder : com.google.common.collect.ImmutableMultimap.builder
	java.lang.Object [com.google.common.collect.ImmutableMultimap]  →  ImmutableMultimap.builder()

.of : com.google.common.collect.ImmutableMultimap.of
	java.lang.Object [com.google.common.collect.ImmutableMultimap]  →  ImmutableMultimap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableMultimap]  →  ImmutableMultimap.of()

.copyOf : com.google.common.collect.ImmutableMultimap.copyOf
	java.lang.Iterable [com.google.common.collect.ImmutableMultimap]  →  ImmutableMultimap.copyOf($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.ImmutableMultimap]  →  ImmutableMultimap.copyOf($expr$)


## ImmutableMultiset

.builder : com.google.common.collect.ImmutableMultiset.builder
	java.lang.Object [com.google.common.collect.ImmutableMultiset]  →  ImmutableMultiset.builder()

.toImmutableMultiset : com.google.common.collect.ImmutableMultiset.toImmutableMultiset
	java.util.function.Function [com.google.common.collect.ImmutableMultiset]  →  ImmutableMultiset.toImmutableMultiset($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableMultiset]  →  ImmutableMultiset.toImmutableMultiset()

.of : com.google.common.collect.ImmutableMultiset.of
	java.lang.Object [com.google.common.collect.ImmutableMultiset]  →  ImmutableMultiset.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableMultiset]  →  ImmutableMultiset.of()

.copyOf : com.google.common.collect.ImmutableMultiset.copyOf
	scala.Array [com.google.common.collect.ImmutableMultiset]  →  ImmutableMultiset.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableMultiset]  →  ImmutableMultiset.copyOf($expr$)
	java.util.Iterator [com.google.common.collect.ImmutableMultiset]  →  ImmutableMultiset.copyOf($expr$)


## ImmutableRangeMap

.builder : com.google.common.collect.ImmutableRangeMap.builder
	java.lang.Object [com.google.common.collect.ImmutableRangeMap]  →  ImmutableRangeMap.builder()

.of : com.google.common.collect.ImmutableRangeMap.of
	com.google.common.collect.Range [com.google.common.collect.ImmutableRangeMap]  →  ImmutableRangeMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableRangeMap]  →  ImmutableRangeMap.of()

.copyOf : com.google.common.collect.ImmutableRangeMap.copyOf
	com.google.common.collect.RangeMap [com.google.common.collect.ImmutableRangeMap]  →  ImmutableRangeMap.copyOf($expr$)

.toImmutableRangeMap : com.google.common.collect.ImmutableRangeMap.toImmutableRangeMap
	java.util.function.Function [com.google.common.collect.ImmutableRangeMap]  →  ImmutableRangeMap.toImmutableRangeMap($expr$, $arg$)


## ImmutableRangeSet

.unionOf : com.google.common.collect.ImmutableRangeSet.unionOf
	java.lang.Iterable [com.google.common.collect.ImmutableRangeSet]  →  ImmutableRangeSet.unionOf($expr$)

.builder : com.google.common.collect.ImmutableRangeSet.builder
	java.lang.Object [com.google.common.collect.ImmutableRangeSet]  →  ImmutableRangeSet.builder()

.copyOf : com.google.common.collect.ImmutableRangeSet.copyOf
	com.google.common.collect.RangeSet [com.google.common.collect.ImmutableRangeSet]  →  ImmutableRangeSet.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableRangeSet]  →  ImmutableRangeSet.copyOf($expr$)

.toImmutableRangeSet : com.google.common.collect.ImmutableRangeSet.toImmutableRangeSet
	java.lang.Object [com.google.common.collect.ImmutableRangeSet]  →  ImmutableRangeSet.toImmutableRangeSet()

.of : com.google.common.collect.ImmutableRangeSet.of
	com.google.common.collect.Range [com.google.common.collect.ImmutableRangeSet]  →  ImmutableRangeSet.of($expr$)
	java.lang.Object [com.google.common.collect.ImmutableRangeSet]  →  ImmutableRangeSet.of()


## ImmutableSet

.builder : com.google.common.collect.ImmutableSet.builder
	java.lang.Object [com.google.common.collect.ImmutableSet]  →  ImmutableSet.builder()

.toImmutableSet : com.google.common.collect.ImmutableSet.toImmutableSet
	java.lang.Object [com.google.common.collect.ImmutableSet]  →  ImmutableSet.toImmutableSet()

.copyOf : com.google.common.collect.ImmutableSet.copyOf
	java.util.Collection [com.google.common.collect.ImmutableSet]  →  ImmutableSet.copyOf($expr$)
	scala.Array [com.google.common.collect.ImmutableSet]  →  ImmutableSet.copyOf($expr$)
	java.lang.Iterable [com.google.common.collect.ImmutableSet]  →  ImmutableSet.copyOf($expr$)
	java.util.Iterator [com.google.common.collect.ImmutableSet]  →  ImmutableSet.copyOf($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableSet.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableSet]  →  ImmutableSet.builderWithExpectedSize($expr$)

.of : com.google.common.collect.ImmutableSet.of
	java.lang.Object [com.google.common.collect.ImmutableSet]  →  ImmutableSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSet]  →  ImmutableSet.of()


## ImmutableSetMultimap

.flatteningToImmutableSetMultimap : com.google.common.collect.ImmutableSetMultimap.flatteningToImmutableSetMultimap
	java.util.function.Function [com.google.common.collect.ImmutableSetMultimap]  →  ImmutableSetMultimap.flatteningToImmutableSetMultimap($expr$, $arg$)

.builder : com.google.common.collect.ImmutableSetMultimap.builder
	java.lang.Object [com.google.common.collect.ImmutableSetMultimap]  →  ImmutableSetMultimap.builder()

.toImmutableSetMultimap : com.google.common.collect.ImmutableSetMultimap.toImmutableSetMultimap
	java.util.function.Function [com.google.common.collect.ImmutableSetMultimap]  →  ImmutableSetMultimap.toImmutableSetMultimap($expr$, $arg$)

.copyOf : com.google.common.collect.ImmutableSetMultimap.copyOf
	java.lang.Iterable [com.google.common.collect.ImmutableSetMultimap]  →  ImmutableSetMultimap.copyOf($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.ImmutableSetMultimap]  →  ImmutableSetMultimap.copyOf($expr$)

.of : com.google.common.collect.ImmutableSetMultimap.of
	java.lang.Object [com.google.common.collect.ImmutableSetMultimap]  →  ImmutableSetMultimap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSetMultimap]  →  ImmutableSetMultimap.of()


## ImmutableSortedMap

.reverseOrder : com.google.common.collect.ImmutableSortedMap.reverseOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.reverseOrder()

.copyOfSorted : com.google.common.collect.ImmutableSortedMap.copyOfSorted
	java.util.SortedMap [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.copyOfSorted($expr$)

.toImmutableSortedMap : com.google.common.collect.ImmutableSortedMap.toImmutableSortedMap
	java.util.Comparator [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.toImmutableSortedMap($expr$, $arg$)

.builder : com.google.common.collect.ImmutableSortedMap.builder
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.builder()

.copyOf : com.google.common.collect.ImmutableSortedMap.copyOf
	java.util.Map [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.copyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.copyOf($expr$, $arg$)

.naturalOrder : com.google.common.collect.ImmutableSortedMap.naturalOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.naturalOrder()

.orderedBy : com.google.common.collect.ImmutableSortedMap.orderedBy
	java.util.Comparator [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.orderedBy($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableSortedMap.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.builderWithExpectedSize($expr$)

.ofEntries : com.google.common.collect.ImmutableSortedMap.ofEntries
	scala.Array [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.ofEntries($expr$)

.of : com.google.common.collect.ImmutableSortedMap.of
	java.lang.Comparable [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedMap]  →  ImmutableSortedMap.of()


## ImmutableSortedMultiset

.reverseOrder : com.google.common.collect.ImmutableSortedMultiset.reverseOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.reverseOrder()

.toImmutableSortedMultiset : com.google.common.collect.ImmutableSortedMultiset.toImmutableSortedMultiset
	java.util.Comparator [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.toImmutableSortedMultiset($expr$, $arg$)

.copyOfSorted : com.google.common.collect.ImmutableSortedMultiset.copyOfSorted
	com.google.common.collect.SortedMultiset [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.copyOfSorted($expr$)

.builder : com.google.common.collect.ImmutableSortedMultiset.builder
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.builder()

.copyOf : com.google.common.collect.ImmutableSortedMultiset.copyOf
	scala.Array [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.copyOf($expr$)
	java.util.Comparator [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.copyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.copyOf($expr$)
	java.util.Iterator [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.copyOf($expr$)

.naturalOrder : com.google.common.collect.ImmutableSortedMultiset.naturalOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.naturalOrder()

.orderedBy : com.google.common.collect.ImmutableSortedMultiset.orderedBy
	java.util.Comparator [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.orderedBy($expr$)

.of : com.google.common.collect.ImmutableSortedMultiset.of
	java.lang.Comparable [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedMultiset]  →  ImmutableSortedMultiset.of()


## ImmutableSortedSet

.reverseOrder : com.google.common.collect.ImmutableSortedSet.reverseOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.reverseOrder()

.copyOfSorted : com.google.common.collect.ImmutableSortedSet.copyOfSorted
	java.util.SortedSet [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.copyOfSorted($expr$)

.builder : com.google.common.collect.ImmutableSortedSet.builder
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.builder()

.copyOf : com.google.common.collect.ImmutableSortedSet.copyOf
	java.util.Iterator [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.copyOf($expr$)
	java.util.Comparator [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.copyOf($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.copyOf($expr$)
	java.util.Collection [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.copyOf($expr$)
	scala.Array [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.copyOf($expr$)

.naturalOrder : com.google.common.collect.ImmutableSortedSet.naturalOrder
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.naturalOrder()

.orderedBy : com.google.common.collect.ImmutableSortedSet.orderedBy
	java.util.Comparator [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.orderedBy($expr$)

.builderWithExpectedSize : com.google.common.collect.ImmutableSortedSet.builderWithExpectedSize
	INT [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.builderWithExpectedSize($expr$)

.of : com.google.common.collect.ImmutableSortedSet.of
	java.lang.Comparable [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.of()

.toImmutableSortedSet : com.google.common.collect.ImmutableSortedSet.toImmutableSortedSet
	java.util.Comparator [com.google.common.collect.ImmutableSortedSet]  →  ImmutableSortedSet.toImmutableSortedSet($expr$)


## ImmutableTable

.builder : com.google.common.collect.ImmutableTable.builder
	java.lang.Object [com.google.common.collect.ImmutableTable]  →  ImmutableTable.builder()

.of : com.google.common.collect.ImmutableTable.of
	java.lang.Object [com.google.common.collect.ImmutableTable]  →  ImmutableTable.of($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ImmutableTable]  →  ImmutableTable.of()

.copyOf : com.google.common.collect.ImmutableTable.copyOf
	com.google.common.collect.Table [com.google.common.collect.ImmutableTable]  →  ImmutableTable.copyOf($expr$)

.toImmutableTable : com.google.common.collect.ImmutableTable.toImmutableTable
	java.util.function.Function [com.google.common.collect.ImmutableTable]  →  ImmutableTable.toImmutableTable($expr$, $arg$)


## Interners

.newBuilder : com.google.common.collect.Interners.newBuilder
	java.lang.Object [com.google.common.collect.Interners]  →  Interners.newBuilder()

.newStrongInterner : com.google.common.collect.Interners.newStrongInterner
	java.lang.Object [com.google.common.collect.Interners]  →  Interners.newStrongInterner()

.asFunction : com.google.common.collect.Interners.asFunction
	com.google.common.collect.Interner [com.google.common.collect.Interners]  →  Interners.asFunction($expr$)

.newWeakInterner : com.google.common.collect.Interners.newWeakInterner
	java.lang.Object [com.google.common.collect.Interners]  →  Interners.newWeakInterner()


## Iterables

.find : com.google.common.collect.Iterables.find
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.find($expr$, $arg$)

.any : com.google.common.collect.Iterables.any
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.any($expr$, $arg$)

.tryFind : com.google.common.collect.Iterables.tryFind
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.tryFind($expr$, $arg$)

.size : com.google.common.collect.Iterables.size
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.size($expr$)

.elementsEqual : com.google.common.collect.Iterables.elementsEqual
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.elementsEqual($expr$, $arg$)

.getLast : com.google.common.collect.Iterables.getLast
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.getLast($expr$, $arg$)

.all : com.google.common.collect.Iterables.all
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.all($expr$, $arg$)

.addAll : com.google.common.collect.Iterables.addAll
	java.util.Collection [com.google.common.collect.Iterables]  →  Iterables.addAll($expr$, $arg$)

.consumingIterable : com.google.common.collect.Iterables.consumingIterable
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.consumingIterable($expr$)

.concat : com.google.common.collect.Iterables.concat
	scala.Array [com.google.common.collect.Iterables]  →  Iterables.concat($expr$)
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.concat($expr$, $arg$)

.partition : com.google.common.collect.Iterables.partition
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.partition($expr$, $arg$)

.unmodifiableIterable : com.google.common.collect.Iterables.unmodifiableIterable
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.unmodifiableIterable($expr$)

.skip : com.google.common.collect.Iterables.skip
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.skip($expr$, $arg$)

.getOnlyElement : com.google.common.collect.Iterables.getOnlyElement
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.getOnlyElement($expr$, $arg$)

.filter : com.google.common.collect.Iterables.filter
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.filter($expr$, $arg$)

.mergeSorted : com.google.common.collect.Iterables.mergeSorted
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.mergeSorted($expr$, $arg$)

.cycle : com.google.common.collect.Iterables.cycle
	scala.Array [com.google.common.collect.Iterables]  →  Iterables.cycle($expr$)
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.cycle($expr$)

.retainAll : com.google.common.collect.Iterables.retainAll
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.retainAll($expr$, $arg$)

.paddedPartition : com.google.common.collect.Iterables.paddedPartition
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.paddedPartition($expr$, $arg$)

.toArray : com.google.common.collect.Iterables.toArray
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.toArray($expr$, $arg$)

.toString : com.google.common.collect.Iterables.toString
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.toString($expr$)

.removeIf : com.google.common.collect.Iterables.removeIf
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.removeIf($expr$, $arg$)

.frequency : com.google.common.collect.Iterables.frequency
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.frequency($expr$, $arg$)

.get : com.google.common.collect.Iterables.get
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.get($expr$, $arg$)

.removeAll : com.google.common.collect.Iterables.removeAll
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.removeAll($expr$, $arg$)

.contains : com.google.common.collect.Iterables.contains
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.contains($expr$, $arg$)

.isEmpty : com.google.common.collect.Iterables.isEmpty
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.isEmpty($expr$)

.limit : com.google.common.collect.Iterables.limit
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.limit($expr$, $arg$)

.transform : com.google.common.collect.Iterables.transform
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.transform($expr$, $arg$)

.indexOf : com.google.common.collect.Iterables.indexOf
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.indexOf($expr$, $arg$)

.getFirst : com.google.common.collect.Iterables.getFirst
	java.lang.Iterable [com.google.common.collect.Iterables]  →  Iterables.getFirst($expr$, $arg$)


## Iterators

.find : com.google.common.collect.Iterators.find
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.find($expr$, $arg$)

.any : com.google.common.collect.Iterators.any
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.any($expr$, $arg$)

.getNext : com.google.common.collect.Iterators.getNext
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.getNext($expr$, $arg$)

.tryFind : com.google.common.collect.Iterators.tryFind
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.tryFind($expr$, $arg$)

.size : com.google.common.collect.Iterators.size
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.size($expr$)

.elementsEqual : com.google.common.collect.Iterators.elementsEqual
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.elementsEqual($expr$, $arg$)

.getLast : com.google.common.collect.Iterators.getLast
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.getLast($expr$, $arg$)

.all : com.google.common.collect.Iterators.all
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.all($expr$, $arg$)

.consumingIterator : com.google.common.collect.Iterators.consumingIterator
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.consumingIterator($expr$)

.addAll : com.google.common.collect.Iterators.addAll
	java.util.Collection [com.google.common.collect.Iterators]  →  Iterators.addAll($expr$, $arg$)

.concat : com.google.common.collect.Iterators.concat
	scala.Array [com.google.common.collect.Iterators]  →  Iterators.concat($expr$)
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.concat($expr$, $arg$)

.partition : com.google.common.collect.Iterators.partition
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.partition($expr$, $arg$)

.advance : com.google.common.collect.Iterators.advance
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.advance($expr$, $arg$)

.getOnlyElement : com.google.common.collect.Iterators.getOnlyElement
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.getOnlyElement($expr$, $arg$)

.filter : com.google.common.collect.Iterators.filter
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.filter($expr$, $arg$)

.mergeSorted : com.google.common.collect.Iterators.mergeSorted
	java.lang.Iterable [com.google.common.collect.Iterators]  →  Iterators.mergeSorted($expr$, $arg$)

.peekingIterator : com.google.common.collect.Iterators.peekingIterator
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.peekingIterator($expr$)

.cycle : com.google.common.collect.Iterators.cycle
	scala.Array [com.google.common.collect.Iterators]  →  Iterators.cycle($expr$)
	java.lang.Iterable [com.google.common.collect.Iterators]  →  Iterators.cycle($expr$)

.retainAll : com.google.common.collect.Iterators.retainAll
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.retainAll($expr$, $arg$)

.paddedPartition : com.google.common.collect.Iterators.paddedPartition
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.paddedPartition($expr$, $arg$)

.toArray : com.google.common.collect.Iterators.toArray
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.toArray($expr$, $arg$)

.forArray : com.google.common.collect.Iterators.forArray
	scala.Array [com.google.common.collect.Iterators]  →  Iterators.forArray($expr$)

.forEnumeration : com.google.common.collect.Iterators.forEnumeration
	java.util.Enumeration [com.google.common.collect.Iterators]  →  Iterators.forEnumeration($expr$)

.toString : com.google.common.collect.Iterators.toString
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.toString($expr$)

.removeIf : com.google.common.collect.Iterators.removeIf
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.removeIf($expr$, $arg$)

.frequency : com.google.common.collect.Iterators.frequency
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.frequency($expr$, $arg$)

.get : com.google.common.collect.Iterators.get
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.get($expr$, $arg$)

.removeAll : com.google.common.collect.Iterators.removeAll
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.removeAll($expr$, $arg$)

.singletonIterator : com.google.common.collect.Iterators.singletonIterator
	java.lang.Object [com.google.common.collect.Iterators]  →  Iterators.singletonIterator($expr$)

.contains : com.google.common.collect.Iterators.contains
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.contains($expr$, $arg$)

.limit : com.google.common.collect.Iterators.limit
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.limit($expr$, $arg$)

.transform : com.google.common.collect.Iterators.transform
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.transform($expr$, $arg$)

.indexOf : com.google.common.collect.Iterators.indexOf
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.indexOf($expr$, $arg$)

.asEnumeration : com.google.common.collect.Iterators.asEnumeration
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.asEnumeration($expr$)

.unmodifiableIterator : com.google.common.collect.Iterators.unmodifiableIterator
	java.util.Iterator [com.google.common.collect.Iterators]  →  Iterators.unmodifiableIterator($expr$)


## LinkedHashMultimap

.create : com.google.common.collect.LinkedHashMultimap.create
	INT [com.google.common.collect.LinkedHashMultimap]  →  LinkedHashMultimap.create($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.LinkedHashMultimap]  →  LinkedHashMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.LinkedHashMultimap]  →  LinkedHashMultimap.create()


## LinkedHashMultiset

.create : com.google.common.collect.LinkedHashMultiset.create
	java.lang.Iterable [com.google.common.collect.LinkedHashMultiset]  →  LinkedHashMultiset.create($expr$)
	INT [com.google.common.collect.LinkedHashMultiset]  →  LinkedHashMultiset.create($expr$)
	java.lang.Object [com.google.common.collect.LinkedHashMultiset]  →  LinkedHashMultiset.create()


## LinkedListMultimap

.create : com.google.common.collect.LinkedListMultimap.create
	INT [com.google.common.collect.LinkedListMultimap]  →  LinkedListMultimap.create($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.LinkedListMultimap]  →  LinkedListMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.LinkedListMultimap]  →  LinkedListMultimap.create()


## Lists

.asList : com.google.common.collect.Lists.asList
	java.lang.Object [com.google.common.collect.Lists]  →  Lists.asList($expr$, $arg$)

.newArrayList : com.google.common.collect.Lists.newArrayList
	scala.Array [com.google.common.collect.Lists]  →  Lists.newArrayList($expr$)
	java.lang.Iterable [com.google.common.collect.Lists]  →  Lists.newArrayList($expr$)
	java.util.Iterator [com.google.common.collect.Lists]  →  Lists.newArrayList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  Lists.newArrayList()

.partition : com.google.common.collect.Lists.partition
	java.util.List [com.google.common.collect.Lists]  →  Lists.partition($expr$, $arg$)

.cartesianProduct : com.google.common.collect.Lists.cartesianProduct
	scala.Array [com.google.common.collect.Lists]  →  Lists.cartesianProduct($expr$)
	java.util.List [com.google.common.collect.Lists]  →  Lists.cartesianProduct($expr$)

.charactersOf : com.google.common.collect.Lists.charactersOf
	java.lang.String [com.google.common.collect.Lists]  →  Lists.charactersOf($expr$)
	java.lang.CharSequence [com.google.common.collect.Lists]  →  Lists.charactersOf($expr$)

.reverse : com.google.common.collect.Lists.reverse
	java.util.List [com.google.common.collect.Lists]  →  Lists.reverse($expr$)

.newArrayListWithExpectedSize : com.google.common.collect.Lists.newArrayListWithExpectedSize
	INT [com.google.common.collect.Lists]  →  Lists.newArrayListWithExpectedSize($expr$)

.newCopyOnWriteArrayList : com.google.common.collect.Lists.newCopyOnWriteArrayList
	java.lang.Iterable [com.google.common.collect.Lists]  →  Lists.newCopyOnWriteArrayList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  Lists.newCopyOnWriteArrayList()

.newArrayListWithCapacity : com.google.common.collect.Lists.newArrayListWithCapacity
	INT [com.google.common.collect.Lists]  →  Lists.newArrayListWithCapacity($expr$)

.newLinkedList : com.google.common.collect.Lists.newLinkedList
	java.lang.Iterable [com.google.common.collect.Lists]  →  Lists.newLinkedList($expr$)
	java.lang.Object [com.google.common.collect.Lists]  →  Lists.newLinkedList()

.transform : com.google.common.collect.Lists.transform
	java.util.List [com.google.common.collect.Lists]  →  Lists.transform($expr$, $arg$)


## Maps

.toImmutableEnumMap : com.google.common.collect.Maps.toImmutableEnumMap
	java.util.function.Function [com.google.common.collect.Maps]  →  Maps.toImmutableEnumMap($expr$, $arg$)

.synchronizedBiMap : com.google.common.collect.Maps.synchronizedBiMap
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  Maps.synchronizedBiMap($expr$)

.asConverter : com.google.common.collect.Maps.asConverter
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  Maps.asConverter($expr$)

.synchronizedNavigableMap : com.google.common.collect.Maps.synchronizedNavigableMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  Maps.synchronizedNavigableMap($expr$)

.toMap : com.google.common.collect.Maps.toMap
	java.lang.Iterable [com.google.common.collect.Maps]  →  Maps.toMap($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Maps]  →  Maps.toMap($expr$, $arg$)

.newIdentityHashMap : com.google.common.collect.Maps.newIdentityHashMap
	java.lang.Object [com.google.common.collect.Maps]  →  Maps.newIdentityHashMap()

.newLinkedHashMap : com.google.common.collect.Maps.newLinkedHashMap
	java.util.Map [com.google.common.collect.Maps]  →  Maps.newLinkedHashMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  Maps.newLinkedHashMap()

.filterKeys : com.google.common.collect.Maps.filterKeys
	java.util.Map [com.google.common.collect.Maps]  →  Maps.filterKeys($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  Maps.filterKeys($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  Maps.filterKeys($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  Maps.filterKeys($expr$, $arg$)

.filterEntries : com.google.common.collect.Maps.filterEntries
	java.util.Map [com.google.common.collect.Maps]  →  Maps.filterEntries($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  Maps.filterEntries($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  Maps.filterEntries($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  Maps.filterEntries($expr$, $arg$)

.transformEntries : com.google.common.collect.Maps.transformEntries
	java.util.Map [com.google.common.collect.Maps]  →  Maps.transformEntries($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  Maps.transformEntries($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  Maps.transformEntries($expr$, $arg$)

.newHashMapWithExpectedSize : com.google.common.collect.Maps.newHashMapWithExpectedSize
	INT [com.google.common.collect.Maps]  →  Maps.newHashMapWithExpectedSize($expr$)

.uniqueIndex : com.google.common.collect.Maps.uniqueIndex
	java.lang.Iterable [com.google.common.collect.Maps]  →  Maps.uniqueIndex($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Maps]  →  Maps.uniqueIndex($expr$, $arg$)

.immutableEnumMap : com.google.common.collect.Maps.immutableEnumMap
	java.util.Map [com.google.common.collect.Maps]  →  Maps.immutableEnumMap($expr$)

.newEnumMap : com.google.common.collect.Maps.newEnumMap
	java.util.Map [com.google.common.collect.Maps]  →  Maps.newEnumMap($expr$)
	java.lang.Class [com.google.common.collect.Maps]  →  Maps.newEnumMap($expr$)

.unmodifiableBiMap : com.google.common.collect.Maps.unmodifiableBiMap
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  Maps.unmodifiableBiMap($expr$)

.fromProperties : com.google.common.collect.Maps.fromProperties
	java.util.Properties [com.google.common.collect.Maps]  →  Maps.fromProperties($expr$)

.asMap : com.google.common.collect.Maps.asMap
	java.util.SortedSet [com.google.common.collect.Maps]  →  Maps.asMap($expr$, $arg$)
	java.util.NavigableSet [com.google.common.collect.Maps]  →  Maps.asMap($expr$, $arg$)
	java.util.Set [com.google.common.collect.Maps]  →  Maps.asMap($expr$, $arg$)

.unmodifiableNavigableMap : com.google.common.collect.Maps.unmodifiableNavigableMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  Maps.unmodifiableNavigableMap($expr$)

.transformValues : com.google.common.collect.Maps.transformValues
	java.util.Map [com.google.common.collect.Maps]  →  Maps.transformValues($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  Maps.transformValues($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  Maps.transformValues($expr$, $arg$)

.newConcurrentMap : com.google.common.collect.Maps.newConcurrentMap
	java.lang.Object [com.google.common.collect.Maps]  →  Maps.newConcurrentMap()

.filterValues : com.google.common.collect.Maps.filterValues
	java.util.Map [com.google.common.collect.Maps]  →  Maps.filterValues($expr$, $arg$)
	com.google.common.collect.BiMap [com.google.common.collect.Maps]  →  Maps.filterValues($expr$, $arg$)
	java.util.NavigableMap [com.google.common.collect.Maps]  →  Maps.filterValues($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  Maps.filterValues($expr$, $arg$)

.subMap : com.google.common.collect.Maps.subMap
	java.util.NavigableMap [com.google.common.collect.Maps]  →  Maps.subMap($expr$, $arg$)

.difference : com.google.common.collect.Maps.difference
	java.util.Map [com.google.common.collect.Maps]  →  Maps.difference($expr$, $arg$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  Maps.difference($expr$, $arg$)

.newHashMap : com.google.common.collect.Maps.newHashMap
	java.util.Map [com.google.common.collect.Maps]  →  Maps.newHashMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  Maps.newHashMap()

.newLinkedHashMapWithExpectedSize : com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize
	INT [com.google.common.collect.Maps]  →  Maps.newLinkedHashMapWithExpectedSize($expr$)

.immutableEntry : com.google.common.collect.Maps.immutableEntry
	java.lang.Object [com.google.common.collect.Maps]  →  Maps.immutableEntry($expr$, $arg$)

.newTreeMap : com.google.common.collect.Maps.newTreeMap
	java.util.Comparator [com.google.common.collect.Maps]  →  Maps.newTreeMap($expr$)
	java.util.SortedMap [com.google.common.collect.Maps]  →  Maps.newTreeMap($expr$)
	java.lang.Object [com.google.common.collect.Maps]  →  Maps.newTreeMap()


## MinMaxPriorityQueue

.expectedSize : com.google.common.collect.MinMaxPriorityQueue.expectedSize
	INT [com.google.common.collect.MinMaxPriorityQueue]  →  MinMaxPriorityQueue.expectedSize($expr$)

.maximumSize : com.google.common.collect.MinMaxPriorityQueue.maximumSize
	INT [com.google.common.collect.MinMaxPriorityQueue]  →  MinMaxPriorityQueue.maximumSize($expr$)

.orderedBy : com.google.common.collect.MinMaxPriorityQueue.orderedBy
	java.util.Comparator [com.google.common.collect.MinMaxPriorityQueue]  →  MinMaxPriorityQueue.orderedBy($expr$)

.create : com.google.common.collect.MinMaxPriorityQueue.create
	java.lang.Iterable [com.google.common.collect.MinMaxPriorityQueue]  →  MinMaxPriorityQueue.create($expr$)
	java.lang.Object [com.google.common.collect.MinMaxPriorityQueue]  →  MinMaxPriorityQueue.create()


## MoreCollectors

.toOptional : com.google.common.collect.MoreCollectors.toOptional
	java.lang.Object [com.google.common.collect.MoreCollectors]  →  MoreCollectors.toOptional()

.onlyElement : com.google.common.collect.MoreCollectors.onlyElement
	java.lang.Object [com.google.common.collect.MoreCollectors]  →  MoreCollectors.onlyElement()


## MultimapBuilder

.enumKeys : com.google.common.collect.MultimapBuilder.enumKeys
	java.lang.Class [com.google.common.collect.MultimapBuilder]  →  MultimapBuilder.enumKeys($expr$)

.treeKeys : com.google.common.collect.MultimapBuilder.treeKeys
	java.util.Comparator [com.google.common.collect.MultimapBuilder]  →  MultimapBuilder.treeKeys($expr$)
	java.lang.Object [com.google.common.collect.MultimapBuilder]  →  MultimapBuilder.treeKeys()

.linkedHashKeys : com.google.common.collect.MultimapBuilder.linkedHashKeys
	INT [com.google.common.collect.MultimapBuilder]  →  MultimapBuilder.linkedHashKeys($expr$)
	java.lang.Object [com.google.common.collect.MultimapBuilder]  →  MultimapBuilder.linkedHashKeys()

.hashKeys : com.google.common.collect.MultimapBuilder.hashKeys
	INT [com.google.common.collect.MultimapBuilder]  →  MultimapBuilder.hashKeys($expr$)
	java.lang.Object [com.google.common.collect.MultimapBuilder]  →  MultimapBuilder.hashKeys()


## Multimaps

.newSortedSetMultimap : com.google.common.collect.Multimaps.newSortedSetMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  Multimaps.newSortedSetMultimap($expr$, $arg$)

.synchronizedMultimap : com.google.common.collect.Multimaps.synchronizedMultimap
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.synchronizedMultimap($expr$)

.forMap : com.google.common.collect.Multimaps.forMap
	java.util.Map [com.google.common.collect.Multimaps]  →  Multimaps.forMap($expr$)

.filterKeys : com.google.common.collect.Multimaps.filterKeys
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.filterKeys($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.filterKeys($expr$, $arg$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  Multimaps.filterKeys($expr$, $arg$)

.toMultimap : com.google.common.collect.Multimaps.toMultimap
	java.util.function.Function [com.google.common.collect.Multimaps]  →  Multimaps.toMultimap($expr$, $arg$)

.filterEntries : com.google.common.collect.Multimaps.filterEntries
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.filterEntries($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.filterEntries($expr$, $arg$)

.invertFrom : com.google.common.collect.Multimaps.invertFrom
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.invertFrom($expr$, $arg$)

.transformEntries : com.google.common.collect.Multimaps.transformEntries
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  Multimaps.transformEntries($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.transformEntries($expr$, $arg$)

.unmodifiableListMultimap : com.google.common.collect.Multimaps.unmodifiableListMultimap
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  Multimaps.unmodifiableListMultimap($expr$)

.newListMultimap : com.google.common.collect.Multimaps.newListMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  Multimaps.newListMultimap($expr$, $arg$)

.unmodifiableSetMultimap : com.google.common.collect.Multimaps.unmodifiableSetMultimap
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.unmodifiableSetMultimap($expr$)

.newSetMultimap : com.google.common.collect.Multimaps.newSetMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  Multimaps.newSetMultimap($expr$, $arg$)

.newMultimap : com.google.common.collect.Multimaps.newMultimap
	java.util.Map [com.google.common.collect.Multimaps]  →  Multimaps.newMultimap($expr$, $arg$)

.unmodifiableMultimap : com.google.common.collect.Multimaps.unmodifiableMultimap
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.unmodifiableMultimap($expr$)

.asMap : com.google.common.collect.Multimaps.asMap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.asMap($expr$)
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.asMap($expr$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.asMap($expr$)
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  Multimaps.asMap($expr$)

.flatteningToMultimap : com.google.common.collect.Multimaps.flatteningToMultimap
	java.util.function.Function [com.google.common.collect.Multimaps]  →  Multimaps.flatteningToMultimap($expr$, $arg$)

.transformValues : com.google.common.collect.Multimaps.transformValues
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  Multimaps.transformValues($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.transformValues($expr$, $arg$)

.synchronizedListMultimap : com.google.common.collect.Multimaps.synchronizedListMultimap
	com.google.common.collect.ListMultimap [com.google.common.collect.Multimaps]  →  Multimaps.synchronizedListMultimap($expr$)

.synchronizedSortedSetMultimap : com.google.common.collect.Multimaps.synchronizedSortedSetMultimap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.synchronizedSortedSetMultimap($expr$)

.filterValues : com.google.common.collect.Multimaps.filterValues
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.filterValues($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.Multimaps]  →  Multimaps.filterValues($expr$, $arg$)

.unmodifiableSortedSetMultimap : com.google.common.collect.Multimaps.unmodifiableSortedSetMultimap
	com.google.common.collect.SortedSetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.unmodifiableSortedSetMultimap($expr$)

.synchronizedSetMultimap : com.google.common.collect.Multimaps.synchronizedSetMultimap
	com.google.common.collect.SetMultimap [com.google.common.collect.Multimaps]  →  Multimaps.synchronizedSetMultimap($expr$)

.index : com.google.common.collect.Multimaps.index
	java.lang.Iterable [com.google.common.collect.Multimaps]  →  Multimaps.index($expr$, $arg$)
	java.util.Iterator [com.google.common.collect.Multimaps]  →  Multimaps.index($expr$, $arg$)


## Multisets

.union : com.google.common.collect.Multisets.union
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.union($expr$, $arg$)

.intersection : com.google.common.collect.Multisets.intersection
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.intersection($expr$, $arg$)

.unmodifiableMultiset : com.google.common.collect.Multisets.unmodifiableMultiset
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.unmodifiableMultiset($expr$)

.toMultiset : com.google.common.collect.Multisets.toMultiset
	java.util.function.Function [com.google.common.collect.Multisets]  →  Multisets.toMultiset($expr$, $arg$)

.removeOccurrences : com.google.common.collect.Multisets.removeOccurrences
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.removeOccurrences($expr$, $arg$)

.retainOccurrences : com.google.common.collect.Multisets.retainOccurrences
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.retainOccurrences($expr$, $arg$)

.filter : com.google.common.collect.Multisets.filter
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.filter($expr$, $arg$)

.copyHighestCountFirst : com.google.common.collect.Multisets.copyHighestCountFirst
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.copyHighestCountFirst($expr$)

.unmodifiableSortedMultiset : com.google.common.collect.Multisets.unmodifiableSortedMultiset
	com.google.common.collect.SortedMultiset [com.google.common.collect.Multisets]  →  Multisets.unmodifiableSortedMultiset($expr$)

.difference : com.google.common.collect.Multisets.difference
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.difference($expr$, $arg$)

.sum : com.google.common.collect.Multisets.sum
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.sum($expr$, $arg$)

.immutableEntry : com.google.common.collect.Multisets.immutableEntry
	java.lang.Object [com.google.common.collect.Multisets]  →  Multisets.immutableEntry($expr$, $arg$)

.containsOccurrences : com.google.common.collect.Multisets.containsOccurrences
	com.google.common.collect.Multiset [com.google.common.collect.Multisets]  →  Multisets.containsOccurrences($expr$, $arg$)


## MutableClassToInstanceMap

.create : com.google.common.collect.MutableClassToInstanceMap.create
	java.util.Map [com.google.common.collect.MutableClassToInstanceMap]  →  MutableClassToInstanceMap.create($expr$)
	java.lang.Object [com.google.common.collect.MutableClassToInstanceMap]  →  MutableClassToInstanceMap.create()


## ObjectArrays

.newArray : com.google.common.collect.ObjectArrays.newArray
	scala.Array [com.google.common.collect.ObjectArrays]  →  ObjectArrays.newArray($expr$, $arg$)
	java.lang.Class [com.google.common.collect.ObjectArrays]  →  ObjectArrays.newArray($expr$, $arg$)

.concat : com.google.common.collect.ObjectArrays.concat
	scala.Array [com.google.common.collect.ObjectArrays]  →  ObjectArrays.concat($expr$, $arg$)
	java.lang.Object [com.google.common.collect.ObjectArrays]  →  ObjectArrays.concat($expr$, $arg$)


## Ordering

.compound : com.google.common.collect.Ordering.compound
	java.lang.Iterable [com.google.common.collect.Ordering]  →  Ordering.compound($expr$)

.usingToString : com.google.common.collect.Ordering.usingToString
	java.lang.Object [com.google.common.collect.Ordering]  →  Ordering.usingToString()

.allEqual : com.google.common.collect.Ordering.allEqual
	java.lang.Object [com.google.common.collect.Ordering]  →  Ordering.allEqual()

.arbitrary : com.google.common.collect.Ordering.arbitrary
	java.lang.Object [com.google.common.collect.Ordering]  →  Ordering.arbitrary()

.from : com.google.common.collect.Ordering.from
	java.util.Comparator [com.google.common.collect.Ordering]  →  Ordering.from($expr$)

.natural : com.google.common.collect.Ordering.natural
	java.lang.Object [com.google.common.collect.Ordering]  →  Ordering.natural()

.explicit : com.google.common.collect.Ordering.explicit
	java.util.List [com.google.common.collect.Ordering]  →  Ordering.explicit($expr$)
	java.lang.Object [com.google.common.collect.Ordering]  →  Ordering.explicit($expr$, $arg$)


## Queues

.drainUninterruptibly : com.google.common.collect.Queues.drainUninterruptibly
	java.util.concurrent.BlockingQueue [com.google.common.collect.Queues]  →  Queues.drainUninterruptibly($expr$, $arg$)

.newArrayBlockingQueue : com.google.common.collect.Queues.newArrayBlockingQueue
	INT [com.google.common.collect.Queues]  →  Queues.newArrayBlockingQueue($expr$)

.drain : com.google.common.collect.Queues.drain
	java.util.concurrent.BlockingQueue [com.google.common.collect.Queues]  →  Queues.drain($expr$, $arg$)

.newPriorityBlockingQueue : com.google.common.collect.Queues.newPriorityBlockingQueue
	java.lang.Iterable [com.google.common.collect.Queues]  →  Queues.newPriorityBlockingQueue($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  Queues.newPriorityBlockingQueue()

.newPriorityQueue : com.google.common.collect.Queues.newPriorityQueue
	java.lang.Iterable [com.google.common.collect.Queues]  →  Queues.newPriorityQueue($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  Queues.newPriorityQueue()

.newLinkedBlockingDeque : com.google.common.collect.Queues.newLinkedBlockingDeque
	java.lang.Iterable [com.google.common.collect.Queues]  →  Queues.newLinkedBlockingDeque($expr$)
	INT [com.google.common.collect.Queues]  →  Queues.newLinkedBlockingDeque($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  Queues.newLinkedBlockingDeque()

.newLinkedBlockingQueue : com.google.common.collect.Queues.newLinkedBlockingQueue
	java.lang.Iterable [com.google.common.collect.Queues]  →  Queues.newLinkedBlockingQueue($expr$)
	INT [com.google.common.collect.Queues]  →  Queues.newLinkedBlockingQueue($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  Queues.newLinkedBlockingQueue()

.synchronizedDeque : com.google.common.collect.Queues.synchronizedDeque
	java.util.Deque [com.google.common.collect.Queues]  →  Queues.synchronizedDeque($expr$)

.newArrayDeque : com.google.common.collect.Queues.newArrayDeque
	java.lang.Iterable [com.google.common.collect.Queues]  →  Queues.newArrayDeque($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  Queues.newArrayDeque()

.synchronizedQueue : com.google.common.collect.Queues.synchronizedQueue
	java.util.Queue [com.google.common.collect.Queues]  →  Queues.synchronizedQueue($expr$)

.newConcurrentLinkedQueue : com.google.common.collect.Queues.newConcurrentLinkedQueue
	java.lang.Iterable [com.google.common.collect.Queues]  →  Queues.newConcurrentLinkedQueue($expr$)
	java.lang.Object [com.google.common.collect.Queues]  →  Queues.newConcurrentLinkedQueue()

.newSynchronousQueue : com.google.common.collect.Queues.newSynchronousQueue
	java.lang.Object [com.google.common.collect.Queues]  →  Queues.newSynchronousQueue()


## Range

.atLeast : com.google.common.collect.Range.atLeast
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.atLeast($expr$)

.closed : com.google.common.collect.Range.closed
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.closed($expr$, $arg$)

.lessThan : com.google.common.collect.Range.lessThan
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.lessThan($expr$)

.all : com.google.common.collect.Range.all
	java.lang.Object [com.google.common.collect.Range]  →  Range.all()

.greaterThan : com.google.common.collect.Range.greaterThan
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.greaterThan($expr$)

.open : com.google.common.collect.Range.open
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.open($expr$, $arg$)

.atMost : com.google.common.collect.Range.atMost
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.atMost($expr$)

.upTo : com.google.common.collect.Range.upTo
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.upTo($expr$, $arg$)

.closedOpen : com.google.common.collect.Range.closedOpen
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.closedOpen($expr$, $arg$)

.range : com.google.common.collect.Range.range
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.range($expr$, $arg$)

.encloseAll : com.google.common.collect.Range.encloseAll
	java.lang.Iterable [com.google.common.collect.Range]  →  Range.encloseAll($expr$)

.singleton : com.google.common.collect.Range.singleton
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.singleton($expr$)

.downTo : com.google.common.collect.Range.downTo
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.downTo($expr$, $arg$)

.openClosed : com.google.common.collect.Range.openClosed
	java.lang.Comparable [com.google.common.collect.Range]  →  Range.openClosed($expr$, $arg$)


## Sets

.subSet : com.google.common.collect.Sets.subSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  Sets.subSet($expr$, $arg$)

.unmodifiableNavigableSet : com.google.common.collect.Sets.unmodifiableNavigableSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  Sets.unmodifiableNavigableSet($expr$)

.symmetricDifference : com.google.common.collect.Sets.symmetricDifference
	java.util.Set [com.google.common.collect.Sets]  →  Sets.symmetricDifference($expr$, $arg$)

.newConcurrentHashSet : com.google.common.collect.Sets.newConcurrentHashSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  Sets.newConcurrentHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  Sets.newConcurrentHashSet()

.union : com.google.common.collect.Sets.union
	java.util.Set [com.google.common.collect.Sets]  →  Sets.union($expr$, $arg$)

.intersection : com.google.common.collect.Sets.intersection
	java.util.Set [com.google.common.collect.Sets]  →  Sets.intersection($expr$, $arg$)

.synchronizedNavigableSet : com.google.common.collect.Sets.synchronizedNavigableSet
	java.util.NavigableSet [com.google.common.collect.Sets]  →  Sets.synchronizedNavigableSet($expr$)

.newLinkedHashSet : com.google.common.collect.Sets.newLinkedHashSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  Sets.newLinkedHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  Sets.newLinkedHashSet()

.cartesianProduct : com.google.common.collect.Sets.cartesianProduct
	scala.Array [com.google.common.collect.Sets]  →  Sets.cartesianProduct($expr$)
	java.util.List [com.google.common.collect.Sets]  →  Sets.cartesianProduct($expr$)

.newCopyOnWriteArraySet : com.google.common.collect.Sets.newCopyOnWriteArraySet
	java.lang.Iterable [com.google.common.collect.Sets]  →  Sets.newCopyOnWriteArraySet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  Sets.newCopyOnWriteArraySet()

.filter : com.google.common.collect.Sets.filter
	java.util.SortedSet [com.google.common.collect.Sets]  →  Sets.filter($expr$, $arg$)
	java.util.NavigableSet [com.google.common.collect.Sets]  →  Sets.filter($expr$, $arg$)
	java.util.Set [com.google.common.collect.Sets]  →  Sets.filter($expr$, $arg$)

.newHashSetWithExpectedSize : com.google.common.collect.Sets.newHashSetWithExpectedSize
	INT [com.google.common.collect.Sets]  →  Sets.newHashSetWithExpectedSize($expr$)

.newEnumSet : com.google.common.collect.Sets.newEnumSet
	java.lang.Iterable [com.google.common.collect.Sets]  →  Sets.newEnumSet($expr$, $arg$)

.combinations : com.google.common.collect.Sets.combinations
	java.util.Set [com.google.common.collect.Sets]  →  Sets.combinations($expr$, $arg$)

.newHashSet : com.google.common.collect.Sets.newHashSet
	scala.Array [com.google.common.collect.Sets]  →  Sets.newHashSet($expr$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  Sets.newHashSet($expr$)
	java.util.Iterator [com.google.common.collect.Sets]  →  Sets.newHashSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  Sets.newHashSet()

.newTreeSet : com.google.common.collect.Sets.newTreeSet
	java.util.Comparator [com.google.common.collect.Sets]  →  Sets.newTreeSet($expr$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  Sets.newTreeSet($expr$)
	java.lang.Object [com.google.common.collect.Sets]  →  Sets.newTreeSet()

.complementOf : com.google.common.collect.Sets.complementOf
	java.util.Collection [com.google.common.collect.Sets]  →  Sets.complementOf($expr$, $arg$)

.newLinkedHashSetWithExpectedSize : com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize
	INT [com.google.common.collect.Sets]  →  Sets.newLinkedHashSetWithExpectedSize($expr$)

.toImmutableEnumSet : com.google.common.collect.Sets.toImmutableEnumSet
	java.lang.Object [com.google.common.collect.Sets]  →  Sets.toImmutableEnumSet()

.immutableEnumSet : com.google.common.collect.Sets.immutableEnumSet
	java.lang.Enum [com.google.common.collect.Sets]  →  Sets.immutableEnumSet($expr$, $arg$)
	java.lang.Iterable [com.google.common.collect.Sets]  →  Sets.immutableEnumSet($expr$)

.newIdentityHashSet : com.google.common.collect.Sets.newIdentityHashSet
	java.lang.Object [com.google.common.collect.Sets]  →  Sets.newIdentityHashSet()

.powerSet : com.google.common.collect.Sets.powerSet
	java.util.Set [com.google.common.collect.Sets]  →  Sets.powerSet($expr$)

.difference : com.google.common.collect.Sets.difference
	java.util.Set [com.google.common.collect.Sets]  →  Sets.difference($expr$, $arg$)


## Streams

.mapWithIndex : com.google.common.collect.Streams.mapWithIndex
	java.util.stream.DoubleStream [com.google.common.collect.Streams]  →  Streams.mapWithIndex($expr$, $arg$)
	java.util.stream.IntStream [com.google.common.collect.Streams]  →  Streams.mapWithIndex($expr$, $arg$)
	java.util.stream.LongStream [com.google.common.collect.Streams]  →  Streams.mapWithIndex($expr$, $arg$)
	java.util.stream.Stream [com.google.common.collect.Streams]  →  Streams.mapWithIndex($expr$, $arg$)

.zip : com.google.common.collect.Streams.zip
	java.util.stream.Stream [com.google.common.collect.Streams]  →  Streams.zip($expr$, $arg$)

.concat : com.google.common.collect.Streams.concat
	scala.Array [com.google.common.collect.Streams]  →  Streams.concat($expr$)

.forEachPair : com.google.common.collect.Streams.forEachPair
	java.util.stream.Stream [com.google.common.collect.Streams]  →  Streams.forEachPair($expr$, $arg$)

.findLast : com.google.common.collect.Streams.findLast
	java.util.stream.DoubleStream [com.google.common.collect.Streams]  →  Streams.findLast($expr$)
	java.util.stream.IntStream [com.google.common.collect.Streams]  →  Streams.findLast($expr$)
	java.util.stream.LongStream [com.google.common.collect.Streams]  →  Streams.findLast($expr$)
	java.util.stream.Stream [com.google.common.collect.Streams]  →  Streams.findLast($expr$)

.stream : com.google.common.collect.Streams.stream
	java.util.Optional [com.google.common.collect.Streams]  →  Streams.stream($expr$)
	java.util.Iterator [com.google.common.collect.Streams]  →  Streams.stream($expr$)
	com.google.common.base.Optional [com.google.common.collect.Streams]  →  Streams.stream($expr$)
	java.lang.Iterable [com.google.common.collect.Streams]  →  Streams.stream($expr$)
	java.util.OptionalInt [com.google.common.collect.Streams]  →  Streams.stream($expr$)
	java.util.OptionalLong [com.google.common.collect.Streams]  →  Streams.stream($expr$)
	java.util.OptionalDouble [com.google.common.collect.Streams]  →  Streams.stream($expr$)


## Tables

.unmodifiableRowSortedTable : com.google.common.collect.Tables.unmodifiableRowSortedTable
	com.google.common.collect.RowSortedTable [com.google.common.collect.Tables]  →  Tables.unmodifiableRowSortedTable($expr$)

.newCustomTable : com.google.common.collect.Tables.newCustomTable
	java.util.Map [com.google.common.collect.Tables]  →  Tables.newCustomTable($expr$, $arg$)

.immutableCell : com.google.common.collect.Tables.immutableCell
	java.lang.Object [com.google.common.collect.Tables]  →  Tables.immutableCell($expr$, $arg$)

.toTable : com.google.common.collect.Tables.toTable
	java.util.function.Function [com.google.common.collect.Tables]  →  Tables.toTable($expr$, $arg$)

.transformValues : com.google.common.collect.Tables.transformValues
	com.google.common.collect.Table [com.google.common.collect.Tables]  →  Tables.transformValues($expr$, $arg$)

.unmodifiableTable : com.google.common.collect.Tables.unmodifiableTable
	com.google.common.collect.Table [com.google.common.collect.Tables]  →  Tables.unmodifiableTable($expr$)

.transpose : com.google.common.collect.Tables.transpose
	com.google.common.collect.Table [com.google.common.collect.Tables]  →  Tables.transpose($expr$)

.synchronizedTable : com.google.common.collect.Tables.synchronizedTable
	com.google.common.collect.Table [com.google.common.collect.Tables]  →  Tables.synchronizedTable($expr$)


## TreeBasedTable

.create : com.google.common.collect.TreeBasedTable.create
	com.google.common.collect.TreeBasedTable [com.google.common.collect.TreeBasedTable]  →  TreeBasedTable.create($expr$)
	java.util.Comparator [com.google.common.collect.TreeBasedTable]  →  TreeBasedTable.create($expr$, $arg$)
	java.lang.Object [com.google.common.collect.TreeBasedTable]  →  TreeBasedTable.create()


## TreeMultimap

.create : com.google.common.collect.TreeMultimap.create
	java.util.Comparator [com.google.common.collect.TreeMultimap]  →  TreeMultimap.create($expr$, $arg$)
	com.google.common.collect.Multimap [com.google.common.collect.TreeMultimap]  →  TreeMultimap.create($expr$)
	java.lang.Object [com.google.common.collect.TreeMultimap]  →  TreeMultimap.create()


## TreeMultiset

.create : com.google.common.collect.TreeMultiset.create
	java.util.Comparator [com.google.common.collect.TreeMultiset]  →  TreeMultiset.create($expr$)
	java.lang.Iterable [com.google.common.collect.TreeMultiset]  →  TreeMultiset.create($expr$)
	java.lang.Object [com.google.common.collect.TreeMultiset]  →  TreeMultiset.create()


## TreeRangeMap

.create : com.google.common.collect.TreeRangeMap.create
	java.lang.Object [com.google.common.collect.TreeRangeMap]  →  TreeRangeMap.create()


## TreeRangeSet

.create : com.google.common.collect.TreeRangeSet.create
	com.google.common.collect.RangeSet [com.google.common.collect.TreeRangeSet]  →  TreeRangeSet.create($expr$)
	java.lang.Iterable [com.google.common.collect.TreeRangeSet]  →  TreeRangeSet.create($expr$)
	java.lang.Object [com.google.common.collect.TreeRangeSet]  →  TreeRangeSet.create()


## ArrayBasedEscaperMap

.create : com.google.common.escape.ArrayBasedEscaperMap.create
	java.util.Map [com.google.common.escape.ArrayBasedEscaperMap]  →  ArrayBasedEscaperMap.create($expr$)


## Escapers

.builder : com.google.common.escape.Escapers.builder
	java.lang.Object [com.google.common.escape.Escapers]  →  Escapers.builder()

.nullEscaper : com.google.common.escape.Escapers.nullEscaper
	java.lang.Object [com.google.common.escape.Escapers]  →  Escapers.nullEscaper()

.computeReplacement : com.google.common.escape.Escapers.computeReplacement
	com.google.common.escape.CharEscaper [com.google.common.escape.Escapers]  →  Escapers.computeReplacement($expr$, $arg$)
	com.google.common.escape.UnicodeEscaper [com.google.common.escape.Escapers]  →  Escapers.computeReplacement($expr$, $arg$)


## ElementOrder

.sorted : com.google.common.graph.ElementOrder.sorted
	java.util.Comparator [com.google.common.graph.ElementOrder]  →  ElementOrder.sorted($expr$)

.unordered : com.google.common.graph.ElementOrder.unordered
	java.lang.Object [com.google.common.graph.ElementOrder]  →  ElementOrder.unordered()

.natural : com.google.common.graph.ElementOrder.natural
	java.lang.Object [com.google.common.graph.ElementOrder]  →  ElementOrder.natural()

.stable : com.google.common.graph.ElementOrder.stable
	java.lang.Object [com.google.common.graph.ElementOrder]  →  ElementOrder.stable()

.insertion : com.google.common.graph.ElementOrder.insertion
	java.lang.Object [com.google.common.graph.ElementOrder]  →  ElementOrder.insertion()


## EndpointPair

.unordered : com.google.common.graph.EndpointPair.unordered
	java.lang.Object [com.google.common.graph.EndpointPair]  →  EndpointPair.unordered($expr$, $arg$)

.ordered : com.google.common.graph.EndpointPair.ordered
	java.lang.Object [com.google.common.graph.EndpointPair]  →  EndpointPair.ordered($expr$, $arg$)


## GraphBuilder

.from : com.google.common.graph.GraphBuilder.from
	com.google.common.graph.Graph [com.google.common.graph.GraphBuilder]  →  GraphBuilder.from($expr$)

.directed : com.google.common.graph.GraphBuilder.directed
	java.lang.Object [com.google.common.graph.GraphBuilder]  →  GraphBuilder.directed()

.undirected : com.google.common.graph.GraphBuilder.undirected
	java.lang.Object [com.google.common.graph.GraphBuilder]  →  GraphBuilder.undirected()


## Graphs

.inducedSubgraph : com.google.common.graph.Graphs.inducedSubgraph
	com.google.common.graph.ValueGraph [com.google.common.graph.Graphs]  →  Graphs.inducedSubgraph($expr$, $arg$)
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  Graphs.inducedSubgraph($expr$, $arg$)
	com.google.common.graph.Network [com.google.common.graph.Graphs]  →  Graphs.inducedSubgraph($expr$, $arg$)

.hasCycle : com.google.common.graph.Graphs.hasCycle
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  Graphs.hasCycle($expr$)
	com.google.common.graph.Network [com.google.common.graph.Graphs]  →  Graphs.hasCycle($expr$)

.copyOf : com.google.common.graph.Graphs.copyOf
	com.google.common.graph.ValueGraph [com.google.common.graph.Graphs]  →  Graphs.copyOf($expr$)
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  Graphs.copyOf($expr$)
	com.google.common.graph.Network [com.google.common.graph.Graphs]  →  Graphs.copyOf($expr$)

.transitiveClosure : com.google.common.graph.Graphs.transitiveClosure
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  Graphs.transitiveClosure($expr$)

.transpose : com.google.common.graph.Graphs.transpose
	com.google.common.graph.ValueGraph [com.google.common.graph.Graphs]  →  Graphs.transpose($expr$)
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  Graphs.transpose($expr$)
	com.google.common.graph.Network [com.google.common.graph.Graphs]  →  Graphs.transpose($expr$)

.reachableNodes : com.google.common.graph.Graphs.reachableNodes
	com.google.common.graph.Graph [com.google.common.graph.Graphs]  →  Graphs.reachableNodes($expr$, $arg$)


## ImmutableGraph

.copyOf : com.google.common.graph.ImmutableGraph.copyOf
	com.google.common.graph.Graph [com.google.common.graph.ImmutableGraph]  →  ImmutableGraph.copyOf($expr$)


## ImmutableNetwork

.copyOf : com.google.common.graph.ImmutableNetwork.copyOf
	com.google.common.graph.Network [com.google.common.graph.ImmutableNetwork]  →  ImmutableNetwork.copyOf($expr$)


## ImmutableValueGraph

.copyOf : com.google.common.graph.ImmutableValueGraph.copyOf
	com.google.common.graph.ValueGraph [com.google.common.graph.ImmutableValueGraph]  →  ImmutableValueGraph.copyOf($expr$)


## NetworkBuilder

.from : com.google.common.graph.NetworkBuilder.from
	com.google.common.graph.Network [com.google.common.graph.NetworkBuilder]  →  NetworkBuilder.from($expr$)

.directed : com.google.common.graph.NetworkBuilder.directed
	java.lang.Object [com.google.common.graph.NetworkBuilder]  →  NetworkBuilder.directed()

.undirected : com.google.common.graph.NetworkBuilder.undirected
	java.lang.Object [com.google.common.graph.NetworkBuilder]  →  NetworkBuilder.undirected()


## Traverser

.forGraph : com.google.common.graph.Traverser.forGraph
	com.google.common.graph.SuccessorsFunction [com.google.common.graph.Traverser]  →  Traverser.forGraph($expr$)

.forTree : com.google.common.graph.Traverser.forTree
	com.google.common.graph.SuccessorsFunction [com.google.common.graph.Traverser]  →  Traverser.forTree($expr$)


## ValueGraphBuilder

.from : com.google.common.graph.ValueGraphBuilder.from
	com.google.common.graph.ValueGraph [com.google.common.graph.ValueGraphBuilder]  →  ValueGraphBuilder.from($expr$)

.directed : com.google.common.graph.ValueGraphBuilder.directed
	java.lang.Object [com.google.common.graph.ValueGraphBuilder]  →  ValueGraphBuilder.directed()

.undirected : com.google.common.graph.ValueGraphBuilder.undirected
	java.lang.Object [com.google.common.graph.ValueGraphBuilder]  →  ValueGraphBuilder.undirected()


## BloomFilter

.toBloomFilter : com.google.common.hash.BloomFilter.toBloomFilter
	com.google.common.hash.Funnel [com.google.common.hash.BloomFilter]  →  BloomFilter.toBloomFilter($expr$, $arg$)

.readFrom : com.google.common.hash.BloomFilter.readFrom
	java.io.InputStream [com.google.common.hash.BloomFilter]  →  BloomFilter.readFrom($expr$, $arg$)

.create : com.google.common.hash.BloomFilter.create
	com.google.common.hash.Funnel [com.google.common.hash.BloomFilter]  →  BloomFilter.create($expr$, $arg$)


## Funnels

.longFunnel : com.google.common.hash.Funnels.longFunnel
	java.lang.Object [com.google.common.hash.Funnels]  →  Funnels.longFunnel()

.unencodedCharsFunnel : com.google.common.hash.Funnels.unencodedCharsFunnel
	java.lang.Object [com.google.common.hash.Funnels]  →  Funnels.unencodedCharsFunnel()

.asOutputStream : com.google.common.hash.Funnels.asOutputStream
	com.google.common.hash.PrimitiveSink [com.google.common.hash.Funnels]  →  Funnels.asOutputStream($expr$)

.integerFunnel : com.google.common.hash.Funnels.integerFunnel
	java.lang.Object [com.google.common.hash.Funnels]  →  Funnels.integerFunnel()

.stringFunnel : com.google.common.hash.Funnels.stringFunnel
	java.nio.charset.Charset [com.google.common.hash.Funnels]  →  Funnels.stringFunnel($expr$)

.sequentialFunnel : com.google.common.hash.Funnels.sequentialFunnel
	com.google.common.hash.Funnel [com.google.common.hash.Funnels]  →  Funnels.sequentialFunnel($expr$)

.byteArrayFunnel : com.google.common.hash.Funnels.byteArrayFunnel
	java.lang.Object [com.google.common.hash.Funnels]  →  Funnels.byteArrayFunnel()


## HashCode

.fromBytes : com.google.common.hash.HashCode.fromBytes
	scala.Array [com.google.common.hash.HashCode]  →  HashCode.fromBytes($expr$)

.fromInt : com.google.common.hash.HashCode.fromInt
	INT [com.google.common.hash.HashCode]  →  HashCode.fromInt($expr$)

.fromString : com.google.common.hash.HashCode.fromString
	java.lang.String [com.google.common.hash.HashCode]  →  HashCode.fromString($expr$)

.fromLong : com.google.common.hash.HashCode.fromLong
	LONG [com.google.common.hash.HashCode]  →  HashCode.fromLong($expr$)


## Hashing

.consistentHash : com.google.common.hash.Hashing.consistentHash
	LONG [com.google.common.hash.Hashing]  →  Hashing.consistentHash($expr$, $arg$)
	com.google.common.hash.HashCode [com.google.common.hash.Hashing]  →  Hashing.consistentHash($expr$, $arg$)

.crc32 : com.google.common.hash.Hashing.crc32
	java.lang.Object [com.google.common.hash.Hashing]  →  Hashing.crc32()

.adler32 : com.google.common.hash.Hashing.adler32
	java.lang.Object [com.google.common.hash.Hashing]  →  Hashing.adler32()

.goodFastHash : com.google.common.hash.Hashing.goodFastHash
	INT [com.google.common.hash.Hashing]  →  Hashing.goodFastHash($expr$)

.crc32c : com.google.common.hash.Hashing.crc32c
	java.lang.Object [com.google.common.hash.Hashing]  →  Hashing.crc32c()

.hmacMd5 : com.google.common.hash.Hashing.hmacMd5
	scala.Array [com.google.common.hash.Hashing]  →  Hashing.hmacMd5($expr$)
	java.security.Key [com.google.common.hash.Hashing]  →  Hashing.hmacMd5($expr$)

.combineOrdered : com.google.common.hash.Hashing.combineOrdered
	java.lang.Iterable [com.google.common.hash.Hashing]  →  Hashing.combineOrdered($expr$)

.sha256 : com.google.common.hash.Hashing.sha256
	java.lang.Object [com.google.common.hash.Hashing]  →  Hashing.sha256()

.combineUnordered : com.google.common.hash.Hashing.combineUnordered
	java.lang.Iterable [com.google.common.hash.Hashing]  →  Hashing.combineUnordered($expr$)

.hmacSha256 : com.google.common.hash.Hashing.hmacSha256
	scala.Array [com.google.common.hash.Hashing]  →  Hashing.hmacSha256($expr$)
	java.security.Key [com.google.common.hash.Hashing]  →  Hashing.hmacSha256($expr$)

.hmacSha512 : com.google.common.hash.Hashing.hmacSha512
	scala.Array [com.google.common.hash.Hashing]  →  Hashing.hmacSha512($expr$)
	java.security.Key [com.google.common.hash.Hashing]  →  Hashing.hmacSha512($expr$)

.sha384 : com.google.common.hash.Hashing.sha384
	java.lang.Object [com.google.common.hash.Hashing]  →  Hashing.sha384()

.farmHashFingerprint64 : com.google.common.hash.Hashing.farmHashFingerprint64
	java.lang.Object [com.google.common.hash.Hashing]  →  Hashing.farmHashFingerprint64()

.sha512 : com.google.common.hash.Hashing.sha512
	java.lang.Object [com.google.common.hash.Hashing]  →  Hashing.sha512()

.sipHash24 : com.google.common.hash.Hashing.sipHash24
	LONG [com.google.common.hash.Hashing]  →  Hashing.sipHash24($expr$, $arg$)
	java.lang.Object [com.google.common.hash.Hashing]  →  Hashing.sipHash24()

.concatenating : com.google.common.hash.Hashing.concatenating
	java.lang.Iterable [com.google.common.hash.Hashing]  →  Hashing.concatenating($expr$)
	com.google.common.hash.HashFunction [com.google.common.hash.Hashing]  →  Hashing.concatenating($expr$, $arg$)

.hmacSha1 : com.google.common.hash.Hashing.hmacSha1
	scala.Array [com.google.common.hash.Hashing]  →  Hashing.hmacSha1($expr$)
	java.security.Key [com.google.common.hash.Hashing]  →  Hashing.hmacSha1($expr$)


## HashingInputStream

.nullInputStream : com.google.common.hash.HashingInputStream.nullInputStream
	java.lang.Object [com.google.common.hash.HashingInputStream]  →  HashingInputStream.nullInputStream()


## HashingOutputStream

.nullOutputStream : com.google.common.hash.HashingOutputStream.nullOutputStream
	java.lang.Object [com.google.common.hash.HashingOutputStream]  →  HashingOutputStream.nullOutputStream()


## HtmlEscapers

.htmlEscaper : com.google.common.html.HtmlEscapers.htmlEscaper
	java.lang.Object [com.google.common.html.HtmlEscapers]  →  HtmlEscapers.htmlEscaper()


## BaseEncoding

.base64 : com.google.common.io.BaseEncoding.base64
	java.lang.Object [com.google.common.io.BaseEncoding]  →  BaseEncoding.base64()

.base32Hex : com.google.common.io.BaseEncoding.base32Hex
	java.lang.Object [com.google.common.io.BaseEncoding]  →  BaseEncoding.base32Hex()

.base16 : com.google.common.io.BaseEncoding.base16
	java.lang.Object [com.google.common.io.BaseEncoding]  →  BaseEncoding.base16()

.base32 : com.google.common.io.BaseEncoding.base32
	java.lang.Object [com.google.common.io.BaseEncoding]  →  BaseEncoding.base32()

.base64Url : com.google.common.io.BaseEncoding.base64Url
	java.lang.Object [com.google.common.io.BaseEncoding]  →  BaseEncoding.base64Url()


## ByteSource

.empty : com.google.common.io.ByteSource.empty
	java.lang.Object [com.google.common.io.ByteSource]  →  ByteSource.empty()

.concat : com.google.common.io.ByteSource.concat
	scala.Array [com.google.common.io.ByteSource]  →  ByteSource.concat($expr$)
	java.lang.Iterable [com.google.common.io.ByteSource]  →  ByteSource.concat($expr$)
	java.util.Iterator [com.google.common.io.ByteSource]  →  ByteSource.concat($expr$)

.wrap : com.google.common.io.ByteSource.wrap
	scala.Array [com.google.common.io.ByteSource]  →  ByteSource.wrap($expr$)


## ByteStreams

.read : com.google.common.io.ByteStreams.read
	java.io.InputStream [com.google.common.io.ByteStreams]  →  ByteStreams.read($expr$, $arg$)

.newDataInput : com.google.common.io.ByteStreams.newDataInput
	scala.Array [com.google.common.io.ByteStreams]  →  ByteStreams.newDataInput($expr$, $arg$)
	java.io.ByteArrayInputStream [com.google.common.io.ByteStreams]  →  ByteStreams.newDataInput($expr$)

.newDataOutput : com.google.common.io.ByteStreams.newDataOutput
	java.io.ByteArrayOutputStream [com.google.common.io.ByteStreams]  →  ByteStreams.newDataOutput($expr$)
	INT [com.google.common.io.ByteStreams]  →  ByteStreams.newDataOutput($expr$)
	java.lang.Object [com.google.common.io.ByteStreams]  →  ByteStreams.newDataOutput()

.skipFully : com.google.common.io.ByteStreams.skipFully
	java.io.InputStream [com.google.common.io.ByteStreams]  →  ByteStreams.skipFully($expr$, $arg$)

.exhaust : com.google.common.io.ByteStreams.exhaust
	java.io.InputStream [com.google.common.io.ByteStreams]  →  ByteStreams.exhaust($expr$)

.readBytes : com.google.common.io.ByteStreams.readBytes
	java.io.InputStream [com.google.common.io.ByteStreams]  →  ByteStreams.readBytes($expr$, $arg$)

.nullOutputStream : com.google.common.io.ByteStreams.nullOutputStream
	java.lang.Object [com.google.common.io.ByteStreams]  →  ByteStreams.nullOutputStream()

.copy : com.google.common.io.ByteStreams.copy
	java.nio.channels.ReadableByteChannel [com.google.common.io.ByteStreams]  →  ByteStreams.copy($expr$, $arg$)
	java.io.InputStream [com.google.common.io.ByteStreams]  →  ByteStreams.copy($expr$, $arg$)

.readFully : com.google.common.io.ByteStreams.readFully
	java.io.InputStream [com.google.common.io.ByteStreams]  →  ByteStreams.readFully($expr$, $arg$)

.toByteArray : com.google.common.io.ByteStreams.toByteArray
	java.io.InputStream [com.google.common.io.ByteStreams]  →  ByteStreams.toByteArray($expr$)

.limit : com.google.common.io.ByteStreams.limit
	java.io.InputStream [com.google.common.io.ByteStreams]  →  ByteStreams.limit($expr$, $arg$)


## CharSource

.empty : com.google.common.io.CharSource.empty
	java.lang.Object [com.google.common.io.CharSource]  →  CharSource.empty()

.concat : com.google.common.io.CharSource.concat
	scala.Array [com.google.common.io.CharSource]  →  CharSource.concat($expr$)
	java.lang.Iterable [com.google.common.io.CharSource]  →  CharSource.concat($expr$)
	java.util.Iterator [com.google.common.io.CharSource]  →  CharSource.concat($expr$)

.wrap : com.google.common.io.CharSource.wrap
	java.lang.CharSequence [com.google.common.io.CharSource]  →  CharSource.wrap($expr$)


## CharStreams

.skipFully : com.google.common.io.CharStreams.skipFully
	java.io.Reader [com.google.common.io.CharStreams]  →  CharStreams.skipFully($expr$, $arg$)

.exhaust : com.google.common.io.CharStreams.exhaust
	java.lang.Readable [com.google.common.io.CharStreams]  →  CharStreams.exhaust($expr$)

.readLines : com.google.common.io.CharStreams.readLines
	java.lang.Readable [com.google.common.io.CharStreams]  →  CharStreams.readLines($expr$, $arg$)

.asWriter : com.google.common.io.CharStreams.asWriter
	java.lang.Appendable [com.google.common.io.CharStreams]  →  CharStreams.asWriter($expr$)

.nullWriter : com.google.common.io.CharStreams.nullWriter
	java.lang.Object [com.google.common.io.CharStreams]  →  CharStreams.nullWriter()

.copy : com.google.common.io.CharStreams.copy
	java.lang.Readable [com.google.common.io.CharStreams]  →  CharStreams.copy($expr$, $arg$)

.toString : com.google.common.io.CharStreams.toString
	java.lang.Readable [com.google.common.io.CharStreams]  →  CharStreams.toString($expr$)


## Closeables

.closeQuietly : com.google.common.io.Closeables.closeQuietly
	java.io.Reader [com.google.common.io.Closeables]  →  Closeables.closeQuietly($expr$)
	java.io.InputStream [com.google.common.io.Closeables]  →  Closeables.closeQuietly($expr$)

.close : com.google.common.io.Closeables.close
	java.io.Closeable [com.google.common.io.Closeables]  →  Closeables.close($expr$, $arg$)


## Closer

.create : com.google.common.io.Closer.create
	java.lang.Object [com.google.common.io.Closer]  →  Closer.create()


## CountingInputStream

.nullInputStream : com.google.common.io.CountingInputStream.nullInputStream
	java.lang.Object [com.google.common.io.CountingInputStream]  →  CountingInputStream.nullInputStream()


## CountingOutputStream

.nullOutputStream : com.google.common.io.CountingOutputStream.nullOutputStream
	java.lang.Object [com.google.common.io.CountingOutputStream]  →  CountingOutputStream.nullOutputStream()


## FileBackedOutputStream

.nullOutputStream : com.google.common.io.FileBackedOutputStream.nullOutputStream
	java.lang.Object [com.google.common.io.FileBackedOutputStream]  →  FileBackedOutputStream.nullOutputStream()


## Files

.move : com.google.common.io.Files.move
	java.io.File [com.google.common.io.Files]  →  Files.move($expr$, $arg$)

.asByteSource : com.google.common.io.Files.asByteSource
	java.io.File [com.google.common.io.Files]  →  Files.asByteSource($expr$)

.map : com.google.common.io.Files.map
	java.io.File [com.google.common.io.Files]  →  Files.map($expr$, $arg$)

.touch : com.google.common.io.Files.touch
	java.io.File [com.google.common.io.Files]  →  Files.touch($expr$)

.getFileExtension : com.google.common.io.Files.getFileExtension
	java.lang.String [com.google.common.io.Files]  →  Files.getFileExtension($expr$)

.isDirectory : com.google.common.io.Files.isDirectory
	java.lang.Object [com.google.common.io.Files]  →  Files.isDirectory()

.readLines : com.google.common.io.Files.readLines
	java.io.File [com.google.common.io.Files]  →  Files.readLines($expr$, $arg$)

.newReader : com.google.common.io.Files.newReader
	java.io.File [com.google.common.io.Files]  →  Files.newReader($expr$, $arg$)

.createParentDirs : com.google.common.io.Files.createParentDirs
	java.io.File [com.google.common.io.Files]  →  Files.createParentDirs($expr$)

.getNameWithoutExtension : com.google.common.io.Files.getNameWithoutExtension
	java.lang.String [com.google.common.io.Files]  →  Files.getNameWithoutExtension($expr$)

.equal : com.google.common.io.Files.equal
	java.io.File [com.google.common.io.Files]  →  Files.equal($expr$, $arg$)

.isFile : com.google.common.io.Files.isFile
	java.lang.Object [com.google.common.io.Files]  →  Files.isFile()

.fileTraverser : com.google.common.io.Files.fileTraverser
	java.lang.Object [com.google.common.io.Files]  →  Files.fileTraverser()

.copy : com.google.common.io.Files.copy
	java.io.File [com.google.common.io.Files]  →  Files.copy($expr$, $arg$)

.toByteArray : com.google.common.io.Files.toByteArray
	java.io.File [com.google.common.io.Files]  →  Files.toByteArray($expr$)

.asCharSink : com.google.common.io.Files.asCharSink
	java.io.File [com.google.common.io.Files]  →  Files.asCharSink($expr$, $arg$)

.asByteSink : com.google.common.io.Files.asByteSink
	java.io.File [com.google.common.io.Files]  →  Files.asByteSink($expr$, $arg$)

.asCharSource : com.google.common.io.Files.asCharSource
	java.io.File [com.google.common.io.Files]  →  Files.asCharSource($expr$, $arg$)

.write : com.google.common.io.Files.write
	scala.Array [com.google.common.io.Files]  →  Files.write($expr$, $arg$)

.newWriter : com.google.common.io.Files.newWriter
	java.io.File [com.google.common.io.Files]  →  Files.newWriter($expr$, $arg$)

.simplifyPath : com.google.common.io.Files.simplifyPath
	java.lang.String [com.google.common.io.Files]  →  Files.simplifyPath($expr$)


## Flushables

.flush : com.google.common.io.Flushables.flush
	java.io.Flushable [com.google.common.io.Flushables]  →  Flushables.flush($expr$, $arg$)

.flushQuietly : com.google.common.io.Flushables.flushQuietly
	java.io.Flushable [com.google.common.io.Flushables]  →  Flushables.flushQuietly($expr$)


## LittleEndianDataInputStream

.nullInputStream : com.google.common.io.LittleEndianDataInputStream.nullInputStream
	java.lang.Object [com.google.common.io.LittleEndianDataInputStream]  →  LittleEndianDataInputStream.nullInputStream()


## LittleEndianDataOutputStream

.nullOutputStream : com.google.common.io.LittleEndianDataOutputStream.nullOutputStream
	java.lang.Object [com.google.common.io.LittleEndianDataOutputStream]  →  LittleEndianDataOutputStream.nullOutputStream()


## MoreFiles

.listFiles : com.google.common.io.MoreFiles.listFiles
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.listFiles($expr$)

.asByteSource : com.google.common.io.MoreFiles.asByteSource
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.asByteSource($expr$, $arg$)

.touch : com.google.common.io.MoreFiles.touch
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.touch($expr$)

.deleteDirectoryContents : com.google.common.io.MoreFiles.deleteDirectoryContents
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.deleteDirectoryContents($expr$, $arg$)

.isRegularFile : com.google.common.io.MoreFiles.isRegularFile
	scala.Array [com.google.common.io.MoreFiles]  →  MoreFiles.isRegularFile($expr$)

.getFileExtension : com.google.common.io.MoreFiles.getFileExtension
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.getFileExtension($expr$)

.isDirectory : com.google.common.io.MoreFiles.isDirectory
	scala.Array [com.google.common.io.MoreFiles]  →  MoreFiles.isDirectory($expr$)

.createParentDirectories : com.google.common.io.MoreFiles.createParentDirectories
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.createParentDirectories($expr$, $arg$)

.getNameWithoutExtension : com.google.common.io.MoreFiles.getNameWithoutExtension
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.getNameWithoutExtension($expr$)

.equal : com.google.common.io.MoreFiles.equal
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.equal($expr$, $arg$)

.fileTraverser : com.google.common.io.MoreFiles.fileTraverser
	java.lang.Object [com.google.common.io.MoreFiles]  →  MoreFiles.fileTraverser()

.asCharSink : com.google.common.io.MoreFiles.asCharSink
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.asCharSink($expr$, $arg$)

.asByteSink : com.google.common.io.MoreFiles.asByteSink
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.asByteSink($expr$, $arg$)

.asCharSource : com.google.common.io.MoreFiles.asCharSource
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.asCharSource($expr$, $arg$)

.deleteRecursively : com.google.common.io.MoreFiles.deleteRecursively
	java.nio.file.Path [com.google.common.io.MoreFiles]  →  MoreFiles.deleteRecursively($expr$, $arg$)


## Resources

.asByteSource : com.google.common.io.Resources.asByteSource
	java.net.URL [com.google.common.io.Resources]  →  Resources.asByteSource($expr$)

.getResource : com.google.common.io.Resources.getResource
	java.lang.String [com.google.common.io.Resources]  →  Resources.getResource($expr$)
	java.lang.Class [com.google.common.io.Resources]  →  Resources.getResource($expr$, $arg$)

.readLines : com.google.common.io.Resources.readLines
	java.net.URL [com.google.common.io.Resources]  →  Resources.readLines($expr$, $arg$)

.copy : com.google.common.io.Resources.copy
	java.net.URL [com.google.common.io.Resources]  →  Resources.copy($expr$, $arg$)

.toString : com.google.common.io.Resources.toString
	java.net.URL [com.google.common.io.Resources]  →  Resources.toString($expr$, $arg$)

.toByteArray : com.google.common.io.Resources.toByteArray
	java.net.URL [com.google.common.io.Resources]  →  Resources.toByteArray($expr$)

.asCharSource : com.google.common.io.Resources.asCharSource
	java.net.URL [com.google.common.io.Resources]  →  Resources.asCharSource($expr$, $arg$)


## BigDecimalMath

.roundToDouble : com.google.common.math.BigDecimalMath.roundToDouble
	java.math.BigDecimal [com.google.common.math.BigDecimalMath]  →  BigDecimalMath.roundToDouble($expr$, $arg$)


## BigIntegerMath

.log2 : com.google.common.math.BigIntegerMath.log2
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.log2($expr$, $arg$)

.factorial : com.google.common.math.BigIntegerMath.factorial
	INT [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.factorial($expr$)

.roundToDouble : com.google.common.math.BigIntegerMath.roundToDouble
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.roundToDouble($expr$, $arg$)

.log10 : com.google.common.math.BigIntegerMath.log10
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.log10($expr$, $arg$)

.divide : com.google.common.math.BigIntegerMath.divide
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.divide($expr$, $arg$)

.sqrt : com.google.common.math.BigIntegerMath.sqrt
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.sqrt($expr$, $arg$)

.floorPowerOfTwo : com.google.common.math.BigIntegerMath.floorPowerOfTwo
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.floorPowerOfTwo($expr$)

.binomial : com.google.common.math.BigIntegerMath.binomial
	INT [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.binomial($expr$, $arg$)

.isPowerOfTwo : com.google.common.math.BigIntegerMath.isPowerOfTwo
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.isPowerOfTwo($expr$)

.ceilingPowerOfTwo : com.google.common.math.BigIntegerMath.ceilingPowerOfTwo
	java.math.BigInteger [com.google.common.math.BigIntegerMath]  →  BigIntegerMath.ceilingPowerOfTwo($expr$)


## DoubleMath

.log2 : com.google.common.math.DoubleMath.log2
	DOUBLE [com.google.common.math.DoubleMath]  →  DoubleMath.log2($expr$, $arg$)

.factorial : com.google.common.math.DoubleMath.factorial
	INT [com.google.common.math.DoubleMath]  →  DoubleMath.factorial($expr$)

.fuzzyEquals : com.google.common.math.DoubleMath.fuzzyEquals
	DOUBLE [com.google.common.math.DoubleMath]  →  DoubleMath.fuzzyEquals($expr$, $arg$)

.roundToInt : com.google.common.math.DoubleMath.roundToInt
	DOUBLE [com.google.common.math.DoubleMath]  →  DoubleMath.roundToInt($expr$, $arg$)

.fuzzyCompare : com.google.common.math.DoubleMath.fuzzyCompare
	DOUBLE [com.google.common.math.DoubleMath]  →  DoubleMath.fuzzyCompare($expr$, $arg$)

.isPowerOfTwo : com.google.common.math.DoubleMath.isPowerOfTwo
	DOUBLE [com.google.common.math.DoubleMath]  →  DoubleMath.isPowerOfTwo($expr$)

.isMathematicalInteger : com.google.common.math.DoubleMath.isMathematicalInteger
	DOUBLE [com.google.common.math.DoubleMath]  →  DoubleMath.isMathematicalInteger($expr$)

.roundToLong : com.google.common.math.DoubleMath.roundToLong
	DOUBLE [com.google.common.math.DoubleMath]  →  DoubleMath.roundToLong($expr$, $arg$)

.roundToBigInteger : com.google.common.math.DoubleMath.roundToBigInteger
	DOUBLE [com.google.common.math.DoubleMath]  →  DoubleMath.roundToBigInteger($expr$, $arg$)


## IntMath

.log2 : com.google.common.math.IntMath.log2
	INT [com.google.common.math.IntMath]  →  IntMath.log2($expr$, $arg$)

.factorial : com.google.common.math.IntMath.factorial
	INT [com.google.common.math.IntMath]  →  IntMath.factorial($expr$)

.saturatedPow : com.google.common.math.IntMath.saturatedPow
	INT [com.google.common.math.IntMath]  →  IntMath.saturatedPow($expr$, $arg$)

.saturatedMultiply : com.google.common.math.IntMath.saturatedMultiply
	INT [com.google.common.math.IntMath]  →  IntMath.saturatedMultiply($expr$, $arg$)

.mod : com.google.common.math.IntMath.mod
	INT [com.google.common.math.IntMath]  →  IntMath.mod($expr$, $arg$)

.log10 : com.google.common.math.IntMath.log10
	INT [com.google.common.math.IntMath]  →  IntMath.log10($expr$, $arg$)

.mean : com.google.common.math.IntMath.mean
	INT [com.google.common.math.IntMath]  →  IntMath.mean($expr$, $arg$)

.divide : com.google.common.math.IntMath.divide
	INT [com.google.common.math.IntMath]  →  IntMath.divide($expr$, $arg$)

.saturatedSubtract : com.google.common.math.IntMath.saturatedSubtract
	INT [com.google.common.math.IntMath]  →  IntMath.saturatedSubtract($expr$, $arg$)

.pow : com.google.common.math.IntMath.pow
	INT [com.google.common.math.IntMath]  →  IntMath.pow($expr$, $arg$)

.sqrt : com.google.common.math.IntMath.sqrt
	INT [com.google.common.math.IntMath]  →  IntMath.sqrt($expr$, $arg$)

.floorPowerOfTwo : com.google.common.math.IntMath.floorPowerOfTwo
	INT [com.google.common.math.IntMath]  →  IntMath.floorPowerOfTwo($expr$)

.isPrime : com.google.common.math.IntMath.isPrime
	INT [com.google.common.math.IntMath]  →  IntMath.isPrime($expr$)

.binomial : com.google.common.math.IntMath.binomial
	INT [com.google.common.math.IntMath]  →  IntMath.binomial($expr$, $arg$)

.checkedPow : com.google.common.math.IntMath.checkedPow
	INT [com.google.common.math.IntMath]  →  IntMath.checkedPow($expr$, $arg$)

.isPowerOfTwo : com.google.common.math.IntMath.isPowerOfTwo
	INT [com.google.common.math.IntMath]  →  IntMath.isPowerOfTwo($expr$)

.checkedSubtract : com.google.common.math.IntMath.checkedSubtract
	INT [com.google.common.math.IntMath]  →  IntMath.checkedSubtract($expr$, $arg$)

.checkedAdd : com.google.common.math.IntMath.checkedAdd
	INT [com.google.common.math.IntMath]  →  IntMath.checkedAdd($expr$, $arg$)

.saturatedAdd : com.google.common.math.IntMath.saturatedAdd
	INT [com.google.common.math.IntMath]  →  IntMath.saturatedAdd($expr$, $arg$)

.ceilingPowerOfTwo : com.google.common.math.IntMath.ceilingPowerOfTwo
	INT [com.google.common.math.IntMath]  →  IntMath.ceilingPowerOfTwo($expr$)

.checkedMultiply : com.google.common.math.IntMath.checkedMultiply
	INT [com.google.common.math.IntMath]  →  IntMath.checkedMultiply($expr$, $arg$)

.gcd : com.google.common.math.IntMath.gcd
	INT [com.google.common.math.IntMath]  →  IntMath.gcd($expr$, $arg$)


## LinearTransformation

.forNaN : com.google.common.math.LinearTransformation.forNaN
	java.lang.Object [com.google.common.math.LinearTransformation]  →  LinearTransformation.forNaN()

.horizontal : com.google.common.math.LinearTransformation.horizontal
	DOUBLE [com.google.common.math.LinearTransformation]  →  LinearTransformation.horizontal($expr$)

.mapping : com.google.common.math.LinearTransformation.mapping
	DOUBLE [com.google.common.math.LinearTransformation]  →  LinearTransformation.mapping($expr$, $arg$)

.vertical : com.google.common.math.LinearTransformation.vertical
	DOUBLE [com.google.common.math.LinearTransformation]  →  LinearTransformation.vertical($expr$)


## LongMath

.log2 : com.google.common.math.LongMath.log2
	LONG [com.google.common.math.LongMath]  →  LongMath.log2($expr$, $arg$)

.factorial : com.google.common.math.LongMath.factorial
	INT [com.google.common.math.LongMath]  →  LongMath.factorial($expr$)

.saturatedPow : com.google.common.math.LongMath.saturatedPow
	LONG [com.google.common.math.LongMath]  →  LongMath.saturatedPow($expr$, $arg$)

.saturatedMultiply : com.google.common.math.LongMath.saturatedMultiply
	LONG [com.google.common.math.LongMath]  →  LongMath.saturatedMultiply($expr$, $arg$)

.mod : com.google.common.math.LongMath.mod
	LONG [com.google.common.math.LongMath]  →  LongMath.mod($expr$, $arg$)

.roundToDouble : com.google.common.math.LongMath.roundToDouble
	LONG [com.google.common.math.LongMath]  →  LongMath.roundToDouble($expr$, $arg$)

.log10 : com.google.common.math.LongMath.log10
	LONG [com.google.common.math.LongMath]  →  LongMath.log10($expr$, $arg$)

.mean : com.google.common.math.LongMath.mean
	LONG [com.google.common.math.LongMath]  →  LongMath.mean($expr$, $arg$)

.divide : com.google.common.math.LongMath.divide
	LONG [com.google.common.math.LongMath]  →  LongMath.divide($expr$, $arg$)

.saturatedSubtract : com.google.common.math.LongMath.saturatedSubtract
	LONG [com.google.common.math.LongMath]  →  LongMath.saturatedSubtract($expr$, $arg$)

.pow : com.google.common.math.LongMath.pow
	LONG [com.google.common.math.LongMath]  →  LongMath.pow($expr$, $arg$)

.sqrt : com.google.common.math.LongMath.sqrt
	LONG [com.google.common.math.LongMath]  →  LongMath.sqrt($expr$, $arg$)

.floorPowerOfTwo : com.google.common.math.LongMath.floorPowerOfTwo
	LONG [com.google.common.math.LongMath]  →  LongMath.floorPowerOfTwo($expr$)

.isPrime : com.google.common.math.LongMath.isPrime
	LONG [com.google.common.math.LongMath]  →  LongMath.isPrime($expr$)

.binomial : com.google.common.math.LongMath.binomial
	INT [com.google.common.math.LongMath]  →  LongMath.binomial($expr$, $arg$)

.checkedPow : com.google.common.math.LongMath.checkedPow
	LONG [com.google.common.math.LongMath]  →  LongMath.checkedPow($expr$, $arg$)

.isPowerOfTwo : com.google.common.math.LongMath.isPowerOfTwo
	LONG [com.google.common.math.LongMath]  →  LongMath.isPowerOfTwo($expr$)

.checkedSubtract : com.google.common.math.LongMath.checkedSubtract
	LONG [com.google.common.math.LongMath]  →  LongMath.checkedSubtract($expr$, $arg$)

.checkedAdd : com.google.common.math.LongMath.checkedAdd
	LONG [com.google.common.math.LongMath]  →  LongMath.checkedAdd($expr$, $arg$)

.saturatedAdd : com.google.common.math.LongMath.saturatedAdd
	LONG [com.google.common.math.LongMath]  →  LongMath.saturatedAdd($expr$, $arg$)

.ceilingPowerOfTwo : com.google.common.math.LongMath.ceilingPowerOfTwo
	LONG [com.google.common.math.LongMath]  →  LongMath.ceilingPowerOfTwo($expr$)

.checkedMultiply : com.google.common.math.LongMath.checkedMultiply
	LONG [com.google.common.math.LongMath]  →  LongMath.checkedMultiply($expr$, $arg$)

.gcd : com.google.common.math.LongMath.gcd
	LONG [com.google.common.math.LongMath]  →  LongMath.gcd($expr$, $arg$)


## PairedStats

.fromByteArray : com.google.common.math.PairedStats.fromByteArray
	scala.Array [com.google.common.math.PairedStats]  →  PairedStats.fromByteArray($expr$)


## Quantiles

.median : com.google.common.math.Quantiles.median
	java.lang.Object [com.google.common.math.Quantiles]  →  Quantiles.median()

.percentiles : com.google.common.math.Quantiles.percentiles
	java.lang.Object [com.google.common.math.Quantiles]  →  Quantiles.percentiles()

.quartiles : com.google.common.math.Quantiles.quartiles
	java.lang.Object [com.google.common.math.Quantiles]  →  Quantiles.quartiles()

.scale : com.google.common.math.Quantiles.scale
	INT [com.google.common.math.Quantiles]  →  Quantiles.scale($expr$)


## Stats

.meanOf : com.google.common.math.Stats.meanOf
	scala.Array [com.google.common.math.Stats]  →  Stats.meanOf($expr$)
	java.lang.Iterable [com.google.common.math.Stats]  →  Stats.meanOf($expr$)
	java.util.Iterator [com.google.common.math.Stats]  →  Stats.meanOf($expr$)

.of : com.google.common.math.Stats.of
	java.util.Iterator [com.google.common.math.Stats]  →  Stats.of($expr$)
	java.util.stream.IntStream [com.google.common.math.Stats]  →  Stats.of($expr$)
	java.lang.Iterable [com.google.common.math.Stats]  →  Stats.of($expr$)
	scala.Array [com.google.common.math.Stats]  →  Stats.of($expr$)
	java.util.stream.LongStream [com.google.common.math.Stats]  →  Stats.of($expr$)
	java.util.stream.DoubleStream [com.google.common.math.Stats]  →  Stats.of($expr$)

.fromByteArray : com.google.common.math.Stats.fromByteArray
	scala.Array [com.google.common.math.Stats]  →  Stats.fromByteArray($expr$)

.toStats : com.google.common.math.Stats.toStats
	java.lang.Object [com.google.common.math.Stats]  →  Stats.toStats()


## HostAndPort

.fromParts : com.google.common.net.HostAndPort.fromParts
	java.lang.String [com.google.common.net.HostAndPort]  →  HostAndPort.fromParts($expr$, $arg$)

.fromString : com.google.common.net.HostAndPort.fromString
	java.lang.String [com.google.common.net.HostAndPort]  →  HostAndPort.fromString($expr$)

.fromHost : com.google.common.net.HostAndPort.fromHost
	java.lang.String [com.google.common.net.HostAndPort]  →  HostAndPort.fromHost($expr$)


## HostSpecifier

.fromValid : com.google.common.net.HostSpecifier.fromValid
	java.lang.String [com.google.common.net.HostSpecifier]  →  HostSpecifier.fromValid($expr$)

.from : com.google.common.net.HostSpecifier.from
	java.lang.String [com.google.common.net.HostSpecifier]  →  HostSpecifier.from($expr$)

.isValid : com.google.common.net.HostSpecifier.isValid
	java.lang.String [com.google.common.net.HostSpecifier]  →  HostSpecifier.isValid($expr$)


## InetAddresses

.toAddrString : com.google.common.net.InetAddresses.toAddrString
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  InetAddresses.toAddrString($expr$)

.getEmbeddedIPv4ClientAddress : com.google.common.net.InetAddresses.getEmbeddedIPv4ClientAddress
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.getEmbeddedIPv4ClientAddress($expr$)

.getCoercedIPv4Address : com.google.common.net.InetAddresses.getCoercedIPv4Address
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  InetAddresses.getCoercedIPv4Address($expr$)

.isMaximum : com.google.common.net.InetAddresses.isMaximum
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  InetAddresses.isMaximum($expr$)

.fromLittleEndianByteArray : com.google.common.net.InetAddresses.fromLittleEndianByteArray
	scala.Array [com.google.common.net.InetAddresses]  →  InetAddresses.fromLittleEndianByteArray($expr$)

.fromIPv4BigInteger : com.google.common.net.InetAddresses.fromIPv4BigInteger
	java.math.BigInteger [com.google.common.net.InetAddresses]  →  InetAddresses.fromIPv4BigInteger($expr$)

.get6to4IPv4Address : com.google.common.net.InetAddresses.get6to4IPv4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.get6to4IPv4Address($expr$)

.toUriString : com.google.common.net.InetAddresses.toUriString
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  InetAddresses.toUriString($expr$)

.fromIPv6BigInteger : com.google.common.net.InetAddresses.fromIPv6BigInteger
	java.math.BigInteger [com.google.common.net.InetAddresses]  →  InetAddresses.fromIPv6BigInteger($expr$)

.isTeredoAddress : com.google.common.net.InetAddresses.isTeredoAddress
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.isTeredoAddress($expr$)

.coerceToInteger : com.google.common.net.InetAddresses.coerceToInteger
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  InetAddresses.coerceToInteger($expr$)

.is6to4Address : com.google.common.net.InetAddresses.is6to4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.is6to4Address($expr$)

.isMappedIPv4Address : com.google.common.net.InetAddresses.isMappedIPv4Address
	java.lang.String [com.google.common.net.InetAddresses]  →  InetAddresses.isMappedIPv4Address($expr$)

.isInetAddress : com.google.common.net.InetAddresses.isInetAddress
	java.lang.String [com.google.common.net.InetAddresses]  →  InetAddresses.isInetAddress($expr$)

.getTeredoInfo : com.google.common.net.InetAddresses.getTeredoInfo
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.getTeredoInfo($expr$)

.getIsatapIPv4Address : com.google.common.net.InetAddresses.getIsatapIPv4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.getIsatapIPv4Address($expr$)

.decrement : com.google.common.net.InetAddresses.decrement
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  InetAddresses.decrement($expr$)

.forString : com.google.common.net.InetAddresses.forString
	java.lang.String [com.google.common.net.InetAddresses]  →  InetAddresses.forString($expr$)

.isCompatIPv4Address : com.google.common.net.InetAddresses.isCompatIPv4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.isCompatIPv4Address($expr$)

.fromInteger : com.google.common.net.InetAddresses.fromInteger
	INT [com.google.common.net.InetAddresses]  →  InetAddresses.fromInteger($expr$)

.getCompatIPv4Address : com.google.common.net.InetAddresses.getCompatIPv4Address
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.getCompatIPv4Address($expr$)

.increment : com.google.common.net.InetAddresses.increment
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  InetAddresses.increment($expr$)

.hasEmbeddedIPv4ClientAddress : com.google.common.net.InetAddresses.hasEmbeddedIPv4ClientAddress
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.hasEmbeddedIPv4ClientAddress($expr$)

.isUriInetAddress : com.google.common.net.InetAddresses.isUriInetAddress
	java.lang.String [com.google.common.net.InetAddresses]  →  InetAddresses.isUriInetAddress($expr$)

.forUriString : com.google.common.net.InetAddresses.forUriString
	java.lang.String [com.google.common.net.InetAddresses]  →  InetAddresses.forUriString($expr$)

.toBigInteger : com.google.common.net.InetAddresses.toBigInteger
	java.net.InetAddress [com.google.common.net.InetAddresses]  →  InetAddresses.toBigInteger($expr$)

.isIsatapAddress : com.google.common.net.InetAddresses.isIsatapAddress
	java.net.Inet6Address [com.google.common.net.InetAddresses]  →  InetAddresses.isIsatapAddress($expr$)


## InternetDomainName

.from : com.google.common.net.InternetDomainName.from
	java.lang.String [com.google.common.net.InternetDomainName]  →  InternetDomainName.from($expr$)

.isValid : com.google.common.net.InternetDomainName.isValid
	java.lang.String [com.google.common.net.InternetDomainName]  →  InternetDomainName.isValid($expr$)


## MediaType

.parse : com.google.common.net.MediaType.parse
	java.lang.String [com.google.common.net.MediaType]  →  MediaType.parse($expr$)

.create : com.google.common.net.MediaType.create
	java.lang.String [com.google.common.net.MediaType]  →  MediaType.create($expr$, $arg$)


## UrlEscapers

.urlFragmentEscaper : com.google.common.net.UrlEscapers.urlFragmentEscaper
	java.lang.Object [com.google.common.net.UrlEscapers]  →  UrlEscapers.urlFragmentEscaper()

.urlPathSegmentEscaper : com.google.common.net.UrlEscapers.urlPathSegmentEscaper
	java.lang.Object [com.google.common.net.UrlEscapers]  →  UrlEscapers.urlPathSegmentEscaper()

.urlFormParameterEscaper : com.google.common.net.UrlEscapers.urlFormParameterEscaper
	java.lang.Object [com.google.common.net.UrlEscapers]  →  UrlEscapers.urlFormParameterEscaper()


## Booleans

.trueFirst : com.google.common.primitives.Booleans.trueFirst
	java.lang.Object [com.google.common.primitives.Booleans]  →  Booleans.trueFirst()

.asList : com.google.common.primitives.Booleans.asList
	scala.Array [com.google.common.primitives.Booleans]  →  Booleans.asList($expr$)

.join : com.google.common.primitives.Booleans.join
	java.lang.String [com.google.common.primitives.Booleans]  →  Booleans.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Booleans.lastIndexOf
	scala.Array [com.google.common.primitives.Booleans]  →  Booleans.lastIndexOf($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Booleans.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Booleans]  →  Booleans.lexicographicalComparator()

.concat : com.google.common.primitives.Booleans.concat
	scala.Array [com.google.common.primitives.Booleans]  →  Booleans.concat($expr$)

.ensureCapacity : com.google.common.primitives.Booleans.ensureCapacity
	scala.Array [com.google.common.primitives.Booleans]  →  Booleans.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Booleans.reverse
	scala.Array [com.google.common.primitives.Booleans]  →  Booleans.reverse($expr$, $arg$)

.toArray : com.google.common.primitives.Booleans.toArray
	java.util.Collection [com.google.common.primitives.Booleans]  →  Booleans.toArray($expr$)

.countTrue : com.google.common.primitives.Booleans.countTrue
	scala.Array [com.google.common.primitives.Booleans]  →  Booleans.countTrue($expr$)

.falseFirst : com.google.common.primitives.Booleans.falseFirst
	java.lang.Object [com.google.common.primitives.Booleans]  →  Booleans.falseFirst()

.contains : com.google.common.primitives.Booleans.contains
	scala.Array [com.google.common.primitives.Booleans]  →  Booleans.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Booleans.indexOf
	scala.Array [com.google.common.primitives.Booleans]  →  Booleans.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Booleans.compare
	BOOLEAN [com.google.common.primitives.Booleans]  →  Booleans.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Booleans.hashCode
	BOOLEAN [com.google.common.primitives.Booleans]  →  Booleans.hashCode($expr$)


## Bytes

.asList : com.google.common.primitives.Bytes.asList
	scala.Array [com.google.common.primitives.Bytes]  →  Bytes.asList($expr$)

.lastIndexOf : com.google.common.primitives.Bytes.lastIndexOf
	scala.Array [com.google.common.primitives.Bytes]  →  Bytes.lastIndexOf($expr$, $arg$)

.concat : com.google.common.primitives.Bytes.concat
	scala.Array [com.google.common.primitives.Bytes]  →  Bytes.concat($expr$)

.ensureCapacity : com.google.common.primitives.Bytes.ensureCapacity
	scala.Array [com.google.common.primitives.Bytes]  →  Bytes.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Bytes.reverse
	scala.Array [com.google.common.primitives.Bytes]  →  Bytes.reverse($expr$, $arg$)

.toArray : com.google.common.primitives.Bytes.toArray
	java.util.Collection [com.google.common.primitives.Bytes]  →  Bytes.toArray($expr$)

.contains : com.google.common.primitives.Bytes.contains
	scala.Array [com.google.common.primitives.Bytes]  →  Bytes.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Bytes.indexOf
	scala.Array [com.google.common.primitives.Bytes]  →  Bytes.indexOf($expr$, $arg$)

.hashCode : com.google.common.primitives.Bytes.hashCode
	BYTE [com.google.common.primitives.Bytes]  →  Bytes.hashCode($expr$)


## Chars

.asList : com.google.common.primitives.Chars.asList
	scala.Array [com.google.common.primitives.Chars]  →  Chars.asList($expr$)

.join : com.google.common.primitives.Chars.join
	java.lang.String [com.google.common.primitives.Chars]  →  Chars.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Chars.lastIndexOf
	scala.Array [com.google.common.primitives.Chars]  →  Chars.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Chars.constrainToRange
	CHAR [com.google.common.primitives.Chars]  →  Chars.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Chars.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Chars]  →  Chars.lexicographicalComparator()

.concat : com.google.common.primitives.Chars.concat
	scala.Array [com.google.common.primitives.Chars]  →  Chars.concat($expr$)

.min : com.google.common.primitives.Chars.min
	scala.Array [com.google.common.primitives.Chars]  →  Chars.min($expr$)

.fromByteArray : com.google.common.primitives.Chars.fromByteArray
	scala.Array [com.google.common.primitives.Chars]  →  Chars.fromByteArray($expr$)

.ensureCapacity : com.google.common.primitives.Chars.ensureCapacity
	scala.Array [com.google.common.primitives.Chars]  →  Chars.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Chars.reverse
	scala.Array [com.google.common.primitives.Chars]  →  Chars.reverse($expr$, $arg$)

.max : com.google.common.primitives.Chars.max
	scala.Array [com.google.common.primitives.Chars]  →  Chars.max($expr$)

.saturatedCast : com.google.common.primitives.Chars.saturatedCast
	LONG [com.google.common.primitives.Chars]  →  Chars.saturatedCast($expr$)

.toArray : com.google.common.primitives.Chars.toArray
	java.util.Collection [com.google.common.primitives.Chars]  →  Chars.toArray($expr$)

.checkedCast : com.google.common.primitives.Chars.checkedCast
	LONG [com.google.common.primitives.Chars]  →  Chars.checkedCast($expr$)

.fromBytes : com.google.common.primitives.Chars.fromBytes
	BYTE [com.google.common.primitives.Chars]  →  Chars.fromBytes($expr$, $arg$)

.toByteArray : com.google.common.primitives.Chars.toByteArray
	CHAR [com.google.common.primitives.Chars]  →  Chars.toByteArray($expr$)

.sortDescending : com.google.common.primitives.Chars.sortDescending
	scala.Array [com.google.common.primitives.Chars]  →  Chars.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Chars.contains
	scala.Array [com.google.common.primitives.Chars]  →  Chars.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Chars.indexOf
	scala.Array [com.google.common.primitives.Chars]  →  Chars.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Chars.compare
	CHAR [com.google.common.primitives.Chars]  →  Chars.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Chars.hashCode
	CHAR [com.google.common.primitives.Chars]  →  Chars.hashCode($expr$)


## Doubles

.asList : com.google.common.primitives.Doubles.asList
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.asList($expr$)

.join : com.google.common.primitives.Doubles.join
	java.lang.String [com.google.common.primitives.Doubles]  →  Doubles.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Doubles.lastIndexOf
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Doubles.constrainToRange
	DOUBLE [com.google.common.primitives.Doubles]  →  Doubles.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Doubles.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Doubles]  →  Doubles.lexicographicalComparator()

.concat : com.google.common.primitives.Doubles.concat
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.concat($expr$)

.min : com.google.common.primitives.Doubles.min
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.min($expr$)

.stringConverter : com.google.common.primitives.Doubles.stringConverter
	java.lang.Object [com.google.common.primitives.Doubles]  →  Doubles.stringConverter()

.ensureCapacity : com.google.common.primitives.Doubles.ensureCapacity
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Doubles.reverse
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.reverse($expr$, $arg$)

.isFinite : com.google.common.primitives.Doubles.isFinite
	DOUBLE [com.google.common.primitives.Doubles]  →  Doubles.isFinite($expr$)

.max : com.google.common.primitives.Doubles.max
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.max($expr$)

.toArray : com.google.common.primitives.Doubles.toArray
	java.util.Collection [com.google.common.primitives.Doubles]  →  Doubles.toArray($expr$)

.tryParse : com.google.common.primitives.Doubles.tryParse
	java.lang.String [com.google.common.primitives.Doubles]  →  Doubles.tryParse($expr$)

.sortDescending : com.google.common.primitives.Doubles.sortDescending
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Doubles.contains
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Doubles.indexOf
	scala.Array [com.google.common.primitives.Doubles]  →  Doubles.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Doubles.compare
	DOUBLE [com.google.common.primitives.Doubles]  →  Doubles.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Doubles.hashCode
	DOUBLE [com.google.common.primitives.Doubles]  →  Doubles.hashCode($expr$)


## Floats

.asList : com.google.common.primitives.Floats.asList
	scala.Array [com.google.common.primitives.Floats]  →  Floats.asList($expr$)

.join : com.google.common.primitives.Floats.join
	java.lang.String [com.google.common.primitives.Floats]  →  Floats.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Floats.lastIndexOf
	scala.Array [com.google.common.primitives.Floats]  →  Floats.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Floats.constrainToRange
	FLOAT [com.google.common.primitives.Floats]  →  Floats.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Floats.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Floats]  →  Floats.lexicographicalComparator()

.concat : com.google.common.primitives.Floats.concat
	scala.Array [com.google.common.primitives.Floats]  →  Floats.concat($expr$)

.min : com.google.common.primitives.Floats.min
	scala.Array [com.google.common.primitives.Floats]  →  Floats.min($expr$)

.stringConverter : com.google.common.primitives.Floats.stringConverter
	java.lang.Object [com.google.common.primitives.Floats]  →  Floats.stringConverter()

.ensureCapacity : com.google.common.primitives.Floats.ensureCapacity
	scala.Array [com.google.common.primitives.Floats]  →  Floats.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Floats.reverse
	scala.Array [com.google.common.primitives.Floats]  →  Floats.reverse($expr$, $arg$)

.isFinite : com.google.common.primitives.Floats.isFinite
	FLOAT [com.google.common.primitives.Floats]  →  Floats.isFinite($expr$)

.max : com.google.common.primitives.Floats.max
	scala.Array [com.google.common.primitives.Floats]  →  Floats.max($expr$)

.toArray : com.google.common.primitives.Floats.toArray
	java.util.Collection [com.google.common.primitives.Floats]  →  Floats.toArray($expr$)

.tryParse : com.google.common.primitives.Floats.tryParse
	java.lang.String [com.google.common.primitives.Floats]  →  Floats.tryParse($expr$)

.sortDescending : com.google.common.primitives.Floats.sortDescending
	scala.Array [com.google.common.primitives.Floats]  →  Floats.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Floats.contains
	scala.Array [com.google.common.primitives.Floats]  →  Floats.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Floats.indexOf
	scala.Array [com.google.common.primitives.Floats]  →  Floats.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Floats.compare
	FLOAT [com.google.common.primitives.Floats]  →  Floats.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Floats.hashCode
	FLOAT [com.google.common.primitives.Floats]  →  Floats.hashCode($expr$)


## ImmutableDoubleArray

.builder : com.google.common.primitives.ImmutableDoubleArray.builder
	INT [com.google.common.primitives.ImmutableDoubleArray]  →  ImmutableDoubleArray.builder($expr$)
	java.lang.Object [com.google.common.primitives.ImmutableDoubleArray]  →  ImmutableDoubleArray.builder()

.of : com.google.common.primitives.ImmutableDoubleArray.of
	DOUBLE [com.google.common.primitives.ImmutableDoubleArray]  →  ImmutableDoubleArray.of($expr$, $arg$)
	java.lang.Object [com.google.common.primitives.ImmutableDoubleArray]  →  ImmutableDoubleArray.of()

.copyOf : com.google.common.primitives.ImmutableDoubleArray.copyOf
	scala.Array [com.google.common.primitives.ImmutableDoubleArray]  →  ImmutableDoubleArray.copyOf($expr$)
	java.util.Collection [com.google.common.primitives.ImmutableDoubleArray]  →  ImmutableDoubleArray.copyOf($expr$)
	java.util.stream.DoubleStream [com.google.common.primitives.ImmutableDoubleArray]  →  ImmutableDoubleArray.copyOf($expr$)
	java.lang.Iterable [com.google.common.primitives.ImmutableDoubleArray]  →  ImmutableDoubleArray.copyOf($expr$)


## ImmutableIntArray

.builder : com.google.common.primitives.ImmutableIntArray.builder
	INT [com.google.common.primitives.ImmutableIntArray]  →  ImmutableIntArray.builder($expr$)
	java.lang.Object [com.google.common.primitives.ImmutableIntArray]  →  ImmutableIntArray.builder()

.of : com.google.common.primitives.ImmutableIntArray.of
	INT [com.google.common.primitives.ImmutableIntArray]  →  ImmutableIntArray.of($expr$, $arg$)
	java.lang.Object [com.google.common.primitives.ImmutableIntArray]  →  ImmutableIntArray.of()

.copyOf : com.google.common.primitives.ImmutableIntArray.copyOf
	scala.Array [com.google.common.primitives.ImmutableIntArray]  →  ImmutableIntArray.copyOf($expr$)
	java.util.Collection [com.google.common.primitives.ImmutableIntArray]  →  ImmutableIntArray.copyOf($expr$)
	java.util.stream.IntStream [com.google.common.primitives.ImmutableIntArray]  →  ImmutableIntArray.copyOf($expr$)
	java.lang.Iterable [com.google.common.primitives.ImmutableIntArray]  →  ImmutableIntArray.copyOf($expr$)


## ImmutableLongArray

.builder : com.google.common.primitives.ImmutableLongArray.builder
	INT [com.google.common.primitives.ImmutableLongArray]  →  ImmutableLongArray.builder($expr$)
	java.lang.Object [com.google.common.primitives.ImmutableLongArray]  →  ImmutableLongArray.builder()

.of : com.google.common.primitives.ImmutableLongArray.of
	LONG [com.google.common.primitives.ImmutableLongArray]  →  ImmutableLongArray.of($expr$, $arg$)
	java.lang.Object [com.google.common.primitives.ImmutableLongArray]  →  ImmutableLongArray.of()

.copyOf : com.google.common.primitives.ImmutableLongArray.copyOf
	scala.Array [com.google.common.primitives.ImmutableLongArray]  →  ImmutableLongArray.copyOf($expr$)
	java.util.Collection [com.google.common.primitives.ImmutableLongArray]  →  ImmutableLongArray.copyOf($expr$)
	java.lang.Iterable [com.google.common.primitives.ImmutableLongArray]  →  ImmutableLongArray.copyOf($expr$)
	java.util.stream.LongStream [com.google.common.primitives.ImmutableLongArray]  →  ImmutableLongArray.copyOf($expr$)


## Ints

.asList : com.google.common.primitives.Ints.asList
	scala.Array [com.google.common.primitives.Ints]  →  Ints.asList($expr$)

.join : com.google.common.primitives.Ints.join
	java.lang.String [com.google.common.primitives.Ints]  →  Ints.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Ints.lastIndexOf
	scala.Array [com.google.common.primitives.Ints]  →  Ints.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Ints.constrainToRange
	INT [com.google.common.primitives.Ints]  →  Ints.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Ints.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Ints]  →  Ints.lexicographicalComparator()

.concat : com.google.common.primitives.Ints.concat
	scala.Array [com.google.common.primitives.Ints]  →  Ints.concat($expr$)

.min : com.google.common.primitives.Ints.min
	scala.Array [com.google.common.primitives.Ints]  →  Ints.min($expr$)

.stringConverter : com.google.common.primitives.Ints.stringConverter
	java.lang.Object [com.google.common.primitives.Ints]  →  Ints.stringConverter()

.fromByteArray : com.google.common.primitives.Ints.fromByteArray
	scala.Array [com.google.common.primitives.Ints]  →  Ints.fromByteArray($expr$)

.ensureCapacity : com.google.common.primitives.Ints.ensureCapacity
	scala.Array [com.google.common.primitives.Ints]  →  Ints.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Ints.reverse
	scala.Array [com.google.common.primitives.Ints]  →  Ints.reverse($expr$, $arg$)

.max : com.google.common.primitives.Ints.max
	scala.Array [com.google.common.primitives.Ints]  →  Ints.max($expr$)

.saturatedCast : com.google.common.primitives.Ints.saturatedCast
	LONG [com.google.common.primitives.Ints]  →  Ints.saturatedCast($expr$)

.toArray : com.google.common.primitives.Ints.toArray
	java.util.Collection [com.google.common.primitives.Ints]  →  Ints.toArray($expr$)

.tryParse : com.google.common.primitives.Ints.tryParse
	java.lang.String [com.google.common.primitives.Ints]  →  Ints.tryParse($expr$, $arg$)

.checkedCast : com.google.common.primitives.Ints.checkedCast
	LONG [com.google.common.primitives.Ints]  →  Ints.checkedCast($expr$)

.fromBytes : com.google.common.primitives.Ints.fromBytes
	BYTE [com.google.common.primitives.Ints]  →  Ints.fromBytes($expr$, $arg$)

.toByteArray : com.google.common.primitives.Ints.toByteArray
	INT [com.google.common.primitives.Ints]  →  Ints.toByteArray($expr$)

.sortDescending : com.google.common.primitives.Ints.sortDescending
	scala.Array [com.google.common.primitives.Ints]  →  Ints.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Ints.contains
	scala.Array [com.google.common.primitives.Ints]  →  Ints.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Ints.indexOf
	scala.Array [com.google.common.primitives.Ints]  →  Ints.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Ints.compare
	INT [com.google.common.primitives.Ints]  →  Ints.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Ints.hashCode
	INT [com.google.common.primitives.Ints]  →  Ints.hashCode($expr$)


## Longs

.asList : com.google.common.primitives.Longs.asList
	scala.Array [com.google.common.primitives.Longs]  →  Longs.asList($expr$)

.join : com.google.common.primitives.Longs.join
	java.lang.String [com.google.common.primitives.Longs]  →  Longs.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Longs.lastIndexOf
	scala.Array [com.google.common.primitives.Longs]  →  Longs.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Longs.constrainToRange
	LONG [com.google.common.primitives.Longs]  →  Longs.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Longs.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Longs]  →  Longs.lexicographicalComparator()

.concat : com.google.common.primitives.Longs.concat
	scala.Array [com.google.common.primitives.Longs]  →  Longs.concat($expr$)

.min : com.google.common.primitives.Longs.min
	scala.Array [com.google.common.primitives.Longs]  →  Longs.min($expr$)

.stringConverter : com.google.common.primitives.Longs.stringConverter
	java.lang.Object [com.google.common.primitives.Longs]  →  Longs.stringConverter()

.fromByteArray : com.google.common.primitives.Longs.fromByteArray
	scala.Array [com.google.common.primitives.Longs]  →  Longs.fromByteArray($expr$)

.ensureCapacity : com.google.common.primitives.Longs.ensureCapacity
	scala.Array [com.google.common.primitives.Longs]  →  Longs.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Longs.reverse
	scala.Array [com.google.common.primitives.Longs]  →  Longs.reverse($expr$, $arg$)

.max : com.google.common.primitives.Longs.max
	scala.Array [com.google.common.primitives.Longs]  →  Longs.max($expr$)

.toArray : com.google.common.primitives.Longs.toArray
	java.util.Collection [com.google.common.primitives.Longs]  →  Longs.toArray($expr$)

.tryParse : com.google.common.primitives.Longs.tryParse
	java.lang.String [com.google.common.primitives.Longs]  →  Longs.tryParse($expr$, $arg$)

.fromBytes : com.google.common.primitives.Longs.fromBytes
	BYTE [com.google.common.primitives.Longs]  →  Longs.fromBytes($expr$, $arg$)

.toByteArray : com.google.common.primitives.Longs.toByteArray
	LONG [com.google.common.primitives.Longs]  →  Longs.toByteArray($expr$)

.sortDescending : com.google.common.primitives.Longs.sortDescending
	scala.Array [com.google.common.primitives.Longs]  →  Longs.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Longs.contains
	scala.Array [com.google.common.primitives.Longs]  →  Longs.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Longs.indexOf
	scala.Array [com.google.common.primitives.Longs]  →  Longs.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Longs.compare
	LONG [com.google.common.primitives.Longs]  →  Longs.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Longs.hashCode
	LONG [com.google.common.primitives.Longs]  →  Longs.hashCode($expr$)


## Primitives

.allPrimitiveTypes : com.google.common.primitives.Primitives.allPrimitiveTypes
	java.lang.Object [com.google.common.primitives.Primitives]  →  Primitives.allPrimitiveTypes()

.isWrapperType : com.google.common.primitives.Primitives.isWrapperType
	java.lang.Class [com.google.common.primitives.Primitives]  →  Primitives.isWrapperType($expr$)

.unwrap : com.google.common.primitives.Primitives.unwrap
	java.lang.Class [com.google.common.primitives.Primitives]  →  Primitives.unwrap($expr$)

.wrap : com.google.common.primitives.Primitives.wrap
	java.lang.Class [com.google.common.primitives.Primitives]  →  Primitives.wrap($expr$)

.allWrapperTypes : com.google.common.primitives.Primitives.allWrapperTypes
	java.lang.Object [com.google.common.primitives.Primitives]  →  Primitives.allWrapperTypes()


## Shorts

.asList : com.google.common.primitives.Shorts.asList
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.asList($expr$)

.join : com.google.common.primitives.Shorts.join
	java.lang.String [com.google.common.primitives.Shorts]  →  Shorts.join($expr$, $arg$)

.lastIndexOf : com.google.common.primitives.Shorts.lastIndexOf
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.lastIndexOf($expr$, $arg$)

.constrainToRange : com.google.common.primitives.Shorts.constrainToRange
	SHORT [com.google.common.primitives.Shorts]  →  Shorts.constrainToRange($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.Shorts.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.Shorts]  →  Shorts.lexicographicalComparator()

.concat : com.google.common.primitives.Shorts.concat
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.concat($expr$)

.min : com.google.common.primitives.Shorts.min
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.min($expr$)

.stringConverter : com.google.common.primitives.Shorts.stringConverter
	java.lang.Object [com.google.common.primitives.Shorts]  →  Shorts.stringConverter()

.fromByteArray : com.google.common.primitives.Shorts.fromByteArray
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.fromByteArray($expr$)

.ensureCapacity : com.google.common.primitives.Shorts.ensureCapacity
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.ensureCapacity($expr$, $arg$)

.reverse : com.google.common.primitives.Shorts.reverse
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.reverse($expr$, $arg$)

.max : com.google.common.primitives.Shorts.max
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.max($expr$)

.saturatedCast : com.google.common.primitives.Shorts.saturatedCast
	LONG [com.google.common.primitives.Shorts]  →  Shorts.saturatedCast($expr$)

.toArray : com.google.common.primitives.Shorts.toArray
	java.util.Collection [com.google.common.primitives.Shorts]  →  Shorts.toArray($expr$)

.checkedCast : com.google.common.primitives.Shorts.checkedCast
	LONG [com.google.common.primitives.Shorts]  →  Shorts.checkedCast($expr$)

.fromBytes : com.google.common.primitives.Shorts.fromBytes
	BYTE [com.google.common.primitives.Shorts]  →  Shorts.fromBytes($expr$, $arg$)

.toByteArray : com.google.common.primitives.Shorts.toByteArray
	SHORT [com.google.common.primitives.Shorts]  →  Shorts.toByteArray($expr$)

.sortDescending : com.google.common.primitives.Shorts.sortDescending
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.sortDescending($expr$, $arg$)

.contains : com.google.common.primitives.Shorts.contains
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.contains($expr$, $arg$)

.indexOf : com.google.common.primitives.Shorts.indexOf
	scala.Array [com.google.common.primitives.Shorts]  →  Shorts.indexOf($expr$, $arg$)

.compare : com.google.common.primitives.Shorts.compare
	SHORT [com.google.common.primitives.Shorts]  →  Shorts.compare($expr$, $arg$)

.hashCode : com.google.common.primitives.Shorts.hashCode
	SHORT [com.google.common.primitives.Shorts]  →  Shorts.hashCode($expr$)


## SignedBytes

.join : com.google.common.primitives.SignedBytes.join
	java.lang.String [com.google.common.primitives.SignedBytes]  →  SignedBytes.join($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.SignedBytes.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.SignedBytes]  →  SignedBytes.lexicographicalComparator()

.min : com.google.common.primitives.SignedBytes.min
	scala.Array [com.google.common.primitives.SignedBytes]  →  SignedBytes.min($expr$)

.max : com.google.common.primitives.SignedBytes.max
	scala.Array [com.google.common.primitives.SignedBytes]  →  SignedBytes.max($expr$)

.saturatedCast : com.google.common.primitives.SignedBytes.saturatedCast
	LONG [com.google.common.primitives.SignedBytes]  →  SignedBytes.saturatedCast($expr$)

.checkedCast : com.google.common.primitives.SignedBytes.checkedCast
	LONG [com.google.common.primitives.SignedBytes]  →  SignedBytes.checkedCast($expr$)

.sortDescending : com.google.common.primitives.SignedBytes.sortDescending
	scala.Array [com.google.common.primitives.SignedBytes]  →  SignedBytes.sortDescending($expr$, $arg$)

.compare : com.google.common.primitives.SignedBytes.compare
	BYTE [com.google.common.primitives.SignedBytes]  →  SignedBytes.compare($expr$, $arg$)


## UnsignedBytes

.parseUnsignedByte : com.google.common.primitives.UnsignedBytes.parseUnsignedByte
	java.lang.String [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.parseUnsignedByte($expr$, $arg$)

.join : com.google.common.primitives.UnsignedBytes.join
	java.lang.String [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.join($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.UnsignedBytes.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.lexicographicalComparator()

.min : com.google.common.primitives.UnsignedBytes.min
	scala.Array [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.min($expr$)

.max : com.google.common.primitives.UnsignedBytes.max
	scala.Array [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.max($expr$)

.saturatedCast : com.google.common.primitives.UnsignedBytes.saturatedCast
	LONG [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.saturatedCast($expr$)

.toInt : com.google.common.primitives.UnsignedBytes.toInt
	BYTE [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.toInt($expr$)

.checkedCast : com.google.common.primitives.UnsignedBytes.checkedCast
	LONG [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.checkedCast($expr$)

.toString : com.google.common.primitives.UnsignedBytes.toString
	BYTE [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.toString($expr$, $arg$)

.sort : com.google.common.primitives.UnsignedBytes.sort
	scala.Array [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.sort($expr$, $arg$)

.sortDescending : com.google.common.primitives.UnsignedBytes.sortDescending
	scala.Array [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.sortDescending($expr$, $arg$)

.compare : com.google.common.primitives.UnsignedBytes.compare
	BYTE [com.google.common.primitives.UnsignedBytes]  →  UnsignedBytes.compare($expr$, $arg$)


## UnsignedInteger

.valueOf : com.google.common.primitives.UnsignedInteger.valueOf
	java.lang.String [com.google.common.primitives.UnsignedInteger]  →  UnsignedInteger.valueOf($expr$, $arg$)
	LONG [com.google.common.primitives.UnsignedInteger]  →  UnsignedInteger.valueOf($expr$)
	java.math.BigInteger [com.google.common.primitives.UnsignedInteger]  →  UnsignedInteger.valueOf($expr$)

.fromIntBits : com.google.common.primitives.UnsignedInteger.fromIntBits
	INT [com.google.common.primitives.UnsignedInteger]  →  UnsignedInteger.fromIntBits($expr$)


## UnsignedInts

.remainder : com.google.common.primitives.UnsignedInts.remainder
	INT [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.remainder($expr$, $arg$)

.join : com.google.common.primitives.UnsignedInts.join
	java.lang.String [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.join($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.UnsignedInts.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.lexicographicalComparator()

.min : com.google.common.primitives.UnsignedInts.min
	scala.Array [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.min($expr$)

.divide : com.google.common.primitives.UnsignedInts.divide
	INT [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.divide($expr$, $arg$)

.decode : com.google.common.primitives.UnsignedInts.decode
	java.lang.String [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.decode($expr$)

.toLong : com.google.common.primitives.UnsignedInts.toLong
	INT [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.toLong($expr$)

.max : com.google.common.primitives.UnsignedInts.max
	scala.Array [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.max($expr$)

.saturatedCast : com.google.common.primitives.UnsignedInts.saturatedCast
	LONG [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.saturatedCast($expr$)

.parseUnsignedInt : com.google.common.primitives.UnsignedInts.parseUnsignedInt
	java.lang.String [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.parseUnsignedInt($expr$, $arg$)

.checkedCast : com.google.common.primitives.UnsignedInts.checkedCast
	LONG [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.checkedCast($expr$)

.toString : com.google.common.primitives.UnsignedInts.toString
	INT [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.toString($expr$, $arg$)

.sort : com.google.common.primitives.UnsignedInts.sort
	scala.Array [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.sort($expr$, $arg$)

.sortDescending : com.google.common.primitives.UnsignedInts.sortDescending
	scala.Array [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.sortDescending($expr$, $arg$)

.compare : com.google.common.primitives.UnsignedInts.compare
	INT [com.google.common.primitives.UnsignedInts]  →  UnsignedInts.compare($expr$, $arg$)


## UnsignedLong

.fromLongBits : com.google.common.primitives.UnsignedLong.fromLongBits
	LONG [com.google.common.primitives.UnsignedLong]  →  UnsignedLong.fromLongBits($expr$)

.valueOf : com.google.common.primitives.UnsignedLong.valueOf
	java.lang.String [com.google.common.primitives.UnsignedLong]  →  UnsignedLong.valueOf($expr$, $arg$)
	LONG [com.google.common.primitives.UnsignedLong]  →  UnsignedLong.valueOf($expr$)
	java.math.BigInteger [com.google.common.primitives.UnsignedLong]  →  UnsignedLong.valueOf($expr$)


## UnsignedLongs

.remainder : com.google.common.primitives.UnsignedLongs.remainder
	LONG [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.remainder($expr$, $arg$)

.join : com.google.common.primitives.UnsignedLongs.join
	java.lang.String [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.join($expr$, $arg$)

.lexicographicalComparator : com.google.common.primitives.UnsignedLongs.lexicographicalComparator
	java.lang.Object [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.lexicographicalComparator()

.min : com.google.common.primitives.UnsignedLongs.min
	scala.Array [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.min($expr$)

.divide : com.google.common.primitives.UnsignedLongs.divide
	LONG [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.divide($expr$, $arg$)

.decode : com.google.common.primitives.UnsignedLongs.decode
	java.lang.String [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.decode($expr$)

.parseUnsignedLong : com.google.common.primitives.UnsignedLongs.parseUnsignedLong
	java.lang.String [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.parseUnsignedLong($expr$, $arg$)

.max : com.google.common.primitives.UnsignedLongs.max
	scala.Array [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.max($expr$)

.toString : com.google.common.primitives.UnsignedLongs.toString
	LONG [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.toString($expr$, $arg$)

.sort : com.google.common.primitives.UnsignedLongs.sort
	scala.Array [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.sort($expr$, $arg$)

.sortDescending : com.google.common.primitives.UnsignedLongs.sortDescending
	scala.Array [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.sortDescending($expr$, $arg$)

.compare : com.google.common.primitives.UnsignedLongs.compare
	LONG [com.google.common.primitives.UnsignedLongs]  →  UnsignedLongs.compare($expr$, $arg$)


## ClassPath

.from : com.google.common.reflect.ClassPath.from
	java.lang.ClassLoader [com.google.common.reflect.ClassPath]  →  ClassPath.from($expr$)


## ImmutableTypeToInstanceMap

.builder : com.google.common.reflect.ImmutableTypeToInstanceMap.builder
	java.lang.Object [com.google.common.reflect.ImmutableTypeToInstanceMap]  →  ImmutableTypeToInstanceMap.builder()

.of : com.google.common.reflect.ImmutableTypeToInstanceMap.of
	java.lang.Object [com.google.common.reflect.ImmutableTypeToInstanceMap]  →  ImmutableTypeToInstanceMap.of()


## Invokable

.from : com.google.common.reflect.Invokable.from
	java.lang.reflect.Constructor [com.google.common.reflect.Invokable]  →  Invokable.from($expr$)
	java.lang.reflect.Method [com.google.common.reflect.Invokable]  →  Invokable.from($expr$)


## Reflection

.initialize : com.google.common.reflect.Reflection.initialize
	scala.Array [com.google.common.reflect.Reflection]  →  Reflection.initialize($expr$)

.getPackageName : com.google.common.reflect.Reflection.getPackageName
	java.lang.String [com.google.common.reflect.Reflection]  →  Reflection.getPackageName($expr$)
	java.lang.Class [com.google.common.reflect.Reflection]  →  Reflection.getPackageName($expr$)

.newProxy : com.google.common.reflect.Reflection.newProxy
	java.lang.Class [com.google.common.reflect.Reflection]  →  Reflection.newProxy($expr$, $arg$)


## TypeToken

.of : com.google.common.reflect.TypeToken.of
	java.lang.reflect.Type [com.google.common.reflect.TypeToken]  →  TypeToken.of($expr$)
	java.lang.Class [com.google.common.reflect.TypeToken]  →  TypeToken.of($expr$)


## AtomicLongMap

.create : com.google.common.util.concurrent.AtomicLongMap.create
	java.util.Map [com.google.common.util.concurrent.AtomicLongMap]  →  AtomicLongMap.create($expr$)
	java.lang.Object [com.google.common.util.concurrent.AtomicLongMap]  →  AtomicLongMap.create()


## Atomics

.newReferenceArray : com.google.common.util.concurrent.Atomics.newReferenceArray
	scala.Array [com.google.common.util.concurrent.Atomics]  →  Atomics.newReferenceArray($expr$)
	INT [com.google.common.util.concurrent.Atomics]  →  Atomics.newReferenceArray($expr$)

.newReference : com.google.common.util.concurrent.Atomics.newReference
	java.lang.Object [com.google.common.util.concurrent.Atomics]  →  Atomics.newReference($expr$)
	java.lang.Object [com.google.common.util.concurrent.Atomics]  →  Atomics.newReference()


## Callables

.asAsyncCallable : com.google.common.util.concurrent.Callables.asAsyncCallable
	java.util.concurrent.Callable [com.google.common.util.concurrent.Callables]  →  Callables.asAsyncCallable($expr$, $arg$)

.returning : com.google.common.util.concurrent.Callables.returning
	java.lang.Object [com.google.common.util.concurrent.Callables]  →  Callables.returning($expr$)


## ClosingFuture

.whenAllSucceed : com.google.common.util.concurrent.ClosingFuture.whenAllSucceed
	java.lang.Iterable [com.google.common.util.concurrent.ClosingFuture]  →  ClosingFuture.whenAllSucceed($expr$)
	com.google.common.util.concurrent.ClosingFuture [com.google.common.util.concurrent.ClosingFuture]  →  ClosingFuture.whenAllSucceed($expr$, $arg$)

.withoutCloser : com.google.common.util.concurrent.ClosingFuture.withoutCloser
	com.google.common.util.concurrent.AsyncFunction [com.google.common.util.concurrent.ClosingFuture]  →  ClosingFuture.withoutCloser($expr$)

.whenAllComplete : com.google.common.util.concurrent.ClosingFuture.whenAllComplete
	java.lang.Iterable [com.google.common.util.concurrent.ClosingFuture]  →  ClosingFuture.whenAllComplete($expr$)
	com.google.common.util.concurrent.ClosingFuture [com.google.common.util.concurrent.ClosingFuture]  →  ClosingFuture.whenAllComplete($expr$, $arg$)

.submit : com.google.common.util.concurrent.ClosingFuture.submit
	com.google.common.util.concurrent.ClosingFuture.ClosingCallable [com.google.common.util.concurrent.ClosingFuture]  →  ClosingFuture.submit($expr$, $arg$)

.submitAsync : com.google.common.util.concurrent.ClosingFuture.submitAsync
	com.google.common.util.concurrent.ClosingFuture.AsyncClosingCallable [com.google.common.util.concurrent.ClosingFuture]  →  ClosingFuture.submitAsync($expr$, $arg$)

.from : com.google.common.util.concurrent.ClosingFuture.from
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.ClosingFuture]  →  ClosingFuture.from($expr$)


## CycleDetectingLockFactory

.newInstance : com.google.common.util.concurrent.CycleDetectingLockFactory.newInstance
	com.google.common.util.concurrent.CycleDetectingLockFactory.Policy [com.google.common.util.concurrent.CycleDetectingLockFactory]  →  CycleDetectingLockFactory.newInstance($expr$)

.newInstanceWithExplicitOrdering : com.google.common.util.concurrent.CycleDetectingLockFactory.newInstanceWithExplicitOrdering
	java.lang.Class [com.google.common.util.concurrent.CycleDetectingLockFactory]  →  CycleDetectingLockFactory.newInstanceWithExplicitOrdering($expr$, $arg$)


## ExecutionSequencer

.create : com.google.common.util.concurrent.ExecutionSequencer.create
	java.lang.Object [com.google.common.util.concurrent.ExecutionSequencer]  →  ExecutionSequencer.create()


## FluentFuture

.from : com.google.common.util.concurrent.FluentFuture.from
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.FluentFuture]  →  FluentFuture.from($expr$)


## Futures

.withTimeout : com.google.common.util.concurrent.Futures.withTimeout
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  Futures.withTimeout($expr$, $arg$)

.successfulAsList : com.google.common.util.concurrent.Futures.successfulAsList
	scala.Array [com.google.common.util.concurrent.Futures]  →  Futures.successfulAsList($expr$)
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  Futures.successfulAsList($expr$)

.whenAllSucceed : com.google.common.util.concurrent.Futures.whenAllSucceed
	scala.Array [com.google.common.util.concurrent.Futures]  →  Futures.whenAllSucceed($expr$)
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  Futures.whenAllSucceed($expr$)

.getUnchecked : com.google.common.util.concurrent.Futures.getUnchecked
	java.util.concurrent.Future [com.google.common.util.concurrent.Futures]  →  Futures.getUnchecked($expr$)

.immediateFailedFuture : com.google.common.util.concurrent.Futures.immediateFailedFuture
	java.lang.Throwable [com.google.common.util.concurrent.Futures]  →  Futures.immediateFailedFuture($expr$)

.whenAllComplete : com.google.common.util.concurrent.Futures.whenAllComplete
	scala.Array [com.google.common.util.concurrent.Futures]  →  Futures.whenAllComplete($expr$)
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  Futures.whenAllComplete($expr$)

.submit : com.google.common.util.concurrent.Futures.submit
	java.util.concurrent.Callable [com.google.common.util.concurrent.Futures]  →  Futures.submit($expr$, $arg$)
	java.lang.Runnable [com.google.common.util.concurrent.Futures]  →  Futures.submit($expr$, $arg$)

.allAsList : com.google.common.util.concurrent.Futures.allAsList
	scala.Array [com.google.common.util.concurrent.Futures]  →  Futures.allAsList($expr$)
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  Futures.allAsList($expr$)

.immediateCancelledFuture : com.google.common.util.concurrent.Futures.immediateCancelledFuture
	java.lang.Object [com.google.common.util.concurrent.Futures]  →  Futures.immediateCancelledFuture()

.catching : com.google.common.util.concurrent.Futures.catching
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  Futures.catching($expr$, $arg$)

.submitAsync : com.google.common.util.concurrent.Futures.submitAsync
	com.google.common.util.concurrent.AsyncCallable [com.google.common.util.concurrent.Futures]  →  Futures.submitAsync($expr$, $arg$)

.getChecked : com.google.common.util.concurrent.Futures.getChecked
	java.util.concurrent.Future [com.google.common.util.concurrent.Futures]  →  Futures.getChecked($expr$, $arg$)

.transformAsync : com.google.common.util.concurrent.Futures.transformAsync
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  Futures.transformAsync($expr$, $arg$)

.catchingAsync : com.google.common.util.concurrent.Futures.catchingAsync
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  Futures.catchingAsync($expr$, $arg$)

.nonCancellationPropagating : com.google.common.util.concurrent.Futures.nonCancellationPropagating
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  Futures.nonCancellationPropagating($expr$)

.lazyTransform : com.google.common.util.concurrent.Futures.lazyTransform
	java.util.concurrent.Future [com.google.common.util.concurrent.Futures]  →  Futures.lazyTransform($expr$, $arg$)

.inCompletionOrder : com.google.common.util.concurrent.Futures.inCompletionOrder
	java.lang.Iterable [com.google.common.util.concurrent.Futures]  →  Futures.inCompletionOrder($expr$)

.scheduleAsync : com.google.common.util.concurrent.Futures.scheduleAsync
	com.google.common.util.concurrent.AsyncCallable [com.google.common.util.concurrent.Futures]  →  Futures.scheduleAsync($expr$, $arg$)

.addCallback : com.google.common.util.concurrent.Futures.addCallback
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  Futures.addCallback($expr$, $arg$)

.immediateFuture : com.google.common.util.concurrent.Futures.immediateFuture
	java.lang.Object [com.google.common.util.concurrent.Futures]  →  Futures.immediateFuture($expr$)

.immediateVoidFuture : com.google.common.util.concurrent.Futures.immediateVoidFuture
	java.lang.Object [com.google.common.util.concurrent.Futures]  →  Futures.immediateVoidFuture()

.transform : com.google.common.util.concurrent.Futures.transform
	com.google.common.util.concurrent.ListenableFuture [com.google.common.util.concurrent.Futures]  →  Futures.transform($expr$, $arg$)

.getDone : com.google.common.util.concurrent.Futures.getDone
	java.util.concurrent.Future [com.google.common.util.concurrent.Futures]  →  Futures.getDone($expr$)


## JdkFutureAdapters

.listenInPoolThread : com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread
	java.util.concurrent.Future [com.google.common.util.concurrent.JdkFutureAdapters]  →  JdkFutureAdapters.listenInPoolThread($expr$, $arg$)


## ListenableFutureTask

.create : com.google.common.util.concurrent.ListenableFutureTask.create
	java.util.concurrent.Callable [com.google.common.util.concurrent.ListenableFutureTask]  →  ListenableFutureTask.create($expr$)
	java.lang.Runnable [com.google.common.util.concurrent.ListenableFutureTask]  →  ListenableFutureTask.create($expr$, $arg$)


## MoreExecutors

.addDelayedShutdownHook : com.google.common.util.concurrent.MoreExecutors.addDelayedShutdownHook
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.addDelayedShutdownHook($expr$, $arg$)

.listeningDecorator : com.google.common.util.concurrent.MoreExecutors.listeningDecorator
	java.util.concurrent.ScheduledExecutorService [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.listeningDecorator($expr$)
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.listeningDecorator($expr$)

.getExitingExecutorService : com.google.common.util.concurrent.MoreExecutors.getExitingExecutorService
	java.util.concurrent.ThreadPoolExecutor [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.getExitingExecutorService($expr$, $arg$)

.newSequentialExecutor : com.google.common.util.concurrent.MoreExecutors.newSequentialExecutor
	java.util.concurrent.Executor [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.newSequentialExecutor($expr$)

.platformThreadFactory : com.google.common.util.concurrent.MoreExecutors.platformThreadFactory
	java.lang.Object [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.platformThreadFactory()

.shutdownAndAwaitTermination : com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.shutdownAndAwaitTermination($expr$, $arg$)

.newDirectExecutorService : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService
	java.lang.Object [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.newDirectExecutorService()

.directExecutor : com.google.common.util.concurrent.MoreExecutors.directExecutor
	java.lang.Object [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.directExecutor()

.getExitingScheduledExecutorService : com.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService
	java.util.concurrent.ScheduledThreadPoolExecutor [com.google.common.util.concurrent.MoreExecutors]  →  MoreExecutors.getExitingScheduledExecutorService($expr$, $arg$)


## RateLimiter

.create : com.google.common.util.concurrent.RateLimiter.create
	DOUBLE [com.google.common.util.concurrent.RateLimiter]  →  RateLimiter.create($expr$, $arg$)


## Runnables

.doNothing : com.google.common.util.concurrent.Runnables.doNothing
	java.lang.Object [com.google.common.util.concurrent.Runnables]  →  Runnables.doNothing()


## SettableFuture

.create : com.google.common.util.concurrent.SettableFuture.create
	java.lang.Object [com.google.common.util.concurrent.SettableFuture]  →  SettableFuture.create()


## SimpleTimeLimiter

.create : com.google.common.util.concurrent.SimpleTimeLimiter.create
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.SimpleTimeLimiter]  →  SimpleTimeLimiter.create($expr$)


## Striped

.lazyWeakSemaphore : com.google.common.util.concurrent.Striped.lazyWeakSemaphore
	INT [com.google.common.util.concurrent.Striped]  →  Striped.lazyWeakSemaphore($expr$, $arg$)

.lazyWeakLock : com.google.common.util.concurrent.Striped.lazyWeakLock
	INT [com.google.common.util.concurrent.Striped]  →  Striped.lazyWeakLock($expr$)

.lock : com.google.common.util.concurrent.Striped.lock
	INT [com.google.common.util.concurrent.Striped]  →  Striped.lock($expr$)

.lazyWeakReadWriteLock : com.google.common.util.concurrent.Striped.lazyWeakReadWriteLock
	INT [com.google.common.util.concurrent.Striped]  →  Striped.lazyWeakReadWriteLock($expr$)

.readWriteLock : com.google.common.util.concurrent.Striped.readWriteLock
	INT [com.google.common.util.concurrent.Striped]  →  Striped.readWriteLock($expr$)

.semaphore : com.google.common.util.concurrent.Striped.semaphore
	INT [com.google.common.util.concurrent.Striped]  →  Striped.semaphore($expr$, $arg$)


## UncaughtExceptionHandlers

.systemExit : com.google.common.util.concurrent.UncaughtExceptionHandlers.systemExit
	java.lang.Object [com.google.common.util.concurrent.UncaughtExceptionHandlers]  →  UncaughtExceptionHandlers.systemExit()


## Uninterruptibles

.awaitUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly
	java.util.concurrent.locks.Condition [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.awaitUninterruptibly($expr$, $arg$)
	java.util.concurrent.CountDownLatch [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.awaitUninterruptibly($expr$, $arg$)

.tryLockUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.tryLockUninterruptibly
	java.util.concurrent.locks.Lock [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.tryLockUninterruptibly($expr$, $arg$)

.sleepUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly
	java.time.Duration [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.sleepUninterruptibly($expr$)
	LONG [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.sleepUninterruptibly($expr$, $arg$)

.awaitTerminationUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.awaitTerminationUninterruptibly
	java.util.concurrent.ExecutorService [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.awaitTerminationUninterruptibly($expr$, $arg$)

.joinUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly
	java.lang.Thread [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.joinUninterruptibly($expr$, $arg$)

.putUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.putUninterruptibly
	java.util.concurrent.BlockingQueue [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.putUninterruptibly($expr$, $arg$)

.getUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly
	java.util.concurrent.Future [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.getUninterruptibly($expr$, $arg$)

.takeUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly
	java.util.concurrent.BlockingQueue [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.takeUninterruptibly($expr$)

.tryAcquireUninterruptibly : com.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly
	java.util.concurrent.Semaphore [com.google.common.util.concurrent.Uninterruptibles]  →  Uninterruptibles.tryAcquireUninterruptibly($expr$, $arg$)


## InternalFutures

.tryInternalFastPathGetFailure : com.google.common.util.concurrent.internal.InternalFutures.tryInternalFastPathGetFailure
	com.google.common.util.concurrent.internal.InternalFutureFailureAccess [com.google.common.util.concurrent.internal.InternalFutures]  →  InternalFutures.tryInternalFastPathGetFailure($expr$)


## XmlEscapers

.xmlAttributeEscaper : com.google.common.xml.XmlEscapers.xmlAttributeEscaper
	java.lang.Object [com.google.common.xml.XmlEscapers]  →  XmlEscapers.xmlAttributeEscaper()

.xmlContentEscaper : com.google.common.xml.XmlEscapers.xmlContentEscaper
	java.lang.Object [com.google.common.xml.XmlEscapers]  →  XmlEscapers.xmlContentEscaper()


## Hutool

.getAllUtils : cn.hutool.Hutool.getAllUtils
	java.lang.Object [cn.hutool.Hutool]  →  Hutool.getAllUtils()

.printAllUtils : cn.hutool.Hutool.printAllUtils
	java.lang.Object [cn.hutool.Hutool]  →  Hutool.printAllUtils()


## ProxyUtil

.proxy : cn.hutool.aop.ProxyUtil.proxy
	java.lang.Object [cn.hutool.aop.ProxyUtil]  →  ProxyUtil.proxy($expr$, $arg$)

.newProxyInstance : cn.hutool.aop.ProxyUtil.newProxyInstance
	java.lang.reflect.InvocationHandler [cn.hutool.aop.ProxyUtil]  →  ProxyUtil.newProxyInstance($expr$, $arg$)
	java.lang.ClassLoader [cn.hutool.aop.ProxyUtil]  →  ProxyUtil.newProxyInstance($expr$, $arg$)


## CglibProxyFactory

.create : cn.hutool.aop.proxy.CglibProxyFactory.create
	java.lang.Object [cn.hutool.aop.proxy.CglibProxyFactory]  →  CglibProxyFactory.create()

.createProxy : cn.hutool.aop.proxy.CglibProxyFactory.createProxy
	java.lang.Object [cn.hutool.aop.proxy.CglibProxyFactory]  →  CglibProxyFactory.createProxy($expr$, $arg$)


## JdkProxyFactory

.create : cn.hutool.aop.proxy.JdkProxyFactory.create
	java.lang.Object [cn.hutool.aop.proxy.JdkProxyFactory]  →  JdkProxyFactory.create()

.createProxy : cn.hutool.aop.proxy.JdkProxyFactory.createProxy
	java.lang.Object [cn.hutool.aop.proxy.JdkProxyFactory]  →  JdkProxyFactory.createProxy($expr$, $arg$)


## ProxyFactory

.create : cn.hutool.aop.proxy.ProxyFactory.create
	java.lang.Object [cn.hutool.aop.proxy.ProxyFactory]  →  ProxyFactory.create()

.createProxy : cn.hutool.aop.proxy.ProxyFactory.createProxy
	java.lang.Object [cn.hutool.aop.proxy.ProxyFactory]  →  ProxyFactory.createProxy($expr$, $arg$)


## SpringCglibProxyFactory

.create : cn.hutool.aop.proxy.SpringCglibProxyFactory.create
	java.lang.Object [cn.hutool.aop.proxy.SpringCglibProxyFactory]  →  SpringCglibProxyFactory.create()

.createProxy : cn.hutool.aop.proxy.SpringCglibProxyFactory.createProxy
	java.lang.Object [cn.hutool.aop.proxy.SpringCglibProxyFactory]  →  SpringCglibProxyFactory.createProxy($expr$, $arg$)


## BitSetBloomFilter

.createHashes : cn.hutool.bloomfilter.BitSetBloomFilter.createHashes
	java.lang.String [cn.hutool.bloomfilter.BitSetBloomFilter]  →  BitSetBloomFilter.createHashes($expr$, $arg$)

.hash : cn.hutool.bloomfilter.BitSetBloomFilter.hash
	java.lang.String [cn.hutool.bloomfilter.BitSetBloomFilter]  →  BitSetBloomFilter.hash($expr$, $arg$)


## BloomFilterUtil

.createBitMap : cn.hutool.bloomfilter.BloomFilterUtil.createBitMap
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  BloomFilterUtil.createBitMap($expr$)

.createBitSet : cn.hutool.bloomfilter.BloomFilterUtil.createBitSet
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  BloomFilterUtil.createBitSet($expr$, $arg$)


## CacheUtil

.newWeakCache : cn.hutool.cache.CacheUtil.newWeakCache
	LONG [cn.hutool.cache.CacheUtil]  →  CacheUtil.newWeakCache($expr$)

.newLRUCache : cn.hutool.cache.CacheUtil.newLRUCache
	INT [cn.hutool.cache.CacheUtil]  →  CacheUtil.newLRUCache($expr$, $arg$)

.newLFUCache : cn.hutool.cache.CacheUtil.newLFUCache
	INT [cn.hutool.cache.CacheUtil]  →  CacheUtil.newLFUCache($expr$, $arg$)

.newNoCache : cn.hutool.cache.CacheUtil.newNoCache
	java.lang.Object [cn.hutool.cache.CacheUtil]  →  CacheUtil.newNoCache()

.newTimedCache : cn.hutool.cache.CacheUtil.newTimedCache
	LONG [cn.hutool.cache.CacheUtil]  →  CacheUtil.newTimedCache($expr$)

.newFIFOCache : cn.hutool.cache.CacheUtil.newFIFOCache
	INT [cn.hutool.cache.CacheUtil]  →  CacheUtil.newFIFOCache($expr$, $arg$)


## CaptchaUtil

.createLineCaptcha : cn.hutool.captcha.CaptchaUtil.createLineCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  CaptchaUtil.createLineCaptcha($expr$, $arg$)

.createShearCaptcha : cn.hutool.captcha.CaptchaUtil.createShearCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  CaptchaUtil.createShearCaptcha($expr$, $arg$)

.createCircleCaptcha : cn.hutool.captcha.CaptchaUtil.createCircleCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  CaptchaUtil.createCircleCaptcha($expr$, $arg$)

.createGifCaptcha : cn.hutool.captcha.CaptchaUtil.createGifCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  CaptchaUtil.createGifCaptcha($expr$, $arg$)


## AnnotationUtil

.getTargetType : cn.hutool.core.annotation.AnnotationUtil.getTargetType
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getTargetType($expr$)

.getAnnotations : cn.hutool.core.annotation.AnnotationUtil.getAnnotations
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getAnnotations($expr$, $arg$)

.isDocumented : cn.hutool.core.annotation.AnnotationUtil.isDocumented
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.isDocumented($expr$)

.setValue : cn.hutool.core.annotation.AnnotationUtil.setValue
	java.lang.annotation.Annotation [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.setValue($expr$, $arg$)

.getAnnotationValue : cn.hutool.core.annotation.AnnotationUtil.getAnnotationValue
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getAnnotationValue($expr$, $arg$)

.toCombination : cn.hutool.core.annotation.AnnotationUtil.toCombination
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.toCombination($expr$)

.isInherited : cn.hutool.core.annotation.AnnotationUtil.isInherited
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.isInherited($expr$)

.getRetentionPolicy : cn.hutool.core.annotation.AnnotationUtil.getRetentionPolicy
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getRetentionPolicy($expr$)

.getAnnotation : cn.hutool.core.annotation.AnnotationUtil.getAnnotation
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getAnnotation($expr$, $arg$)

.hasAnnotation : cn.hutool.core.annotation.AnnotationUtil.hasAnnotation
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.hasAnnotation($expr$, $arg$)

.getAnnotationValueMap : cn.hutool.core.annotation.AnnotationUtil.getAnnotationValueMap
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getAnnotationValueMap($expr$, $arg$)


## BeanPath

.create : cn.hutool.core.bean.BeanPath.create
	java.lang.String [cn.hutool.core.bean.BeanPath]  →  BeanPath.create($expr$)


## BeanUtil

.toBeanIgnoreError : cn.hutool.core.bean.BeanUtil.toBeanIgnoreError
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.toBeanIgnoreError($expr$, $arg$)

.isReadableBean : cn.hutool.core.bean.BeanUtil.isReadableBean
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isReadableBean($expr$)

.getFieldValue : cn.hutool.core.bean.BeanUtil.getFieldValue
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getFieldValue($expr$, $arg$)

.mapToBean : cn.hutool.core.bean.BeanUtil.mapToBean
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.mapToBean($expr$, $arg$)

.isMatchName : cn.hutool.core.bean.BeanUtil.isMatchName
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isMatchName($expr$, $arg$)

.fillBean : cn.hutool.core.bean.BeanUtil.fillBean
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.fillBean($expr$, $arg$)

.hasGetter : cn.hutool.core.bean.BeanUtil.hasGetter
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.hasGetter($expr$)

.isBean : cn.hutool.core.bean.BeanUtil.isBean
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isBean($expr$)

.createDynaBean : cn.hutool.core.bean.BeanUtil.createDynaBean
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.createDynaBean($expr$)

.getBeanDesc : cn.hutool.core.bean.BeanUtil.getBeanDesc
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getBeanDesc($expr$)

.getPropertyDescriptors : cn.hutool.core.bean.BeanUtil.getPropertyDescriptors
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getPropertyDescriptors($expr$)

.isNotEmpty : cn.hutool.core.bean.BeanUtil.isNotEmpty
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isNotEmpty($expr$, $arg$)

.hasNullField : cn.hutool.core.bean.BeanUtil.hasNullField
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.hasNullField($expr$, $arg$)

.toBeanIgnoreCase : cn.hutool.core.bean.BeanUtil.toBeanIgnoreCase
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.toBeanIgnoreCase($expr$, $arg$)

.getPropertyDescriptor : cn.hutool.core.bean.BeanUtil.getPropertyDescriptor
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getPropertyDescriptor($expr$, $arg$)

.copyToList : cn.hutool.core.bean.BeanUtil.copyToList
	java.util.Collection [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.copyToList($expr$, $arg$)

.descForEach : cn.hutool.core.bean.BeanUtil.descForEach
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.descForEach($expr$, $arg$)

.hasSetter : cn.hutool.core.bean.BeanUtil.hasSetter
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.hasSetter($expr$)

.getProperty : cn.hutool.core.bean.BeanUtil.getProperty
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getProperty($expr$, $arg$)

.beanToMap : cn.hutool.core.bean.BeanUtil.beanToMap
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.beanToMap($expr$, $arg$)

.edit : cn.hutool.core.bean.BeanUtil.edit
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.edit($expr$, $arg$)

.setProperty : cn.hutool.core.bean.BeanUtil.setProperty
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.setProperty($expr$, $arg$)

.fillBeanWithMapIgnoreCase : cn.hutool.core.bean.BeanUtil.fillBeanWithMapIgnoreCase
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.fillBeanWithMapIgnoreCase($expr$, $arg$)

.getPropertyDescriptorMap : cn.hutool.core.bean.BeanUtil.getPropertyDescriptorMap
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getPropertyDescriptorMap($expr$, $arg$)

.copyProperties : cn.hutool.core.bean.BeanUtil.copyProperties
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.copyProperties($expr$, $arg$)

.setFieldValue : cn.hutool.core.bean.BeanUtil.setFieldValue
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.setFieldValue($expr$, $arg$)

.toBean : cn.hutool.core.bean.BeanUtil.toBean
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.toBean($expr$, $arg$)
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.toBean($expr$, $arg$)

.findEditor : cn.hutool.core.bean.BeanUtil.findEditor
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.findEditor($expr$)

.trimStrFields : cn.hutool.core.bean.BeanUtil.trimStrFields
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.trimStrFields($expr$, $arg$)

.isEmpty : cn.hutool.core.bean.BeanUtil.isEmpty
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isEmpty($expr$, $arg$)

.hasPublicField : cn.hutool.core.bean.BeanUtil.hasPublicField
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.hasPublicField($expr$)

.fillBeanWithMap : cn.hutool.core.bean.BeanUtil.fillBeanWithMap
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.fillBeanWithMap($expr$, $arg$)


## DynaBean

.create : cn.hutool.core.bean.DynaBean.create
	java.lang.Class [cn.hutool.core.bean.DynaBean]  →  DynaBean.create($expr$, $arg$)
	java.lang.Object [cn.hutool.core.bean.DynaBean]  →  DynaBean.create($expr$)


## BeanCopier

.create : cn.hutool.core.bean.copier.BeanCopier.create
	java.lang.Object [cn.hutool.core.bean.copier.BeanCopier]  →  BeanCopier.create($expr$, $arg$)


## CopyOptions

.create : cn.hutool.core.bean.copier.CopyOptions.create
	java.lang.Class [cn.hutool.core.bean.copier.CopyOptions]  →  CopyOptions.create($expr$, $arg$)
	java.lang.Object [cn.hutool.core.bean.copier.CopyOptions]  →  CopyOptions.create()


## CompareToBuilder

.reflectionCompare : cn.hutool.core.builder.CompareToBuilder.reflectionCompare
	java.lang.Object [cn.hutool.core.builder.CompareToBuilder]  →  CompareToBuilder.reflectionCompare($expr$, $arg$)


## EqualsBuilder

.reflectionEquals : cn.hutool.core.builder.EqualsBuilder.reflectionEquals
	java.lang.Object [cn.hutool.core.builder.EqualsBuilder]  →  EqualsBuilder.reflectionEquals($expr$, $arg$)


## GenericBuilder

.of : cn.hutool.core.builder.GenericBuilder.of
	cn.hutool.core.lang.func.Supplier2 [cn.hutool.core.builder.GenericBuilder]  →  GenericBuilder.of($expr$, $arg$)
	cn.hutool.core.lang.func.Supplier3 [cn.hutool.core.builder.GenericBuilder]  →  GenericBuilder.of($expr$, $arg$)
	cn.hutool.core.lang.func.Supplier4 [cn.hutool.core.builder.GenericBuilder]  →  GenericBuilder.of($expr$, $arg$)
	java.util.function.Supplier [cn.hutool.core.builder.GenericBuilder]  →  GenericBuilder.of($expr$)
	cn.hutool.core.lang.func.Supplier5 [cn.hutool.core.builder.GenericBuilder]  →  GenericBuilder.of($expr$, $arg$)
	cn.hutool.core.lang.func.Supplier1 [cn.hutool.core.builder.GenericBuilder]  →  GenericBuilder.of($expr$, $arg$)


## HashCodeBuilder

.reflectionHashCode : cn.hutool.core.builder.HashCodeBuilder.reflectionHashCode
	INT [cn.hutool.core.builder.HashCodeBuilder]  →  HashCodeBuilder.reflectionHashCode($expr$, $arg$)
	java.lang.Object [cn.hutool.core.builder.HashCodeBuilder]  →  HashCodeBuilder.reflectionHashCode($expr$, $arg$)


## BCD

.ascToBcd : cn.hutool.core.codec.BCD.ascToBcd
	scala.Array [cn.hutool.core.codec.BCD]  →  BCD.ascToBcd($expr$, $arg$)

.bcdToStr : cn.hutool.core.codec.BCD.bcdToStr
	scala.Array [cn.hutool.core.codec.BCD]  →  BCD.bcdToStr($expr$)

.strToBcd : cn.hutool.core.codec.BCD.strToBcd
	java.lang.String [cn.hutool.core.codec.BCD]  →  BCD.strToBcd($expr$)


## Base32

.encode : cn.hutool.core.codec.Base32.encode
	scala.Array [cn.hutool.core.codec.Base32]  →  Base32.encode($expr$)
	java.lang.String [cn.hutool.core.codec.Base32]  →  Base32.encode($expr$, $arg$)

.decodeStr : cn.hutool.core.codec.Base32.decodeStr
	java.lang.String [cn.hutool.core.codec.Base32]  →  Base32.decodeStr($expr$, $arg$)

.decode : cn.hutool.core.codec.Base32.decode
	java.lang.String [cn.hutool.core.codec.Base32]  →  Base32.decode($expr$)


## Base62

.encode : cn.hutool.core.codec.Base62.encode
	scala.Array [cn.hutool.core.codec.Base62]  →  Base62.encode($expr$)
	java.io.File [cn.hutool.core.codec.Base62]  →  Base62.encode($expr$)
	java.lang.CharSequence [cn.hutool.core.codec.Base62]  →  Base62.encode($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.codec.Base62]  →  Base62.encode($expr$)

.decodeToStream : cn.hutool.core.codec.Base62.decodeToStream
	java.lang.CharSequence [cn.hutool.core.codec.Base62]  →  Base62.decodeToStream($expr$, $arg$)

.decode : cn.hutool.core.codec.Base62.decode
	scala.Array [cn.hutool.core.codec.Base62]  →  Base62.decode($expr$)
	java.lang.CharSequence [cn.hutool.core.codec.Base62]  →  Base62.decode($expr$)

.decodeStr : cn.hutool.core.codec.Base62.decodeStr
	java.lang.CharSequence [cn.hutool.core.codec.Base62]  →  Base62.decodeStr($expr$, $arg$)

.decodeToFile : cn.hutool.core.codec.Base62.decodeToFile
	java.lang.CharSequence [cn.hutool.core.codec.Base62]  →  Base62.decodeToFile($expr$, $arg$)

.decodeStrGbk : cn.hutool.core.codec.Base62.decodeStrGbk
	java.lang.CharSequence [cn.hutool.core.codec.Base62]  →  Base62.decodeStrGbk($expr$)


## Base62Codec

.createInverted : cn.hutool.core.codec.Base62Codec.createInverted
	java.lang.Object [cn.hutool.core.codec.Base62Codec]  →  Base62Codec.createInverted()

.createGmp : cn.hutool.core.codec.Base62Codec.createGmp
	java.lang.Object [cn.hutool.core.codec.Base62Codec]  →  Base62Codec.createGmp()


## Base64

.encode : cn.hutool.core.codec.Base64.encode
	scala.Array [cn.hutool.core.codec.Base64]  →  Base64.encode($expr$, $arg$)
	java.io.File [cn.hutool.core.codec.Base64]  →  Base64.encode($expr$)
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.encode($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.codec.Base64]  →  Base64.encode($expr$)

.encodeUrlSafe : cn.hutool.core.codec.Base64.encodeUrlSafe
	scala.Array [cn.hutool.core.codec.Base64]  →  Base64.encodeUrlSafe($expr$, $arg$)
	java.io.File [cn.hutool.core.codec.Base64]  →  Base64.encodeUrlSafe($expr$)
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.encodeUrlSafe($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.codec.Base64]  →  Base64.encodeUrlSafe($expr$)

.decodeToStream : cn.hutool.core.codec.Base64.decodeToStream
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.decodeToStream($expr$, $arg$)

.encodeStr : cn.hutool.core.codec.Base64.encodeStr
	scala.Array [cn.hutool.core.codec.Base64]  →  Base64.encodeStr($expr$, $arg$)

.decode : cn.hutool.core.codec.Base64.decode
	scala.Array [cn.hutool.core.codec.Base64]  →  Base64.decode($expr$)
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.decode($expr$)

.decodeStr : cn.hutool.core.codec.Base64.decodeStr
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.decodeStr($expr$, $arg$)

.encodeWithoutPadding : cn.hutool.core.codec.Base64.encodeWithoutPadding
	scala.Array [cn.hutool.core.codec.Base64]  →  Base64.encodeWithoutPadding($expr$)
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.encodeWithoutPadding($expr$, $arg$)

.isBase64 : cn.hutool.core.codec.Base64.isBase64
	scala.Array [cn.hutool.core.codec.Base64]  →  Base64.isBase64($expr$)
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.isBase64($expr$)

.decodeToFile : cn.hutool.core.codec.Base64.decodeToFile
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.decodeToFile($expr$, $arg$)

.decodeStrGbk : cn.hutool.core.codec.Base64.decodeStrGbk
	java.lang.CharSequence [cn.hutool.core.codec.Base64]  →  Base64.decodeStrGbk($expr$)


## Base64Decoder

.decodeStr : cn.hutool.core.codec.Base64Decoder.decodeStr
	java.lang.CharSequence [cn.hutool.core.codec.Base64Decoder]  →  Base64Decoder.decodeStr($expr$, $arg$)

.decode : cn.hutool.core.codec.Base64Decoder.decode
	scala.Array [cn.hutool.core.codec.Base64Decoder]  →  Base64Decoder.decode($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.codec.Base64Decoder]  →  Base64Decoder.decode($expr$)

.isBase64Code : cn.hutool.core.codec.Base64Decoder.isBase64Code
	BYTE [cn.hutool.core.codec.Base64Decoder]  →  Base64Decoder.isBase64Code($expr$)


## Base64Encoder

.encode : cn.hutool.core.codec.Base64Encoder.encode
	scala.Array [cn.hutool.core.codec.Base64Encoder]  →  Base64Encoder.encode($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.codec.Base64Encoder]  →  Base64Encoder.encode($expr$, $arg$)

.encodeStr : cn.hutool.core.codec.Base64Encoder.encodeStr
	scala.Array [cn.hutool.core.codec.Base64Encoder]  →  Base64Encoder.encodeStr($expr$, $arg$)

.encodeUrlSafe : cn.hutool.core.codec.Base64Encoder.encodeUrlSafe
	scala.Array [cn.hutool.core.codec.Base64Encoder]  →  Base64Encoder.encodeUrlSafe($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.codec.Base64Encoder]  →  Base64Encoder.encodeUrlSafe($expr$, $arg$)


## Caesar

.encode : cn.hutool.core.codec.Caesar.encode
	java.lang.String [cn.hutool.core.codec.Caesar]  →  Caesar.encode($expr$, $arg$)

.decode : cn.hutool.core.codec.Caesar.decode
	java.lang.String [cn.hutool.core.codec.Caesar]  →  Caesar.decode($expr$, $arg$)


## PercentCodec

.of : cn.hutool.core.codec.PercentCodec.of
	java.lang.CharSequence [cn.hutool.core.codec.PercentCodec]  →  PercentCodec.of($expr$)
	cn.hutool.core.codec.PercentCodec [cn.hutool.core.codec.PercentCodec]  →  PercentCodec.of($expr$)


## PunyCode

.encode : cn.hutool.core.codec.PunyCode.encode
	java.lang.String [cn.hutool.core.codec.PunyCode]  →  PunyCode.encode($expr$, $arg$)

.decode : cn.hutool.core.codec.PunyCode.decode
	java.lang.String [cn.hutool.core.codec.PunyCode]  →  PunyCode.decode($expr$)


## Rot

.encode : cn.hutool.core.codec.Rot.encode
	java.lang.String [cn.hutool.core.codec.Rot]  →  Rot.encode($expr$, $arg$)

.decode13 : cn.hutool.core.codec.Rot.decode13
	java.lang.String [cn.hutool.core.codec.Rot]  →  Rot.decode13($expr$, $arg$)

.decode : cn.hutool.core.codec.Rot.decode
	java.lang.String [cn.hutool.core.codec.Rot]  →  Rot.decode($expr$, $arg$)

.encode13 : cn.hutool.core.codec.Rot.encode13
	java.lang.String [cn.hutool.core.codec.Rot]  →  Rot.encode13($expr$, $arg$)


## CollStreamUtil

.toSet : cn.hutool.core.collection.CollStreamUtil.toSet
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.toSet($expr$, $arg$)

.toMap : cn.hutool.core.collection.CollStreamUtil.toMap
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.toMap($expr$, $arg$)

.toList : cn.hutool.core.collection.CollStreamUtil.toList
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.toList($expr$, $arg$)

.groupBy2Key : cn.hutool.core.collection.CollStreamUtil.groupBy2Key
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.groupBy2Key($expr$, $arg$)

.group2Map : cn.hutool.core.collection.CollStreamUtil.group2Map
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.group2Map($expr$, $arg$)

.groupByKey : cn.hutool.core.collection.CollStreamUtil.groupByKey
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.groupByKey($expr$, $arg$)

.merge : cn.hutool.core.collection.CollStreamUtil.merge
	java.util.Map [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.merge($expr$, $arg$)

.groupBy : cn.hutool.core.collection.CollStreamUtil.groupBy
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.groupBy($expr$, $arg$)

.groupKeyValue : cn.hutool.core.collection.CollStreamUtil.groupKeyValue
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.groupKeyValue($expr$, $arg$)

.toIdentityMap : cn.hutool.core.collection.CollStreamUtil.toIdentityMap
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.toIdentityMap($expr$, $arg$)


## CollUtil

.sortEntryToList : cn.hutool.core.collection.CollUtil.sortEntryToList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortEntryToList($expr$)

.fieldValueAsMap : cn.hutool.core.collection.CollUtil.fieldValueAsMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.fieldValueAsMap($expr$, $arg$)

.count : cn.hutool.core.collection.CollUtil.count
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.count($expr$, $arg$)

.trans : cn.hutool.core.collection.CollUtil.trans
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.trans($expr$, $arg$)

.sortByProperty : cn.hutool.core.collection.CollUtil.sortByProperty
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByProperty($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByProperty($expr$, $arg$)

.sortPageAll : cn.hutool.core.collection.CollUtil.sortPageAll
	INT [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortPageAll($expr$, $arg$)

.empty : cn.hutool.core.collection.CollUtil.empty
	java.lang.Class [cn.hutool.core.collection.CollUtil]  →  CollUtil.empty($expr$)

.reverseNew : cn.hutool.core.collection.CollUtil.reverseNew
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.reverseNew($expr$)

.findOneByField : cn.hutool.core.collection.CollUtil.findOneByField
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.findOneByField($expr$, $arg$)

.size : cn.hutool.core.collection.CollUtil.size
	java.lang.Object [cn.hutool.core.collection.CollUtil]  →  CollUtil.size($expr$)

.union : cn.hutool.core.collection.CollUtil.union
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.union($expr$, $arg$)

.zip : cn.hutool.core.collection.CollUtil.zip
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.zip($expr$, $arg$)
	java.lang.String [cn.hutool.core.collection.CollUtil]  →  CollUtil.zip($expr$, $arg$)

.filterNew : cn.hutool.core.collection.CollUtil.filterNew
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.filterNew($expr$, $arg$)

.asIterator : cn.hutool.core.collection.CollUtil.asIterator
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.asIterator($expr$)

.join : cn.hutool.core.collection.CollUtil.join
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.join($expr$, $arg$)

.map : cn.hutool.core.collection.CollUtil.map
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.map($expr$, $arg$)

.subtract : cn.hutool.core.collection.CollUtil.subtract
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.subtract($expr$, $arg$)

.toMap : cn.hutool.core.collection.CollUtil.toMap
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.toMap($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.toMap($expr$, $arg$)

.setValueByMap : cn.hutool.core.collection.CollUtil.setValueByMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.setValueByMap($expr$, $arg$)

.intersection : cn.hutool.core.collection.CollUtil.intersection
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.intersection($expr$, $arg$)

.asIterable : cn.hutool.core.collection.CollUtil.asIterable
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.asIterable($expr$)

.subtractToList : cn.hutool.core.collection.CollUtil.subtractToList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.subtractToList($expr$, $arg$)

.hasNull : cn.hutool.core.collection.CollUtil.hasNull
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.hasNull($expr$)

.getLast : cn.hutool.core.collection.CollUtil.getLast
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.getLast($expr$)

.toList : cn.hutool.core.collection.CollUtil.toList
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.toList($expr$)

.lastIndexOf : cn.hutool.core.collection.CollUtil.lastIndexOf
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.lastIndexOf($expr$, $arg$)

.clear : cn.hutool.core.collection.CollUtil.clear
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.clear($expr$)

.defaultIfEmpty : cn.hutool.core.collection.CollUtil.defaultIfEmpty
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.defaultIfEmpty($expr$, $arg$)

.indexOfAll : cn.hutool.core.collection.CollUtil.indexOfAll
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.indexOfAll($expr$, $arg$)

.toMapList : cn.hutool.core.collection.CollUtil.toMapList
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.toMapList($expr$)

.page : cn.hutool.core.collection.CollUtil.page
	INT [cn.hutool.core.collection.CollUtil]  →  CollUtil.page($expr$, $arg$)

.newArrayList : cn.hutool.core.collection.CollUtil.newArrayList
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)

.set : cn.hutool.core.collection.CollUtil.set
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  CollUtil.set($expr$, $arg$)

.addAll : cn.hutool.core.collection.CollUtil.addAll
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.addAll($expr$, $arg$)

.sortByEntry : cn.hutool.core.collection.CollUtil.sortByEntry
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByEntry($expr$, $arg$)

.setOrAppend : cn.hutool.core.collection.CollUtil.setOrAppend
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.setOrAppend($expr$, $arg$)

.sortToMap : cn.hutool.core.collection.CollUtil.sortToMap
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortToMap($expr$, $arg$)

.isNotEmpty : cn.hutool.core.collection.CollUtil.isNotEmpty
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)

.create : cn.hutool.core.collection.CollUtil.create
	java.lang.Class [cn.hutool.core.collection.CollUtil]  →  CollUtil.create($expr$)

.valuesOfKeys : cn.hutool.core.collection.CollUtil.valuesOfKeys
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.valuesOfKeys($expr$, $arg$)

.min : cn.hutool.core.collection.CollUtil.min
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.min($expr$)

.disjunction : cn.hutool.core.collection.CollUtil.disjunction
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.disjunction($expr$, $arg$)

.forEach : cn.hutool.core.collection.CollUtil.forEach
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.forEach($expr$, $arg$)
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.forEach($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.forEach($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.forEach($expr$, $arg$)

.newLinkedHashSet : cn.hutool.core.collection.CollUtil.newLinkedHashSet
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.newLinkedHashSet($expr$)

.unionAll : cn.hutool.core.collection.CollUtil.unionAll
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.unionAll($expr$, $arg$)

.keySet : cn.hutool.core.collection.CollUtil.keySet
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.keySet($expr$)

.fieldValueMap : cn.hutool.core.collection.CollUtil.fieldValueMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.fieldValueMap($expr$, $arg$)

.popPart : cn.hutool.core.collection.CollUtil.popPart
	java.util.Deque [cn.hutool.core.collection.CollUtil]  →  CollUtil.popPart($expr$, $arg$)
	java.util.Stack [cn.hutool.core.collection.CollUtil]  →  CollUtil.popPart($expr$, $arg$)

.reverse : cn.hutool.core.collection.CollUtil.reverse
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.reverse($expr$)

.toListMap : cn.hutool.core.collection.CollUtil.toListMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.toListMap($expr$)

.unionDistinct : cn.hutool.core.collection.CollUtil.unionDistinct
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.unionDistinct($expr$, $arg$)

.filter : cn.hutool.core.collection.CollUtil.filter
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.filter($expr$, $arg$)

.edit : cn.hutool.core.collection.CollUtil.edit
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.edit($expr$, $arg$)

.findOne : cn.hutool.core.collection.CollUtil.findOne
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.findOne($expr$, $arg$)

.removeBlank : cn.hutool.core.collection.CollUtil.removeBlank
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeBlank($expr$)

.removeNull : cn.hutool.core.collection.CollUtil.removeNull
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeNull($expr$)

.removeWithAddIf : cn.hutool.core.collection.CollUtil.removeWithAddIf
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeWithAddIf($expr$, $arg$)

.newCopyOnWriteArrayList : cn.hutool.core.collection.CollUtil.newCopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.newCopyOnWriteArrayList($expr$)

.max : cn.hutool.core.collection.CollUtil.max
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.max($expr$)

.countMap : cn.hutool.core.collection.CollUtil.countMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.countMap($expr$)

.emptyIfNull : cn.hutool.core.collection.CollUtil.emptyIfNull
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.emptyIfNull($expr$)
	java.util.Set [cn.hutool.core.collection.CollUtil]  →  CollUtil.emptyIfNull($expr$)

.containsAll : cn.hutool.core.collection.CollUtil.containsAll
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.containsAll($expr$, $arg$)

.newBlockingQueue : cn.hutool.core.collection.CollUtil.newBlockingQueue
	INT [cn.hutool.core.collection.CollUtil]  →  CollUtil.newBlockingQueue($expr$, $arg$)

.split : cn.hutool.core.collection.CollUtil.split
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.split($expr$, $arg$)

.distinct : cn.hutool.core.collection.CollUtil.distinct
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.distinct($expr$)

.safeContains : cn.hutool.core.collection.CollUtil.safeContains
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.safeContains($expr$, $arg$)

.addAllIfNotContains : cn.hutool.core.collection.CollUtil.addAllIfNotContains
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.addAllIfNotContains($expr$, $arg$)

.newHashSet : cn.hutool.core.collection.CollUtil.newHashSet
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.newHashSet($expr$)
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.newHashSet($expr$)
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  CollUtil.newHashSet($expr$, $arg$)

.unmodifiable : cn.hutool.core.collection.CollUtil.unmodifiable
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.unmodifiable($expr$)

.padRight : cn.hutool.core.collection.CollUtil.padRight
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.padRight($expr$, $arg$)

.values : cn.hutool.core.collection.CollUtil.values
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.values($expr$)

.toTreeSet : cn.hutool.core.collection.CollUtil.toTreeSet
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.toTreeSet($expr$, $arg$)

.sub : cn.hutool.core.collection.CollUtil.sub
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sub($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.sub($expr$, $arg$)

.get : cn.hutool.core.collection.CollUtil.get
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.get($expr$, $arg$)

.groupByField : cn.hutool.core.collection.CollUtil.groupByField
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.groupByField($expr$, $arg$)

.getFieldValues : cn.hutool.core.collection.CollUtil.getFieldValues
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.getFieldValues($expr$, $arg$)

.sort : cn.hutool.core.collection.CollUtil.sort
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sort($expr$, $arg$)
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.sort($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.sort($expr$, $arg$)

.sortByPinyin : cn.hutool.core.collection.CollUtil.sortByPinyin
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByPinyin($expr$)
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByPinyin($expr$)

.newLinkedList : cn.hutool.core.collection.CollUtil.newLinkedList
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.newLinkedList($expr$)

.getAny : cn.hutool.core.collection.CollUtil.getAny
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.getAny($expr$, $arg$)

.contains : cn.hutool.core.collection.CollUtil.contains
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.contains($expr$, $arg$)

.toCollection : cn.hutool.core.collection.CollUtil.toCollection
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.toCollection($expr$)

.isEmpty : cn.hutool.core.collection.CollUtil.isEmpty
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)

.isEqualList : cn.hutool.core.collection.CollUtil.isEqualList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEqualList($expr$, $arg$)

.getElementType : cn.hutool.core.collection.CollUtil.getElementType
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.getElementType($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.getElementType($expr$)

.removeAny : cn.hutool.core.collection.CollUtil.removeAny
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeAny($expr$, $arg$)

.indexOf : cn.hutool.core.collection.CollUtil.indexOf
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.indexOf($expr$, $arg$)

.padLeft : cn.hutool.core.collection.CollUtil.padLeft
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.padLeft($expr$, $arg$)

.asEnumeration : cn.hutool.core.collection.CollUtil.asEnumeration
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.asEnumeration($expr$)

.group : cn.hutool.core.collection.CollUtil.group
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.group($expr$, $arg$)

.getFirst : cn.hutool.core.collection.CollUtil.getFirst
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.getFirst($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.getFirst($expr$)

.containsAny : cn.hutool.core.collection.CollUtil.containsAny
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.containsAny($expr$, $arg$)

.list : cn.hutool.core.collection.CollUtil.list
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  CollUtil.list($expr$, $arg$)

.extract : cn.hutool.core.collection.CollUtil.extract
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.extract($expr$, $arg$)

.intersectionDistinct : cn.hutool.core.collection.CollUtil.intersectionDistinct
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.intersectionDistinct($expr$, $arg$)

.removeEmpty : cn.hutool.core.collection.CollUtil.removeEmpty
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeEmpty($expr$)


## CollectionUtil

.sortEntryToList : cn.hutool.core.collection.CollectionUtil.sortEntryToList
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortEntryToList($expr$)

.fieldValueAsMap : cn.hutool.core.collection.CollectionUtil.fieldValueAsMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.fieldValueAsMap($expr$, $arg$)

.count : cn.hutool.core.collection.CollectionUtil.count
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.count($expr$, $arg$)

.trans : cn.hutool.core.collection.CollectionUtil.trans
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.trans($expr$, $arg$)

.sortByProperty : cn.hutool.core.collection.CollectionUtil.sortByProperty
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByProperty($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByProperty($expr$, $arg$)

.sortPageAll : cn.hutool.core.collection.CollectionUtil.sortPageAll
	INT [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortPageAll($expr$, $arg$)

.empty : cn.hutool.core.collection.CollectionUtil.empty
	java.lang.Class [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.empty($expr$)

.reverseNew : cn.hutool.core.collection.CollectionUtil.reverseNew
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.reverseNew($expr$)

.findOneByField : cn.hutool.core.collection.CollectionUtil.findOneByField
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.findOneByField($expr$, $arg$)

.size : cn.hutool.core.collection.CollectionUtil.size
	java.lang.Object [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.size($expr$)

.union : cn.hutool.core.collection.CollectionUtil.union
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.union($expr$, $arg$)

.zip : cn.hutool.core.collection.CollectionUtil.zip
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.zip($expr$, $arg$)
	java.lang.String [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.zip($expr$, $arg$)

.filterNew : cn.hutool.core.collection.CollectionUtil.filterNew
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.filterNew($expr$, $arg$)

.asIterator : cn.hutool.core.collection.CollectionUtil.asIterator
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.asIterator($expr$)

.join : cn.hutool.core.collection.CollectionUtil.join
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.join($expr$, $arg$)

.map : cn.hutool.core.collection.CollectionUtil.map
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.map($expr$, $arg$)

.subtract : cn.hutool.core.collection.CollectionUtil.subtract
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.subtract($expr$, $arg$)

.toMap : cn.hutool.core.collection.CollectionUtil.toMap
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toMap($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toMap($expr$, $arg$)

.setValueByMap : cn.hutool.core.collection.CollectionUtil.setValueByMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.setValueByMap($expr$, $arg$)

.intersection : cn.hutool.core.collection.CollectionUtil.intersection
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.intersection($expr$, $arg$)

.asIterable : cn.hutool.core.collection.CollectionUtil.asIterable
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.asIterable($expr$)

.subtractToList : cn.hutool.core.collection.CollectionUtil.subtractToList
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.subtractToList($expr$, $arg$)

.hasNull : cn.hutool.core.collection.CollectionUtil.hasNull
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.hasNull($expr$)

.getLast : cn.hutool.core.collection.CollectionUtil.getLast
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getLast($expr$)

.toList : cn.hutool.core.collection.CollectionUtil.toList
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toList($expr$)

.lastIndexOf : cn.hutool.core.collection.CollectionUtil.lastIndexOf
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.lastIndexOf($expr$, $arg$)

.clear : cn.hutool.core.collection.CollectionUtil.clear
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.clear($expr$)

.defaultIfEmpty : cn.hutool.core.collection.CollectionUtil.defaultIfEmpty
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.defaultIfEmpty($expr$, $arg$)

.indexOfAll : cn.hutool.core.collection.CollectionUtil.indexOfAll
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.indexOfAll($expr$, $arg$)

.toMapList : cn.hutool.core.collection.CollectionUtil.toMapList
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toMapList($expr$)

.page : cn.hutool.core.collection.CollectionUtil.page
	INT [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.page($expr$, $arg$)

.newArrayList : cn.hutool.core.collection.CollectionUtil.newArrayList
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)

.set : cn.hutool.core.collection.CollectionUtil.set
	BOOLEAN [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.set($expr$, $arg$)

.addAll : cn.hutool.core.collection.CollectionUtil.addAll
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.addAll($expr$, $arg$)

.sortByEntry : cn.hutool.core.collection.CollectionUtil.sortByEntry
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByEntry($expr$, $arg$)

.setOrAppend : cn.hutool.core.collection.CollectionUtil.setOrAppend
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.setOrAppend($expr$, $arg$)

.sortToMap : cn.hutool.core.collection.CollectionUtil.sortToMap
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortToMap($expr$, $arg$)

.isNotEmpty : cn.hutool.core.collection.CollectionUtil.isNotEmpty
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)

.create : cn.hutool.core.collection.CollectionUtil.create
	java.lang.Class [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.create($expr$)

.valuesOfKeys : cn.hutool.core.collection.CollectionUtil.valuesOfKeys
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.valuesOfKeys($expr$, $arg$)

.min : cn.hutool.core.collection.CollectionUtil.min
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.min($expr$)

.disjunction : cn.hutool.core.collection.CollectionUtil.disjunction
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.disjunction($expr$, $arg$)

.forEach : cn.hutool.core.collection.CollectionUtil.forEach
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.forEach($expr$, $arg$)
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.forEach($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.forEach($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.forEach($expr$, $arg$)

.newLinkedHashSet : cn.hutool.core.collection.CollectionUtil.newLinkedHashSet
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newLinkedHashSet($expr$)

.unionAll : cn.hutool.core.collection.CollectionUtil.unionAll
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.unionAll($expr$, $arg$)

.keySet : cn.hutool.core.collection.CollectionUtil.keySet
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.keySet($expr$)

.fieldValueMap : cn.hutool.core.collection.CollectionUtil.fieldValueMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.fieldValueMap($expr$, $arg$)

.popPart : cn.hutool.core.collection.CollectionUtil.popPart
	java.util.Deque [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.popPart($expr$, $arg$)
	java.util.Stack [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.popPart($expr$, $arg$)

.reverse : cn.hutool.core.collection.CollectionUtil.reverse
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.reverse($expr$)

.toListMap : cn.hutool.core.collection.CollectionUtil.toListMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toListMap($expr$)

.unionDistinct : cn.hutool.core.collection.CollectionUtil.unionDistinct
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.unionDistinct($expr$, $arg$)

.filter : cn.hutool.core.collection.CollectionUtil.filter
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.filter($expr$, $arg$)

.edit : cn.hutool.core.collection.CollectionUtil.edit
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.edit($expr$, $arg$)

.findOne : cn.hutool.core.collection.CollectionUtil.findOne
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.findOne($expr$, $arg$)

.removeBlank : cn.hutool.core.collection.CollectionUtil.removeBlank
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeBlank($expr$)

.removeNull : cn.hutool.core.collection.CollectionUtil.removeNull
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeNull($expr$)

.removeWithAddIf : cn.hutool.core.collection.CollectionUtil.removeWithAddIf
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeWithAddIf($expr$, $arg$)

.newCopyOnWriteArrayList : cn.hutool.core.collection.CollectionUtil.newCopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newCopyOnWriteArrayList($expr$)

.max : cn.hutool.core.collection.CollectionUtil.max
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.max($expr$)

.countMap : cn.hutool.core.collection.CollectionUtil.countMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.countMap($expr$)

.emptyIfNull : cn.hutool.core.collection.CollectionUtil.emptyIfNull
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.emptyIfNull($expr$)
	java.util.Set [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.emptyIfNull($expr$)

.containsAll : cn.hutool.core.collection.CollectionUtil.containsAll
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.containsAll($expr$, $arg$)

.newBlockingQueue : cn.hutool.core.collection.CollectionUtil.newBlockingQueue
	INT [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newBlockingQueue($expr$, $arg$)

.split : cn.hutool.core.collection.CollectionUtil.split
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.split($expr$, $arg$)

.distinct : cn.hutool.core.collection.CollectionUtil.distinct
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.distinct($expr$)

.safeContains : cn.hutool.core.collection.CollectionUtil.safeContains
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.safeContains($expr$, $arg$)

.addAllIfNotContains : cn.hutool.core.collection.CollectionUtil.addAllIfNotContains
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.addAllIfNotContains($expr$, $arg$)

.newHashSet : cn.hutool.core.collection.CollectionUtil.newHashSet
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newHashSet($expr$)
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newHashSet($expr$)
	BOOLEAN [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newHashSet($expr$, $arg$)

.unmodifiable : cn.hutool.core.collection.CollectionUtil.unmodifiable
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.unmodifiable($expr$)

.padRight : cn.hutool.core.collection.CollectionUtil.padRight
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.padRight($expr$, $arg$)

.values : cn.hutool.core.collection.CollectionUtil.values
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.values($expr$)

.toTreeSet : cn.hutool.core.collection.CollectionUtil.toTreeSet
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toTreeSet($expr$, $arg$)

.sub : cn.hutool.core.collection.CollectionUtil.sub
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sub($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sub($expr$, $arg$)

.get : cn.hutool.core.collection.CollectionUtil.get
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.get($expr$, $arg$)

.groupByField : cn.hutool.core.collection.CollectionUtil.groupByField
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.groupByField($expr$, $arg$)

.getFieldValues : cn.hutool.core.collection.CollectionUtil.getFieldValues
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getFieldValues($expr$, $arg$)

.sort : cn.hutool.core.collection.CollectionUtil.sort
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sort($expr$, $arg$)
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sort($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sort($expr$, $arg$)

.sortByPinyin : cn.hutool.core.collection.CollectionUtil.sortByPinyin
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByPinyin($expr$)
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByPinyin($expr$)

.newLinkedList : cn.hutool.core.collection.CollectionUtil.newLinkedList
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newLinkedList($expr$)

.getAny : cn.hutool.core.collection.CollectionUtil.getAny
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getAny($expr$, $arg$)

.contains : cn.hutool.core.collection.CollectionUtil.contains
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.contains($expr$, $arg$)

.toCollection : cn.hutool.core.collection.CollectionUtil.toCollection
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toCollection($expr$)

.isEmpty : cn.hutool.core.collection.CollectionUtil.isEmpty
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)

.isEqualList : cn.hutool.core.collection.CollectionUtil.isEqualList
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEqualList($expr$, $arg$)

.getElementType : cn.hutool.core.collection.CollectionUtil.getElementType
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getElementType($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getElementType($expr$)

.removeAny : cn.hutool.core.collection.CollectionUtil.removeAny
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeAny($expr$, $arg$)

.indexOf : cn.hutool.core.collection.CollectionUtil.indexOf
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.indexOf($expr$, $arg$)

.padLeft : cn.hutool.core.collection.CollectionUtil.padLeft
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.padLeft($expr$, $arg$)

.asEnumeration : cn.hutool.core.collection.CollectionUtil.asEnumeration
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.asEnumeration($expr$)

.group : cn.hutool.core.collection.CollectionUtil.group
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.group($expr$, $arg$)

.getFirst : cn.hutool.core.collection.CollectionUtil.getFirst
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getFirst($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getFirst($expr$)

.containsAny : cn.hutool.core.collection.CollectionUtil.containsAny
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.containsAny($expr$, $arg$)

.list : cn.hutool.core.collection.CollectionUtil.list
	BOOLEAN [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.list($expr$, $arg$)

.extract : cn.hutool.core.collection.CollectionUtil.extract
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.extract($expr$, $arg$)

.intersectionDistinct : cn.hutool.core.collection.CollectionUtil.intersectionDistinct
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.intersectionDistinct($expr$, $arg$)

.removeEmpty : cn.hutool.core.collection.CollectionUtil.removeEmpty
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeEmpty($expr$)


## CopiedIter

.copyOf : cn.hutool.core.collection.CopiedIter.copyOf
	java.util.Iterator [cn.hutool.core.collection.CopiedIter]  →  CopiedIter.copyOf($expr$)


## IterUtil

.fieldValueAsMap : cn.hutool.core.collection.IterUtil.fieldValueAsMap
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.fieldValueAsMap($expr$, $arg$)

.trans : cn.hutool.core.collection.IterUtil.trans
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.trans($expr$, $arg$)

.empty : cn.hutool.core.collection.IterUtil.empty
	java.lang.Object [cn.hutool.core.collection.IterUtil]  →  IterUtil.empty()

.size : cn.hutool.core.collection.IterUtil.size
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.size($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.size($expr$)

.getIter : cn.hutool.core.collection.IterUtil.getIter
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.getIter($expr$)

.asIterator : cn.hutool.core.collection.IterUtil.asIterator
	java.util.Enumeration [cn.hutool.core.collection.IterUtil]  →  IterUtil.asIterator($expr$)

.join : cn.hutool.core.collection.IterUtil.join
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.join($expr$, $arg$)

.toMap : cn.hutool.core.collection.IterUtil.toMap
	java.util.Map [cn.hutool.core.collection.IterUtil]  →  IterUtil.toMap($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.toMap($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.toMap($expr$, $arg$)

.asIterable : cn.hutool.core.collection.IterUtil.asIterable
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.asIterable($expr$)

.hasNull : cn.hutool.core.collection.IterUtil.hasNull
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.hasNull($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.hasNull($expr$)

.toList : cn.hutool.core.collection.IterUtil.toList
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.toList($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.toList($expr$)

.isNotEmpty : cn.hutool.core.collection.IterUtil.isNotEmpty
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.isNotEmpty($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.isNotEmpty($expr$)

.firstMatch : cn.hutool.core.collection.IterUtil.firstMatch
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.firstMatch($expr$, $arg$)

.fieldValueMap : cn.hutool.core.collection.IterUtil.fieldValueMap
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.fieldValueMap($expr$, $arg$)

.toListMap : cn.hutool.core.collection.IterUtil.toListMap
	java.util.Map [cn.hutool.core.collection.IterUtil]  →  IterUtil.toListMap($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.toListMap($expr$, $arg$)

.filter : cn.hutool.core.collection.IterUtil.filter
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.filter($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.filter($expr$, $arg$)

.edit : cn.hutool.core.collection.IterUtil.edit
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.edit($expr$, $arg$)

.countMap : cn.hutool.core.collection.IterUtil.countMap
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.countMap($expr$)

.getFirstNoneNull : cn.hutool.core.collection.IterUtil.getFirstNoneNull
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.getFirstNoneNull($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.getFirstNoneNull($expr$)

.isAllNull : cn.hutool.core.collection.IterUtil.isAllNull
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.isAllNull($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.isAllNull($expr$)

.isEmpty : cn.hutool.core.collection.IterUtil.isEmpty
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.isEmpty($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.isEmpty($expr$)

.isEqualList : cn.hutool.core.collection.IterUtil.isEqualList
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.isEqualList($expr$, $arg$)

.getElementType : cn.hutool.core.collection.IterUtil.getElementType
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.getElementType($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.getElementType($expr$)

.getFirst : cn.hutool.core.collection.IterUtil.getFirst
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.getFirst($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.getFirst($expr$)

.fieldValueList : cn.hutool.core.collection.IterUtil.fieldValueList
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.fieldValueList($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.fieldValueList($expr$, $arg$)


## ListUtil

.swapElement : cn.hutool.core.collection.ListUtil.swapElement
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.swapElement($expr$, $arg$)

.sortByProperty : cn.hutool.core.collection.ListUtil.sortByProperty
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.sortByProperty($expr$, $arg$)

.empty : cn.hutool.core.collection.ListUtil.empty
	java.lang.Object [cn.hutool.core.collection.ListUtil]  →  ListUtil.empty()

.reverseNew : cn.hutool.core.collection.ListUtil.reverseNew
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.reverseNew($expr$)

.toList : cn.hutool.core.collection.ListUtil.toList
	java.util.Iterator [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)
	java.util.Enumeration [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)
	java.lang.Iterable [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)
	java.util.Collection [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)
	scala.Array [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)

.lastIndexOf : cn.hutool.core.collection.ListUtil.lastIndexOf
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.lastIndexOf($expr$, $arg$)

.toLinkedList : cn.hutool.core.collection.ListUtil.toLinkedList
	scala.Array [cn.hutool.core.collection.ListUtil]  →  ListUtil.toLinkedList($expr$)

.indexOfAll : cn.hutool.core.collection.ListUtil.indexOfAll
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.indexOfAll($expr$, $arg$)

.page : cn.hutool.core.collection.ListUtil.page
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.page($expr$, $arg$)
	INT [cn.hutool.core.collection.ListUtil]  →  ListUtil.page($expr$, $arg$)

.setOrAppend : cn.hutool.core.collection.ListUtil.setOrAppend
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.setOrAppend($expr$, $arg$)

.partition : cn.hutool.core.collection.ListUtil.partition
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.partition($expr$, $arg$)

.reverse : cn.hutool.core.collection.ListUtil.reverse
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.reverse($expr$)

.split : cn.hutool.core.collection.ListUtil.split
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.split($expr$, $arg$)

.unmodifiable : cn.hutool.core.collection.ListUtil.unmodifiable
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.unmodifiable($expr$)

.toCopyOnWriteArrayList : cn.hutool.core.collection.ListUtil.toCopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.ListUtil]  →  ListUtil.toCopyOnWriteArrayList($expr$)

.sub : cn.hutool.core.collection.ListUtil.sub
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.sub($expr$, $arg$)

.sort : cn.hutool.core.collection.ListUtil.sort
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.sort($expr$, $arg$)

.sortByPinyin : cn.hutool.core.collection.ListUtil.sortByPinyin
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.sortByPinyin($expr$)

.swapTo : cn.hutool.core.collection.ListUtil.swapTo
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.swapTo($expr$, $arg$)

.splitAvg : cn.hutool.core.collection.ListUtil.splitAvg
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.splitAvg($expr$, $arg$)

.of : cn.hutool.core.collection.ListUtil.of
	scala.Array [cn.hutool.core.collection.ListUtil]  →  ListUtil.of($expr$)

.list : cn.hutool.core.collection.ListUtil.list
	BOOLEAN [cn.hutool.core.collection.ListUtil]  →  ListUtil.list($expr$, $arg$)


## RingIndexUtil

.ringNextIntByObj : cn.hutool.core.collection.RingIndexUtil.ringNextIntByObj
	java.lang.Object [cn.hutool.core.collection.RingIndexUtil]  →  RingIndexUtil.ringNextIntByObj($expr$, $arg$)

.ringNextLong : cn.hutool.core.collection.RingIndexUtil.ringNextLong
	LONG [cn.hutool.core.collection.RingIndexUtil]  →  RingIndexUtil.ringNextLong($expr$, $arg$)

.ringNextInt : cn.hutool.core.collection.RingIndexUtil.ringNextInt
	INT [cn.hutool.core.collection.RingIndexUtil]  →  RingIndexUtil.ringNextInt($expr$, $arg$)


## SpliteratorUtil

.trans : cn.hutool.core.collection.SpliteratorUtil.trans
	java.util.Spliterator [cn.hutool.core.collection.SpliteratorUtil]  →  SpliteratorUtil.trans($expr$, $arg$)


## ComparatorChain

.of : cn.hutool.core.comparator.ComparatorChain.of
	scala.Array [cn.hutool.core.comparator.ComparatorChain]  →  ComparatorChain.of($expr$)
	java.util.List [cn.hutool.core.comparator.ComparatorChain]  →  ComparatorChain.of($expr$, $arg$)
	java.util.Comparator [cn.hutool.core.comparator.ComparatorChain]  →  ComparatorChain.of($expr$, $arg$)


## CompareUtil

.comparingPinyin : cn.hutool.core.comparator.CompareUtil.comparingPinyin
	java.util.function.Function [cn.hutool.core.comparator.CompareUtil]  →  CompareUtil.comparingPinyin($expr$, $arg$)

.naturalComparator : cn.hutool.core.comparator.CompareUtil.naturalComparator
	java.lang.Object [cn.hutool.core.comparator.CompareUtil]  →  CompareUtil.naturalComparator()

.compare : cn.hutool.core.comparator.CompareUtil.compare
	java.lang.Comparable [cn.hutool.core.comparator.CompareUtil]  →  CompareUtil.compare($expr$, $arg$)
	java.lang.Object [cn.hutool.core.comparator.CompareUtil]  →  CompareUtil.compare($expr$, $arg$)


## CompilerUtil

.getTask : cn.hutool.core.compiler.CompilerUtil.getTask
	javax.tools.JavaFileManager [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.getTask($expr$, $arg$)

.getCompiler : cn.hutool.core.compiler.CompilerUtil.getCompiler
	java.lang.ClassLoader [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.getCompiler($expr$)

.getFileManager : cn.hutool.core.compiler.CompilerUtil.getFileManager
	javax.tools.DiagnosticListener [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.getFileManager($expr$)
	java.lang.Object [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.getFileManager()

.compile : cn.hutool.core.compiler.CompilerUtil.compile
	scala.Array [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.compile($expr$)


## DiagnosticUtil

.getMessages : cn.hutool.core.compiler.DiagnosticUtil.getMessages
	javax.tools.DiagnosticCollector [cn.hutool.core.compiler.DiagnosticUtil]  →  DiagnosticUtil.getMessages($expr$)


## JavaFileObjectUtil

.getJavaFileObjects : cn.hutool.core.compiler.JavaFileObjectUtil.getJavaFileObjects
	java.io.File [cn.hutool.core.compiler.JavaFileObjectUtil]  →  JavaFileObjectUtil.getJavaFileObjects($expr$)

.isJavaFile : cn.hutool.core.compiler.JavaFileObjectUtil.isJavaFile
	java.lang.String [cn.hutool.core.compiler.JavaFileObjectUtil]  →  JavaFileObjectUtil.isJavaFile($expr$)

.isJarOrZipFile : cn.hutool.core.compiler.JavaFileObjectUtil.isJarOrZipFile
	java.lang.String [cn.hutool.core.compiler.JavaFileObjectUtil]  →  JavaFileObjectUtil.isJarOrZipFile($expr$)


## JavaSourceCompiler

.create : cn.hutool.core.compiler.JavaSourceCompiler.create
	java.lang.ClassLoader [cn.hutool.core.compiler.JavaSourceCompiler]  →  JavaSourceCompiler.create($expr$)


## Deflate

.of : cn.hutool.core.compress.Deflate.of
	java.io.InputStream [cn.hutool.core.compress.Deflate]  →  Deflate.of($expr$, $arg$)


## Gzip

.of : cn.hutool.core.compress.Gzip.of
	java.io.InputStream [cn.hutool.core.compress.Gzip]  →  Gzip.of($expr$, $arg$)


## ZipReader

.of : cn.hutool.core.compress.ZipReader.of
	java.io.File [cn.hutool.core.compress.ZipReader]  →  ZipReader.of($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.compress.ZipReader]  →  ZipReader.of($expr$, $arg$)


## ZipWriter

.of : cn.hutool.core.compress.ZipWriter.of
	java.io.File [cn.hutool.core.compress.ZipWriter]  →  ZipWriter.of($expr$, $arg$)
	java.io.OutputStream [cn.hutool.core.compress.ZipWriter]  →  ZipWriter.of($expr$, $arg$)


## Convert

.unWrap : cn.hutool.core.convert.Convert.unWrap
	java.lang.Class [cn.hutool.core.convert.Convert]  →  Convert.unWrap($expr$)

.toBooleanArray : cn.hutool.core.convert.Convert.toBooleanArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toBooleanArray($expr$)

.shortToBytes : cn.hutool.core.convert.Convert.shortToBytes
	SHORT [cn.hutool.core.convert.Convert]  →  Convert.shortToBytes($expr$)

.numberToSimple : cn.hutool.core.convert.Convert.numberToSimple
	java.lang.Number [cn.hutool.core.convert.Convert]  →  Convert.numberToSimple($expr$)

.toEnum : cn.hutool.core.convert.Convert.toEnum
	java.lang.Class [cn.hutool.core.convert.Convert]  →  Convert.toEnum($expr$, $arg$)

.hexToBytes : cn.hutool.core.convert.Convert.hexToBytes
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.hexToBytes($expr$)

.bytesToShort : cn.hutool.core.convert.Convert.bytesToShort
	scala.Array [cn.hutool.core.convert.Convert]  →  Convert.bytesToShort($expr$)

.bytesToLong : cn.hutool.core.convert.Convert.bytesToLong
	scala.Array [cn.hutool.core.convert.Convert]  →  Convert.bytesToLong($expr$)

.unicodeToStr : cn.hutool.core.convert.Convert.unicodeToStr
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.unicodeToStr($expr$)

.strToUnicode : cn.hutool.core.convert.Convert.strToUnicode
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.strToUnicode($expr$)

.toSet : cn.hutool.core.convert.Convert.toSet
	java.lang.Class [cn.hutool.core.convert.Convert]  →  Convert.toSet($expr$, $arg$)

.toMap : cn.hutool.core.convert.Convert.toMap
	java.lang.Class [cn.hutool.core.convert.Convert]  →  Convert.toMap($expr$, $arg$)

.intToBytes : cn.hutool.core.convert.Convert.intToBytes
	INT [cn.hutool.core.convert.Convert]  →  Convert.intToBytes($expr$)

.toByte : cn.hutool.core.convert.Convert.toByte
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toByte($expr$, $arg$)

.toList : cn.hutool.core.convert.Convert.toList
	java.lang.Class [cn.hutool.core.convert.Convert]  →  Convert.toList($expr$, $arg$)
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toList($expr$)

.convertQuietly : cn.hutool.core.convert.Convert.convertQuietly
	java.lang.reflect.Type [cn.hutool.core.convert.Convert]  →  Convert.convertQuietly($expr$, $arg$)

.toNumber : cn.hutool.core.convert.Convert.toNumber
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toNumber($expr$, $arg$)

.longToBytes : cn.hutool.core.convert.Convert.longToBytes
	LONG [cn.hutool.core.convert.Convert]  →  Convert.longToBytes($expr$)

.toBool : cn.hutool.core.convert.Convert.toBool
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toBool($expr$, $arg$)

.toFloatArray : cn.hutool.core.convert.Convert.toFloatArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toFloatArray($expr$)

.toCharArray : cn.hutool.core.convert.Convert.toCharArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toCharArray($expr$)

.convertCharset : cn.hutool.core.convert.Convert.convertCharset
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.convertCharset($expr$, $arg$)

.numberToWord : cn.hutool.core.convert.Convert.numberToWord
	java.lang.Number [cn.hutool.core.convert.Convert]  →  Convert.numberToWord($expr$)

.toFloat : cn.hutool.core.convert.Convert.toFloat
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toFloat($expr$, $arg$)

.toStr : cn.hutool.core.convert.Convert.toStr
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toStr($expr$, $arg$)

.toSBC : cn.hutool.core.convert.Convert.toSBC
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.toSBC($expr$, $arg$)

.toLong : cn.hutool.core.convert.Convert.toLong
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toLong($expr$, $arg$)

.toLocalDateTime : cn.hutool.core.convert.Convert.toLocalDateTime
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toLocalDateTime($expr$, $arg$)

.wrap : cn.hutool.core.convert.Convert.wrap
	java.lang.Class [cn.hutool.core.convert.Convert]  →  Convert.wrap($expr$)

.byteToUnsignedInt : cn.hutool.core.convert.Convert.byteToUnsignedInt
	BYTE [cn.hutool.core.convert.Convert]  →  Convert.byteToUnsignedInt($expr$)

.convertTime : cn.hutool.core.convert.Convert.convertTime
	LONG [cn.hutool.core.convert.Convert]  →  Convert.convertTime($expr$, $arg$)

.toInt : cn.hutool.core.convert.Convert.toInt
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toInt($expr$, $arg$)

.toBigDecimal : cn.hutool.core.convert.Convert.toBigDecimal
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toBigDecimal($expr$, $arg$)

.toLongArray : cn.hutool.core.convert.Convert.toLongArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toLongArray($expr$)

.hexToStr : cn.hutool.core.convert.Convert.hexToStr
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.hexToStr($expr$, $arg$)

.toChar : cn.hutool.core.convert.Convert.toChar
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toChar($expr$, $arg$)

.digitToChinese : cn.hutool.core.convert.Convert.digitToChinese
	java.lang.Number [cn.hutool.core.convert.Convert]  →  Convert.digitToChinese($expr$)

.toShortArray : cn.hutool.core.convert.Convert.toShortArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toShortArray($expr$)

.chineseToNumber : cn.hutool.core.convert.Convert.chineseToNumber
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.chineseToNumber($expr$)

.toDBC : cn.hutool.core.convert.Convert.toDBC
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.toDBC($expr$, $arg$)

.toDouble : cn.hutool.core.convert.Convert.toDouble
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toDouble($expr$, $arg$)

.toPrimitiveByteArray : cn.hutool.core.convert.Convert.toPrimitiveByteArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toPrimitiveByteArray($expr$)

.toDate : cn.hutool.core.convert.Convert.toDate
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toDate($expr$, $arg$)

.convertByClassName : cn.hutool.core.convert.Convert.convertByClassName
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.convertByClassName($expr$, $arg$)

.toDoubleArray : cn.hutool.core.convert.Convert.toDoubleArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toDoubleArray($expr$)

.toShort : cn.hutool.core.convert.Convert.toShort
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toShort($expr$, $arg$)

.toByteArray : cn.hutool.core.convert.Convert.toByteArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toByteArray($expr$)

.toInstant : cn.hutool.core.convert.Convert.toInstant
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toInstant($expr$, $arg$)

.numberToChinese : cn.hutool.core.convert.Convert.numberToChinese
	DOUBLE [cn.hutool.core.convert.Convert]  →  Convert.numberToChinese($expr$, $arg$)

.toIntArray : cn.hutool.core.convert.Convert.toIntArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toIntArray($expr$)

.intToByte : cn.hutool.core.convert.Convert.intToByte
	INT [cn.hutool.core.convert.Convert]  →  Convert.intToByte($expr$)

.convertWithCheck : cn.hutool.core.convert.Convert.convertWithCheck
	java.lang.reflect.Type [cn.hutool.core.convert.Convert]  →  Convert.convertWithCheck($expr$, $arg$)

.toCollection : cn.hutool.core.convert.Convert.toCollection
	java.lang.Class [cn.hutool.core.convert.Convert]  →  Convert.toCollection($expr$, $arg$)

.toHex : cn.hutool.core.convert.Convert.toHex
	scala.Array [cn.hutool.core.convert.Convert]  →  Convert.toHex($expr$)
	java.lang.String [cn.hutool.core.convert.Convert]  →  Convert.toHex($expr$, $arg$)

.toStrArray : cn.hutool.core.convert.Convert.toStrArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toStrArray($expr$)

.bytesToInt : cn.hutool.core.convert.Convert.bytesToInt
	scala.Array [cn.hutool.core.convert.Convert]  →  Convert.bytesToInt($expr$)

.toNumberArray : cn.hutool.core.convert.Convert.toNumberArray
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toNumberArray($expr$)

.convert : cn.hutool.core.convert.Convert.convert
	java.lang.reflect.Type [cn.hutool.core.convert.Convert]  →  Convert.convert($expr$, $arg$)
	java.lang.Class [cn.hutool.core.convert.Convert]  →  Convert.convert($expr$, $arg$)
	cn.hutool.core.lang.TypeReference [cn.hutool.core.convert.Convert]  →  Convert.convert($expr$, $arg$)

.toBigInteger : cn.hutool.core.convert.Convert.toBigInteger
	java.lang.Object [cn.hutool.core.convert.Convert]  →  Convert.toBigInteger($expr$, $arg$)


## ConverterRegistry

.getInstance : cn.hutool.core.convert.ConverterRegistry.getInstance
	java.lang.Object [cn.hutool.core.convert.ConverterRegistry]  →  ConverterRegistry.getInstance()


## NumberChineseFormatter

.format : cn.hutool.core.convert.NumberChineseFormatter.format
	LONG [cn.hutool.core.convert.NumberChineseFormatter]  →  NumberChineseFormatter.format($expr$, $arg$)
	DOUBLE [cn.hutool.core.convert.NumberChineseFormatter]  →  NumberChineseFormatter.format($expr$, $arg$)

.formatThousand : cn.hutool.core.convert.NumberChineseFormatter.formatThousand
	INT [cn.hutool.core.convert.NumberChineseFormatter]  →  NumberChineseFormatter.formatThousand($expr$, $arg$)

.numberCharToChinese : cn.hutool.core.convert.NumberChineseFormatter.numberCharToChinese
	CHAR [cn.hutool.core.convert.NumberChineseFormatter]  →  NumberChineseFormatter.numberCharToChinese($expr$, $arg$)

.chineseToNumber : cn.hutool.core.convert.NumberChineseFormatter.chineseToNumber
	java.lang.String [cn.hutool.core.convert.NumberChineseFormatter]  →  NumberChineseFormatter.chineseToNumber($expr$)

.formatSimple : cn.hutool.core.convert.NumberChineseFormatter.formatSimple
	LONG [cn.hutool.core.convert.NumberChineseFormatter]  →  NumberChineseFormatter.formatSimple($expr$)


## NumberWordFormatter

.formatSimple : cn.hutool.core.convert.NumberWordFormatter.formatSimple
	LONG [cn.hutool.core.convert.NumberWordFormatter]  →  NumberWordFormatter.formatSimple($expr$, $arg$)

.format : cn.hutool.core.convert.NumberWordFormatter.format
	java.lang.Object [cn.hutool.core.convert.NumberWordFormatter]  →  NumberWordFormatter.format($expr$)


## CalendarUtil

.parseByPatterns : cn.hutool.core.date.CalendarUtil.parseByPatterns
	java.lang.String [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.parseByPatterns($expr$, $arg$)

.endOfQuarter : cn.hutool.core.date.CalendarUtil.endOfQuarter
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfQuarter($expr$)

.beginOfSecond : cn.hutool.core.date.CalendarUtil.beginOfSecond
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfSecond($expr$)

.isSameWeek : cn.hutool.core.date.CalendarUtil.isSameWeek
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isSameWeek($expr$, $arg$)

.endOfDay : cn.hutool.core.date.CalendarUtil.endOfDay
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfDay($expr$)

.isPM : cn.hutool.core.date.CalendarUtil.isPM
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isPM($expr$)

.getEndValue : cn.hutool.core.date.CalendarUtil.getEndValue
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.getEndValue($expr$, $arg$)

.beginOfHour : cn.hutool.core.date.CalendarUtil.beginOfHour
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfHour($expr$)

.isAM : cn.hutool.core.date.CalendarUtil.isAM
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isAM($expr$)

.beginOfMonth : cn.hutool.core.date.CalendarUtil.beginOfMonth
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfMonth($expr$)

.truncate : cn.hutool.core.date.CalendarUtil.truncate
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.truncate($expr$, $arg$)

.ceiling : cn.hutool.core.date.CalendarUtil.ceiling
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.ceiling($expr$, $arg$)

.endOfMinute : cn.hutool.core.date.CalendarUtil.endOfMinute
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfMinute($expr$)

.getBeginValue : cn.hutool.core.date.CalendarUtil.getBeginValue
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.getBeginValue($expr$, $arg$)

.age : cn.hutool.core.date.CalendarUtil.age
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.age($expr$, $arg$)

.endOfSecond : cn.hutool.core.date.CalendarUtil.endOfSecond
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfSecond($expr$)

.isSameMonth : cn.hutool.core.date.CalendarUtil.isSameMonth
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isSameMonth($expr$, $arg$)

.calendar : cn.hutool.core.date.CalendarUtil.calendar
	LONG [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.calendar($expr$)
	java.util.Date [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.calendar($expr$)
	java.lang.Object [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.calendar()

.toLocalDateTime : cn.hutool.core.date.CalendarUtil.toLocalDateTime
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.toLocalDateTime($expr$)

.beginOfYear : cn.hutool.core.date.CalendarUtil.beginOfYear
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfYear($expr$)

.beginOfQuarter : cn.hutool.core.date.CalendarUtil.beginOfQuarter
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfQuarter($expr$)

.beginOfDay : cn.hutool.core.date.CalendarUtil.beginOfDay
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfDay($expr$)

.parse : cn.hutool.core.date.CalendarUtil.parse
	java.lang.CharSequence [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.parse($expr$, $arg$)

.isSameDay : cn.hutool.core.date.CalendarUtil.isSameDay
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isSameDay($expr$, $arg$)

.beginOfMinute : cn.hutool.core.date.CalendarUtil.beginOfMinute
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfMinute($expr$)

.formatChineseDate : cn.hutool.core.date.CalendarUtil.formatChineseDate
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.formatChineseDate($expr$, $arg$)

.yearAndQuarter : cn.hutool.core.date.CalendarUtil.yearAndQuarter
	LONG [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.yearAndQuarter($expr$, $arg$)
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.yearAndQuarter($expr$)

.round : cn.hutool.core.date.CalendarUtil.round
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.round($expr$, $arg$)

.endOfWeek : cn.hutool.core.date.CalendarUtil.endOfWeek
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfWeek($expr$, $arg$)

.endOfHour : cn.hutool.core.date.CalendarUtil.endOfHour
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfHour($expr$)

.toInstant : cn.hutool.core.date.CalendarUtil.toInstant
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.toInstant($expr$)

.endOfYear : cn.hutool.core.date.CalendarUtil.endOfYear
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfYear($expr$)

.endOfMonth : cn.hutool.core.date.CalendarUtil.endOfMonth
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfMonth($expr$)

.isSameInstant : cn.hutool.core.date.CalendarUtil.isSameInstant
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isSameInstant($expr$, $arg$)

.compare : cn.hutool.core.date.CalendarUtil.compare
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.compare($expr$, $arg$)

.beginOfWeek : cn.hutool.core.date.CalendarUtil.beginOfWeek
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfWeek($expr$, $arg$)


## DateBetween

.create : cn.hutool.core.date.DateBetween.create
	java.util.Date [cn.hutool.core.date.DateBetween]  →  DateBetween.create($expr$, $arg$)


## DateModifier

.modify : cn.hutool.core.date.DateModifier.modify
	java.util.Calendar [cn.hutool.core.date.DateModifier]  →  DateModifier.modify($expr$, $arg$)


## DatePattern

.createFormatter : cn.hutool.core.date.DatePattern.createFormatter
	java.lang.String [cn.hutool.core.date.DatePattern]  →  DatePattern.createFormatter($expr$)


## DateTime

.of : cn.hutool.core.date.DateTime.of
	java.lang.String [cn.hutool.core.date.DateTime]  →  DateTime.of($expr$, $arg$)
	LONG [cn.hutool.core.date.DateTime]  →  DateTime.of($expr$)
	java.util.Calendar [cn.hutool.core.date.DateTime]  →  DateTime.of($expr$)
	java.util.Date [cn.hutool.core.date.DateTime]  →  DateTime.of($expr$)

.now : cn.hutool.core.date.DateTime.now
	java.lang.Object [cn.hutool.core.date.DateTime]  →  DateTime.now()

.from : cn.hutool.core.date.DateTime.from
	java.time.Instant [cn.hutool.core.date.DateTime]  →  DateTime.from($expr$)

.setUseJdkToStringStyle : cn.hutool.core.date.DateTime.setUseJdkToStringStyle
	BOOLEAN [cn.hutool.core.date.DateTime]  →  DateTime.setUseJdkToStringStyle($expr$)


## DateUtil

.parseByPatterns : cn.hutool.core.date.DateUtil.parseByPatterns
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.parseByPatterns($expr$, $arg$)

.endOfQuarter : cn.hutool.core.date.DateUtil.endOfQuarter
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfQuarter($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfQuarter($expr$)

.beginOfSecond : cn.hutool.core.date.DateUtil.beginOfSecond
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfSecond($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfSecond($expr$)

.parseUTC : cn.hutool.core.date.DateUtil.parseUTC
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.parseUTC($expr$)

.dayOfYear : cn.hutool.core.date.DateUtil.dayOfYear
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dayOfYear($expr$)

.format : cn.hutool.core.date.DateUtil.format
	java.time.LocalDateTime [cn.hutool.core.date.DateUtil]  →  DateUtil.format($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.format($expr$, $arg$)

.isSameWeek : cn.hutool.core.date.DateUtil.isSameWeek
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameWeek($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameWeek($expr$, $arg$)

.endOfDay : cn.hutool.core.date.DateUtil.endOfDay
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfDay($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfDay($expr$)

.dayOfWeekEnum : cn.hutool.core.date.DateUtil.dayOfWeekEnum
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dayOfWeekEnum($expr$)

.parseDate : cn.hutool.core.date.DateUtil.parseDate
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseDate($expr$)

.getZodiac : cn.hutool.core.date.DateUtil.getZodiac
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.getZodiac($expr$, $arg$)

.ageOfNow : cn.hutool.core.date.DateUtil.ageOfNow
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.ageOfNow($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.ageOfNow($expr$)

.dayOfWeek : cn.hutool.core.date.DateUtil.dayOfWeek
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dayOfWeek($expr$)

.isSameTime : cn.hutool.core.date.DateUtil.isSameTime
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameTime($expr$, $arg$)

.parseCST : cn.hutool.core.date.DateUtil.parseCST
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseCST($expr$)

.isPM : cn.hutool.core.date.DateUtil.isPM
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isPM($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isPM($expr$)

.lastMonth : cn.hutool.core.date.DateUtil.lastMonth
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.lastMonth()

.nextWeek : cn.hutool.core.date.DateUtil.nextWeek
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.nextWeek()

.formatBetween : cn.hutool.core.date.DateUtil.formatBetween
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.formatBetween($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatBetween($expr$, $arg$)

.thisMinute : cn.hutool.core.date.DateUtil.thisMinute
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisMinute()

.getEndValue : cn.hutool.core.date.DateUtil.getEndValue
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.getEndValue($expr$, $arg$)

.beginOfHour : cn.hutool.core.date.DateUtil.beginOfHour
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfHour($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfHour($expr$)

.nanosToMillis : cn.hutool.core.date.DateUtil.nanosToMillis
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.nanosToMillis($expr$)

.thisDayOfWeek : cn.hutool.core.date.DateUtil.thisDayOfWeek
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisDayOfWeek()

.parseTime : cn.hutool.core.date.DateUtil.parseTime
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseTime($expr$)

.isAM : cn.hutool.core.date.DateUtil.isAM
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isAM($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isAM($expr$)

.monthEnum : cn.hutool.core.date.DateUtil.monthEnum
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.monthEnum($expr$)

.parseLocalDateTime : cn.hutool.core.date.DateUtil.parseLocalDateTime
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseLocalDateTime($expr$, $arg$)

.newSimpleFormat : cn.hutool.core.date.DateUtil.newSimpleFormat
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.newSimpleFormat($expr$, $arg$)

.thisWeekOfMonth : cn.hutool.core.date.DateUtil.thisWeekOfMonth
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisWeekOfMonth()

.offsetWeek : cn.hutool.core.date.DateUtil.offsetWeek
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetWeek($expr$, $arg$)

.minute : cn.hutool.core.date.DateUtil.minute
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.minute($expr$)

.formatTime : cn.hutool.core.date.DateUtil.formatTime
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatTime($expr$)

.isLeapYear : cn.hutool.core.date.DateUtil.isLeapYear
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.isLeapYear($expr$)

.beginOfMonth : cn.hutool.core.date.DateUtil.beginOfMonth
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfMonth($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfMonth($expr$)

.parseTimeToday : cn.hutool.core.date.DateUtil.parseTimeToday
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseTimeToday($expr$)

.dayOfMonth : cn.hutool.core.date.DateUtil.dayOfMonth
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dayOfMonth($expr$)

.dateNew : cn.hutool.core.date.DateUtil.dateNew
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dateNew($expr$)

.formatDateTime : cn.hutool.core.date.DateUtil.formatDateTime
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatDateTime($expr$)

.offsetMonth : cn.hutool.core.date.DateUtil.offsetMonth
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetMonth($expr$, $arg$)

.truncate : cn.hutool.core.date.DateUtil.truncate
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.truncate($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.truncate($expr$, $arg$)

.lengthOfYear : cn.hutool.core.date.DateUtil.lengthOfYear
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.lengthOfYear($expr$)

.ceiling : cn.hutool.core.date.DateUtil.ceiling
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.ceiling($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.ceiling($expr$, $arg$)

.offsetMinute : cn.hutool.core.date.DateUtil.offsetMinute
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetMinute($expr$, $arg$)

.nanosToSeconds : cn.hutool.core.date.DateUtil.nanosToSeconds
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.nanosToSeconds($expr$)

.betweenWeek : cn.hutool.core.date.DateUtil.betweenWeek
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenWeek($expr$, $arg$)

.formatLocalDateTime : cn.hutool.core.date.DateUtil.formatLocalDateTime
	java.time.LocalDateTime [cn.hutool.core.date.DateUtil]  →  DateUtil.formatLocalDateTime($expr$)

.parseDateTime : cn.hutool.core.date.DateUtil.parseDateTime
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseDateTime($expr$)

.endOfMinute : cn.hutool.core.date.DateUtil.endOfMinute
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfMinute($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfMinute($expr$)

.year : cn.hutool.core.date.DateUtil.year
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.year($expr$)

.timeToSecond : cn.hutool.core.date.DateUtil.timeToSecond
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.timeToSecond($expr$)

.getBeginValue : cn.hutool.core.date.DateUtil.getBeginValue
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.getBeginValue($expr$, $arg$)

.nextMonth : cn.hutool.core.date.DateUtil.nextMonth
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.nextMonth()

.quarter : cn.hutool.core.date.DateUtil.quarter
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.quarter($expr$)

.offsetSecond : cn.hutool.core.date.DateUtil.offsetSecond
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetSecond($expr$, $arg$)

.thisSecond : cn.hutool.core.date.DateUtil.thisSecond
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisSecond()

.age : cn.hutool.core.date.DateUtil.age
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.age($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.age($expr$, $arg$)

.endOfSecond : cn.hutool.core.date.DateUtil.endOfSecond
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfSecond($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfSecond($expr$)

.formatHttpDate : cn.hutool.core.date.DateUtil.formatHttpDate
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatHttpDate($expr$)

.betweenMs : cn.hutool.core.date.DateUtil.betweenMs
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenMs($expr$, $arg$)

.isWeekend : cn.hutool.core.date.DateUtil.isWeekend
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isWeekend($expr$)

.weekOfMonth : cn.hutool.core.date.DateUtil.weekOfMonth
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.weekOfMonth($expr$)

.getChineseZodiac : cn.hutool.core.date.DateUtil.getChineseZodiac
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.getChineseZodiac($expr$)

.hour : cn.hutool.core.date.DateUtil.hour
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.hour($expr$, $arg$)

.isSameMonth : cn.hutool.core.date.DateUtil.isSameMonth
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameMonth($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameMonth($expr$, $arg$)

.calendar : cn.hutool.core.date.DateUtil.calendar
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.calendar($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.calendar($expr$)
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.calendar()

.now : cn.hutool.core.date.DateUtil.now
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.now()

.createStopWatch : cn.hutool.core.date.DateUtil.createStopWatch
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.createStopWatch($expr$)
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.createStopWatch()

.dateSecond : cn.hutool.core.date.DateUtil.dateSecond
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.dateSecond()

.lastWeek : cn.hutool.core.date.DateUtil.lastWeek
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.lastWeek()

.toLocalDateTime : cn.hutool.core.date.DateUtil.toLocalDateTime
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.toLocalDateTime($expr$)
	java.time.Instant [cn.hutool.core.date.DateUtil]  →  DateUtil.toLocalDateTime($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.toLocalDateTime($expr$)

.thisDayOfMonth : cn.hutool.core.date.DateUtil.thisDayOfMonth
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisDayOfMonth()

.beginOfYear : cn.hutool.core.date.DateUtil.beginOfYear
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfYear($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfYear($expr$)

.millisecond : cn.hutool.core.date.DateUtil.millisecond
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.millisecond($expr$)

.second : cn.hutool.core.date.DateUtil.second
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.second($expr$)

.offset : cn.hutool.core.date.DateUtil.offset
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offset($expr$, $arg$)

.beginOfQuarter : cn.hutool.core.date.DateUtil.beginOfQuarter
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfQuarter($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfQuarter($expr$)

.yesterday : cn.hutool.core.date.DateUtil.yesterday
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.yesterday()

.offsetMillisecond : cn.hutool.core.date.DateUtil.offsetMillisecond
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetMillisecond($expr$, $arg$)

.beginOfDay : cn.hutool.core.date.DateUtil.beginOfDay
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfDay($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfDay($expr$)

.betweenYear : cn.hutool.core.date.DateUtil.betweenYear
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenYear($expr$, $arg$)

.date : cn.hutool.core.date.DateUtil.date
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.date($expr$)
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.date($expr$)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.DateUtil]  →  DateUtil.date($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.date($expr$)
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.date()

.weekOfYear : cn.hutool.core.date.DateUtil.weekOfYear
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.weekOfYear($expr$)

.offsetHour : cn.hutool.core.date.DateUtil.offsetHour
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetHour($expr$, $arg$)

.parse : cn.hutool.core.date.DateUtil.parse
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.parse($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parse($expr$, $arg$)

.isIn : cn.hutool.core.date.DateUtil.isIn
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isIn($expr$, $arg$)

.thisMonth : cn.hutool.core.date.DateUtil.thisMonth
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisMonth()

.range : cn.hutool.core.date.DateUtil.range
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.range($expr$, $arg$)

.rangeToList : cn.hutool.core.date.DateUtil.rangeToList
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.rangeToList($expr$, $arg$)

.formatDate : cn.hutool.core.date.DateUtil.formatDate
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatDate($expr$)

.currentSeconds : cn.hutool.core.date.DateUtil.currentSeconds
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.currentSeconds()

.quarterEnum : cn.hutool.core.date.DateUtil.quarterEnum
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.quarterEnum($expr$)

.isSameDay : cn.hutool.core.date.DateUtil.isSameDay
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameDay($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameDay($expr$, $arg$)

.thisYear : cn.hutool.core.date.DateUtil.thisYear
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisYear()

.lengthOfMonth : cn.hutool.core.date.DateUtil.lengthOfMonth
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.lengthOfMonth($expr$, $arg$)

.beginOfMinute : cn.hutool.core.date.DateUtil.beginOfMinute
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfMinute($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfMinute($expr$)

.formatChineseDate : cn.hutool.core.date.DateUtil.formatChineseDate
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.formatChineseDate($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatChineseDate($expr$, $arg$)

.thisMillisecond : cn.hutool.core.date.DateUtil.thisMillisecond
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisMillisecond()

.yearAndQuarter : cn.hutool.core.date.DateUtil.yearAndQuarter
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.yearAndQuarter($expr$, $arg$)
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.yearAndQuarter($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.yearAndQuarter($expr$, $arg$)

.betweenMonth : cn.hutool.core.date.DateUtil.betweenMonth
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenMonth($expr$, $arg$)

.round : cn.hutool.core.date.DateUtil.round
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.round($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.round($expr$, $arg$)

.betweenDay : cn.hutool.core.date.DateUtil.betweenDay
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenDay($expr$, $arg$)

.tomorrow : cn.hutool.core.date.DateUtil.tomorrow
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.tomorrow()

.rangeContains : cn.hutool.core.date.DateUtil.rangeContains
	cn.hutool.core.date.DateRange [cn.hutool.core.date.DateUtil]  →  DateUtil.rangeContains($expr$, $arg$)

.endOfWeek : cn.hutool.core.date.DateUtil.endOfWeek
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfWeek($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfWeek($expr$, $arg$)

.endOfHour : cn.hutool.core.date.DateUtil.endOfHour
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfHour($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfHour($expr$)

.getShotName : cn.hutool.core.date.DateUtil.getShotName
	java.util.concurrent.TimeUnit [cn.hutool.core.date.DateUtil]  →  DateUtil.getShotName($expr$)

.spendNt : cn.hutool.core.date.DateUtil.spendNt
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.spendNt($expr$)

.thisDayOfWeekEnum : cn.hutool.core.date.DateUtil.thisDayOfWeekEnum
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisDayOfWeekEnum()

.thisHour : cn.hutool.core.date.DateUtil.thisHour
	BOOLEAN [cn.hutool.core.date.DateUtil]  →  DateUtil.thisHour($expr$)

.toInstant : cn.hutool.core.date.DateUtil.toInstant
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.toInstant($expr$)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.DateUtil]  →  DateUtil.toInstant($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.toInstant($expr$)

.endOfYear : cn.hutool.core.date.DateUtil.endOfYear
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfYear($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfYear($expr$)

.endOfMonth : cn.hutool.core.date.DateUtil.endOfMonth
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfMonth($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfMonth($expr$)

.between : cn.hutool.core.date.DateUtil.between
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.between($expr$, $arg$)

.secondToTime : cn.hutool.core.date.DateUtil.secondToTime
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.secondToTime($expr$)

.current : cn.hutool.core.date.DateUtil.current
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.current()

.thisWeekOfYear : cn.hutool.core.date.DateUtil.thisWeekOfYear
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisWeekOfYear()

.spendMs : cn.hutool.core.date.DateUtil.spendMs
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.spendMs($expr$)

.rangeFunc : cn.hutool.core.date.DateUtil.rangeFunc
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.rangeFunc($expr$, $arg$)

.thisMonthEnum : cn.hutool.core.date.DateUtil.thisMonthEnum
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.thisMonthEnum()

.isSameInstant : cn.hutool.core.date.DateUtil.isSameInstant
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameInstant($expr$, $arg$)

.compare : cn.hutool.core.date.DateUtil.compare
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.compare($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.compare($expr$, $arg$)

.timer : cn.hutool.core.date.DateUtil.timer
	BOOLEAN [cn.hutool.core.date.DateUtil]  →  DateUtil.timer($expr$)
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.timer()

.today : cn.hutool.core.date.DateUtil.today
	java.lang.Object [cn.hutool.core.date.DateUtil]  →  DateUtil.today()

.rangeConsume : cn.hutool.core.date.DateUtil.rangeConsume
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.rangeConsume($expr$, $arg$)

.beginOfWeek : cn.hutool.core.date.DateUtil.beginOfWeek
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfWeek($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfWeek($expr$, $arg$)

.month : cn.hutool.core.date.DateUtil.month
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.month($expr$)

.rangeNotContains : cn.hutool.core.date.DateUtil.rangeNotContains
	cn.hutool.core.date.DateRange [cn.hutool.core.date.DateUtil]  →  DateUtil.rangeNotContains($expr$, $arg$)

.offsetDay : cn.hutool.core.date.DateUtil.offsetDay
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetDay($expr$, $arg$)


## LocalDateTimeUtil

.format : cn.hutool.core.date.LocalDateTimeUtil.format
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.format($expr$, $arg$)
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.format($expr$, $arg$)

.endOfDay : cn.hutool.core.date.LocalDateTimeUtil.endOfDay
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.endOfDay($expr$, $arg$)

.parseDate : cn.hutool.core.date.LocalDateTimeUtil.parseDate
	java.lang.CharSequence [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.parseDate($expr$, $arg$)

.isOverlap : cn.hutool.core.date.LocalDateTimeUtil.isOverlap
	java.time.chrono.ChronoLocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.isOverlap($expr$, $arg$)

.dayOfWeek : cn.hutool.core.date.LocalDateTimeUtil.dayOfWeek
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.dayOfWeek($expr$)

.betweenPeriod : cn.hutool.core.date.LocalDateTimeUtil.betweenPeriod
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.betweenPeriod($expr$, $arg$)

.formatNormal : cn.hutool.core.date.LocalDateTimeUtil.formatNormal
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.formatNormal($expr$)
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.formatNormal($expr$)

.isWeekend : cn.hutool.core.date.LocalDateTimeUtil.isWeekend
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.isWeekend($expr$)
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.isWeekend($expr$)

.now : cn.hutool.core.date.LocalDateTimeUtil.now
	java.lang.Object [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.now()

.ofDate : cn.hutool.core.date.LocalDateTimeUtil.ofDate
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.ofDate($expr$)

.ofUTC : cn.hutool.core.date.LocalDateTimeUtil.ofUTC
	LONG [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.ofUTC($expr$)
	java.time.Instant [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.ofUTC($expr$)

.offset : cn.hutool.core.date.LocalDateTimeUtil.offset
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.offset($expr$, $arg$)

.beginOfDay : cn.hutool.core.date.LocalDateTimeUtil.beginOfDay
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.beginOfDay($expr$)

.weekOfYear : cn.hutool.core.date.LocalDateTimeUtil.weekOfYear
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.weekOfYear($expr$)

.parse : cn.hutool.core.date.LocalDateTimeUtil.parse
	java.lang.CharSequence [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.parse($expr$, $arg$)

.toEpochMilli : cn.hutool.core.date.LocalDateTimeUtil.toEpochMilli
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.toEpochMilli($expr$)

.between : cn.hutool.core.date.LocalDateTimeUtil.between
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.between($expr$, $arg$)

.of : cn.hutool.core.date.LocalDateTimeUtil.of
	java.time.ZonedDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$)
	java.time.Instant [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$)
	LONG [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$, $arg$)


## StopWatch

.create : cn.hutool.core.date.StopWatch.create
	java.lang.String [cn.hutool.core.date.StopWatch]  →  StopWatch.create($expr$)


## SystemClock

.now : cn.hutool.core.date.SystemClock.now
	java.lang.Object [cn.hutool.core.date.SystemClock]  →  SystemClock.now()

.nowDate : cn.hutool.core.date.SystemClock.nowDate
	java.lang.Object [cn.hutool.core.date.SystemClock]  →  SystemClock.nowDate()


## TemporalAccessorUtil

.format : cn.hutool.core.date.TemporalAccessorUtil.format
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.format($expr$, $arg$)

.toTimeUnit : cn.hutool.core.date.TemporalAccessorUtil.toTimeUnit
	java.time.temporal.ChronoUnit [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.toTimeUnit($expr$)

.toEpochMilli : cn.hutool.core.date.TemporalAccessorUtil.toEpochMilli
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.toEpochMilli($expr$)

.toChronoUnit : cn.hutool.core.date.TemporalAccessorUtil.toChronoUnit
	java.util.concurrent.TimeUnit [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.toChronoUnit($expr$)

.get : cn.hutool.core.date.TemporalAccessorUtil.get
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.get($expr$, $arg$)

.toInstant : cn.hutool.core.date.TemporalAccessorUtil.toInstant
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.toInstant($expr$)

.between : cn.hutool.core.date.TemporalAccessorUtil.between
	java.time.temporal.Temporal [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.between($expr$, $arg$)


## TemporalUtil

.toChronoUnit : cn.hutool.core.date.TemporalUtil.toChronoUnit
	java.util.concurrent.TimeUnit [cn.hutool.core.date.TemporalUtil]  →  TemporalUtil.toChronoUnit($expr$)

.between : cn.hutool.core.date.TemporalUtil.between
	java.time.temporal.Temporal [cn.hutool.core.date.TemporalUtil]  →  TemporalUtil.between($expr$, $arg$)

.toTimeUnit : cn.hutool.core.date.TemporalUtil.toTimeUnit
	java.time.temporal.ChronoUnit [cn.hutool.core.date.TemporalUtil]  →  TemporalUtil.toTimeUnit($expr$)


## Zodiac

.getChineseZodiac : cn.hutool.core.date.Zodiac.getChineseZodiac
	java.util.Calendar [cn.hutool.core.date.Zodiac]  →  Zodiac.getChineseZodiac($expr$)
	INT [cn.hutool.core.date.Zodiac]  →  Zodiac.getChineseZodiac($expr$)
	java.util.Date [cn.hutool.core.date.Zodiac]  →  Zodiac.getChineseZodiac($expr$)

.getZodiac : cn.hutool.core.date.Zodiac.getZodiac
	cn.hutool.core.date.Month [cn.hutool.core.date.Zodiac]  →  Zodiac.getZodiac($expr$, $arg$)
	java.util.Calendar [cn.hutool.core.date.Zodiac]  →  Zodiac.getZodiac($expr$)
	INT [cn.hutool.core.date.Zodiac]  →  Zodiac.getZodiac($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.Zodiac]  →  Zodiac.getZodiac($expr$)


## ZoneUtil

.toTimeZone : cn.hutool.core.date.ZoneUtil.toTimeZone
	java.time.ZoneId [cn.hutool.core.date.ZoneUtil]  →  ZoneUtil.toTimeZone($expr$)

.toZoneId : cn.hutool.core.date.ZoneUtil.toZoneId
	java.util.TimeZone [cn.hutool.core.date.ZoneUtil]  →  ZoneUtil.toZoneId($expr$)


## ChineseMonth

.getChineseMonthName : cn.hutool.core.date.chinese.ChineseMonth.getChineseMonthName
	BOOLEAN [cn.hutool.core.date.chinese.ChineseMonth]  →  ChineseMonth.getChineseMonthName($expr$, $arg$)

.isLeapMonth : cn.hutool.core.date.chinese.ChineseMonth.isLeapMonth
	INT [cn.hutool.core.date.chinese.ChineseMonth]  →  ChineseMonth.isLeapMonth($expr$, $arg$)


## GanZhi

.getGanzhiOfDay : cn.hutool.core.date.chinese.GanZhi.getGanzhiOfDay
	INT [cn.hutool.core.date.chinese.GanZhi]  →  GanZhi.getGanzhiOfDay($expr$, $arg$)

.cyclicalm : cn.hutool.core.date.chinese.GanZhi.cyclicalm
	INT [cn.hutool.core.date.chinese.GanZhi]  →  GanZhi.cyclicalm($expr$)

.getGanzhiOfMonth : cn.hutool.core.date.chinese.GanZhi.getGanzhiOfMonth
	INT [cn.hutool.core.date.chinese.GanZhi]  →  GanZhi.getGanzhiOfMonth($expr$, $arg$)

.getGanzhiOfYear : cn.hutool.core.date.chinese.GanZhi.getGanzhiOfYear
	INT [cn.hutool.core.date.chinese.GanZhi]  →  GanZhi.getGanzhiOfYear($expr$)


## LunarFestival

.getFestivals : cn.hutool.core.date.chinese.LunarFestival.getFestivals
	INT [cn.hutool.core.date.chinese.LunarFestival]  →  LunarFestival.getFestivals($expr$, $arg$)


## LunarInfo

.leapMonth : cn.hutool.core.date.chinese.LunarInfo.leapMonth
	INT [cn.hutool.core.date.chinese.LunarInfo]  →  LunarInfo.leapMonth($expr$)

.monthDays : cn.hutool.core.date.chinese.LunarInfo.monthDays
	INT [cn.hutool.core.date.chinese.LunarInfo]  →  LunarInfo.monthDays($expr$, $arg$)

.leapDays : cn.hutool.core.date.chinese.LunarInfo.leapDays
	INT [cn.hutool.core.date.chinese.LunarInfo]  →  LunarInfo.leapDays($expr$)

.yearDays : cn.hutool.core.date.chinese.LunarInfo.yearDays
	INT [cn.hutool.core.date.chinese.LunarInfo]  →  LunarInfo.yearDays($expr$)


## SolarTerms

.getTerm : cn.hutool.core.date.chinese.SolarTerms.getTerm
	java.time.LocalDate [cn.hutool.core.date.chinese.SolarTerms]  →  SolarTerms.getTerm($expr$)
	cn.hutool.core.date.ChineseDate [cn.hutool.core.date.chinese.SolarTerms]  →  SolarTerms.getTerm($expr$)
	INT [cn.hutool.core.date.chinese.SolarTerms]  →  SolarTerms.getTerm($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.chinese.SolarTerms]  →  SolarTerms.getTerm($expr$)


## FastDateFormat

.getTimeInstance : cn.hutool.core.date.format.FastDateFormat.getTimeInstance
	INT [cn.hutool.core.date.format.FastDateFormat]  →  FastDateFormat.getTimeInstance($expr$, $arg$)

.getInstance : cn.hutool.core.date.format.FastDateFormat.getInstance
	java.lang.String [cn.hutool.core.date.format.FastDateFormat]  →  FastDateFormat.getInstance($expr$, $arg$)
	java.lang.Object [cn.hutool.core.date.format.FastDateFormat]  →  FastDateFormat.getInstance()

.getDateTimeInstance : cn.hutool.core.date.format.FastDateFormat.getDateTimeInstance
	INT [cn.hutool.core.date.format.FastDateFormat]  →  FastDateFormat.getDateTimeInstance($expr$, $arg$)

.getDateInstance : cn.hutool.core.date.format.FastDateFormat.getDateInstance
	INT [cn.hutool.core.date.format.FastDateFormat]  →  FastDateFormat.getDateInstance($expr$, $arg$)


## GlobalCustomFormat

.format : cn.hutool.core.date.format.GlobalCustomFormat.format
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.format.GlobalCustomFormat]  →  GlobalCustomFormat.format($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.format.GlobalCustomFormat]  →  GlobalCustomFormat.format($expr$, $arg$)

.putParser : cn.hutool.core.date.format.GlobalCustomFormat.putParser
	java.lang.String [cn.hutool.core.date.format.GlobalCustomFormat]  →  GlobalCustomFormat.putParser($expr$, $arg$)

.parse : cn.hutool.core.date.format.GlobalCustomFormat.parse
	java.lang.CharSequence [cn.hutool.core.date.format.GlobalCustomFormat]  →  GlobalCustomFormat.parse($expr$, $arg$)

.putFormatter : cn.hutool.core.date.format.GlobalCustomFormat.putFormatter
	java.lang.String [cn.hutool.core.date.format.GlobalCustomFormat]  →  GlobalCustomFormat.putFormatter($expr$, $arg$)

.isCustomFormat : cn.hutool.core.date.format.GlobalCustomFormat.isCustomFormat
	java.lang.String [cn.hutool.core.date.format.GlobalCustomFormat]  →  GlobalCustomFormat.isCustomFormat($expr$)


## CheckedUtil

.uncheck : cn.hutool.core.exceptions.CheckedUtil.uncheck
	cn.hutool.core.lang.func.Func0 [cn.hutool.core.exceptions.CheckedUtil]  →  CheckedUtil.uncheck($expr$, $arg$)
	cn.hutool.core.lang.func.VoidFunc [cn.hutool.core.exceptions.CheckedUtil]  →  CheckedUtil.uncheck($expr$, $arg$)
	cn.hutool.core.lang.func.VoidFunc0 [cn.hutool.core.exceptions.CheckedUtil]  →  CheckedUtil.uncheck($expr$, $arg$)
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.exceptions.CheckedUtil]  →  CheckedUtil.uncheck($expr$, $arg$)
	cn.hutool.core.lang.func.VoidFunc1 [cn.hutool.core.exceptions.CheckedUtil]  →  CheckedUtil.uncheck($expr$, $arg$)
	cn.hutool.core.lang.func.Func [cn.hutool.core.exceptions.CheckedUtil]  →  CheckedUtil.uncheck($expr$, $arg$)


## ExceptionUtil

.getStackElements : cn.hutool.core.exceptions.ExceptionUtil.getStackElements
	java.lang.Object [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getStackElements()

.wrapRuntimeAndThrow : cn.hutool.core.exceptions.ExceptionUtil.wrapRuntimeAndThrow
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrapRuntimeAndThrow($expr$)

.getRootCauseMessage : cn.hutool.core.exceptions.ExceptionUtil.getRootCauseMessage
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getRootCauseMessage($expr$)

.wrapRuntime : cn.hutool.core.exceptions.ExceptionUtil.wrapRuntime
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrapRuntime($expr$)
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrapRuntime($expr$)

.getSimpleMessage : cn.hutool.core.exceptions.ExceptionUtil.getSimpleMessage
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getSimpleMessage($expr$)

.stacktraceToString : cn.hutool.core.exceptions.ExceptionUtil.stacktraceToString
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.stacktraceToString($expr$, $arg$)

.unwrap : cn.hutool.core.exceptions.ExceptionUtil.unwrap
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.unwrap($expr$)

.getMessage : cn.hutool.core.exceptions.ExceptionUtil.getMessage
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getMessage($expr$)

.wrap : cn.hutool.core.exceptions.ExceptionUtil.wrap
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrap($expr$, $arg$)

.stacktraceToOneLineString : cn.hutool.core.exceptions.ExceptionUtil.stacktraceToOneLineString
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.stacktraceToOneLineString($expr$, $arg$)

.isFromOrSuppressedThrowable : cn.hutool.core.exceptions.ExceptionUtil.isFromOrSuppressedThrowable
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.isFromOrSuppressedThrowable($expr$, $arg$)

.getRootStackElement : cn.hutool.core.exceptions.ExceptionUtil.getRootStackElement
	java.lang.Object [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getRootStackElement()

.convertFromOrSuppressedThrowable : cn.hutool.core.exceptions.ExceptionUtil.convertFromOrSuppressedThrowable
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.convertFromOrSuppressedThrowable($expr$, $arg$)

.isCausedBy : cn.hutool.core.exceptions.ExceptionUtil.isCausedBy
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.isCausedBy($expr$, $arg$)

.getRootCause : cn.hutool.core.exceptions.ExceptionUtil.getRootCause
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getRootCause($expr$)

.getStackElement : cn.hutool.core.exceptions.ExceptionUtil.getStackElement
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getStackElement($expr$, $arg$)
	INT [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getStackElement($expr$)

.getCausedBy : cn.hutool.core.exceptions.ExceptionUtil.getCausedBy
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getCausedBy($expr$, $arg$)

.wrapAndThrow : cn.hutool.core.exceptions.ExceptionUtil.wrapAndThrow
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrapAndThrow($expr$)

.getThrowableList : cn.hutool.core.exceptions.ExceptionUtil.getThrowableList
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getThrowableList($expr$)


## BackgroundRemoval

.getMainColor : cn.hutool.core.img.BackgroundRemoval.getMainColor
	java.lang.String [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.getMainColor($expr$)
	java.awt.image.BufferedImage [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.getMainColor($expr$)
	java.io.File [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.getMainColor($expr$)

.areColorsWithinTolerance : cn.hutool.core.img.BackgroundRemoval.areColorsWithinTolerance
	java.awt.Color [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.areColorsWithinTolerance($expr$, $arg$)

.backgroundRemoval : cn.hutool.core.img.BackgroundRemoval.backgroundRemoval
	java.io.ByteArrayOutputStream [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.backgroundRemoval($expr$, $arg$)
	java.awt.image.BufferedImage [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.backgroundRemoval($expr$, $arg$)
	java.lang.String [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.backgroundRemoval($expr$, $arg$)
	java.io.File [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.backgroundRemoval($expr$, $arg$)

.hexToRgb : cn.hutool.core.img.BackgroundRemoval.hexToRgb
	java.lang.String [cn.hutool.core.img.BackgroundRemoval]  →  BackgroundRemoval.hexToRgb($expr$)


## FontUtil

.getDimension : cn.hutool.core.img.FontUtil.getDimension
	java.awt.FontMetrics [cn.hutool.core.img.FontUtil]  →  FontUtil.getDimension($expr$, $arg$)

.createFont : cn.hutool.core.img.FontUtil.createFont
	java.lang.String [cn.hutool.core.img.FontUtil]  →  FontUtil.createFont($expr$, $arg$)
	java.io.File [cn.hutool.core.img.FontUtil]  →  FontUtil.createFont($expr$)
	java.io.InputStream [cn.hutool.core.img.FontUtil]  →  FontUtil.createFont($expr$)
	java.lang.Object [cn.hutool.core.img.FontUtil]  →  FontUtil.createFont()

.createSansSerifFont : cn.hutool.core.img.FontUtil.createSansSerifFont
	INT [cn.hutool.core.img.FontUtil]  →  FontUtil.createSansSerifFont($expr$)


## GraphicsUtil

.drawString : cn.hutool.core.img.GraphicsUtil.drawString
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.drawString($expr$, $arg$)

.drawImg : cn.hutool.core.img.GraphicsUtil.drawImg
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.drawImg($expr$, $arg$)

.getCenterY : cn.hutool.core.img.GraphicsUtil.getCenterY
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.getCenterY($expr$, $arg$)

.drawStringColourful : cn.hutool.core.img.GraphicsUtil.drawStringColourful
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.drawStringColourful($expr$, $arg$)

.createGraphics : cn.hutool.core.img.GraphicsUtil.createGraphics
	java.awt.image.BufferedImage [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.createGraphics($expr$, $arg$)

.setAlpha : cn.hutool.core.img.GraphicsUtil.setAlpha
	java.awt.Graphics2D [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.setAlpha($expr$, $arg$)


## Img

.from : cn.hutool.core.img.Img.from
	java.io.File [cn.hutool.core.img.Img]  →  Img.from($expr$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.Img]  →  Img.from($expr$)
	java.io.InputStream [cn.hutool.core.img.Img]  →  Img.from($expr$)
	java.nio.file.Path [cn.hutool.core.img.Img]  →  Img.from($expr$)
	java.net.URL [cn.hutool.core.img.Img]  →  Img.from($expr$)
	cn.hutool.core.io.resource.Resource [cn.hutool.core.img.Img]  →  Img.from($expr$)
	java.awt.Image [cn.hutool.core.img.Img]  →  Img.from($expr$)


## ImgUtil

.copyImage : cn.hutool.core.img.ImgUtil.copyImage
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.copyImage($expr$, $arg$)

.read : cn.hutool.core.img.ImgUtil.read
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	java.net.URL [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	cn.hutool.core.io.resource.Resource [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)

.colorConvert : cn.hutool.core.img.ImgUtil.colorConvert
	java.awt.color.ColorSpace [cn.hutool.core.img.ImgUtil]  →  ImgUtil.colorConvert($expr$, $arg$)

.createImage : cn.hutool.core.img.ImgUtil.createImage
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createImage($expr$, $arg$)

.getColor : cn.hutool.core.img.ImgUtil.getColor
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getColor($expr$)
	INT [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getColor($expr$)

.createFont : cn.hutool.core.img.ImgUtil.createFont
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createFont($expr$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createFont($expr$)

.binary : cn.hutool.core.img.ImgUtil.binary
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.binary($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.binary($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.binary($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.binary($expr$, $arg$)

.hexToColor : cn.hutool.core.img.ImgUtil.hexToColor
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.hexToColor($expr$)

.writePng : cn.hutool.core.img.ImgUtil.writePng
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.writePng($expr$, $arg$)

.getRectangle : cn.hutool.core.img.ImgUtil.getRectangle
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getRectangle($expr$, $arg$)

.scale : cn.hutool.core.img.ImgUtil.scale
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.scale($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.scale($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.scale($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.scale($expr$, $arg$)

.cut : cn.hutool.core.img.ImgUtil.cut
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.cut($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.cut($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.cut($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.cut($expr$, $arg$)

.getImageInputStream : cn.hutool.core.img.ImgUtil.getImageInputStream
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getImageInputStream($expr$)

.getImage : cn.hutool.core.img.ImgUtil.getImage
	java.net.URL [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getImage($expr$)

.toImage : cn.hutool.core.img.ImgUtil.toImage
	scala.Array [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toImage($expr$)
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toImage($expr$)

.toBase64DataUri : cn.hutool.core.img.ImgUtil.toBase64DataUri
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toBase64DataUri($expr$, $arg$)

.createGraphics : cn.hutool.core.img.ImgUtil.createGraphics
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createGraphics($expr$, $arg$)

.toRenderedImage : cn.hutool.core.img.ImgUtil.toRenderedImage
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toRenderedImage($expr$)

.filter : cn.hutool.core.img.ImgUtil.filter
	java.awt.image.BufferedImageOp [cn.hutool.core.img.ImgUtil]  →  ImgUtil.filter($expr$, $arg$)
	java.awt.image.ImageFilter [cn.hutool.core.img.ImgUtil]  →  ImgUtil.filter($expr$, $arg$)

.rotate : cn.hutool.core.img.ImgUtil.rotate
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.rotate($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.rotate($expr$, $arg$)

.getImageOutputStream : cn.hutool.core.img.ImgUtil.getImageOutputStream
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getImageOutputStream($expr$)
	java.io.OutputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getImageOutputStream($expr$)

.toStream : cn.hutool.core.img.ImgUtil.toStream
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toStream($expr$, $arg$)

.backgroundRemoval : cn.hutool.core.img.ImgUtil.backgroundRemoval
	java.io.ByteArrayOutputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.backgroundRemoval($expr$, $arg$)
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  ImgUtil.backgroundRemoval($expr$, $arg$)
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.backgroundRemoval($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.backgroundRemoval($expr$, $arg$)

.createCompatibleImage : cn.hutool.core.img.ImgUtil.createCompatibleImage
	INT [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createCompatibleImage($expr$, $arg$)

.gray : cn.hutool.core.img.ImgUtil.gray
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.gray($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.gray($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.gray($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.gray($expr$, $arg$)

.flip : cn.hutool.core.img.ImgUtil.flip
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.flip($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.flip($expr$, $arg$)

.toBytes : cn.hutool.core.img.ImgUtil.toBytes
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toBytes($expr$, $arg$)

.slice : cn.hutool.core.img.ImgUtil.slice
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.slice($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.slice($expr$, $arg$)

.toBase64 : cn.hutool.core.img.ImgUtil.toBase64
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toBase64($expr$, $arg$)

.compress : cn.hutool.core.img.ImgUtil.compress
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.compress($expr$, $arg$)

.toBufferedImage : cn.hutool.core.img.ImgUtil.toBufferedImage
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toBufferedImage($expr$, $arg$)

.getWriter : cn.hutool.core.img.ImgUtil.getWriter
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getWriter($expr$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getWriter($expr$, $arg$)

.pressImage : cn.hutool.core.img.ImgUtil.pressImage
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressImage($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressImage($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressImage($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressImage($expr$, $arg$)

.pressText : cn.hutool.core.img.ImgUtil.pressText
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressText($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressText($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressText($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressText($expr$, $arg$)

.sliceByRowsAndCols : cn.hutool.core.img.ImgUtil.sliceByRowsAndCols
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.sliceByRowsAndCols($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.sliceByRowsAndCols($expr$, $arg$)

.randomColor : cn.hutool.core.img.ImgUtil.randomColor
	java.util.Random [cn.hutool.core.img.ImgUtil]  →  ImgUtil.randomColor($expr$)
	java.lang.Object [cn.hutool.core.img.ImgUtil]  →  ImgUtil.randomColor()

.getReader : cn.hutool.core.img.ImgUtil.getReader
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getReader($expr$)

.writeJpg : cn.hutool.core.img.ImgUtil.writeJpg
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.writeJpg($expr$, $arg$)

.toHex : cn.hutool.core.img.ImgUtil.toHex
	java.awt.Color [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toHex($expr$)
	INT [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toHex($expr$, $arg$)

.transform : cn.hutool.core.img.ImgUtil.transform
	java.awt.geom.AffineTransform [cn.hutool.core.img.ImgUtil]  →  ImgUtil.transform($expr$, $arg$)

.getPointBaseCentre : cn.hutool.core.img.ImgUtil.getPointBaseCentre
	java.awt.Rectangle [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getPointBaseCentre($expr$, $arg$)

.getMainColor : cn.hutool.core.img.ImgUtil.getMainColor
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getMainColor($expr$, $arg$)

.convert : cn.hutool.core.img.ImgUtil.convert
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.convert($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.convert($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.convert($expr$, $arg$)

.write : cn.hutool.core.img.ImgUtil.write
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.write($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.write($expr$, $arg$)


## AppendableWriter

.nullWriter : cn.hutool.core.io.AppendableWriter.nullWriter
	java.lang.Object [cn.hutool.core.io.AppendableWriter]  →  AppendableWriter.nullWriter()


## BOMInputStream

.nullInputStream : cn.hutool.core.io.BOMInputStream.nullInputStream
	java.lang.Object [cn.hutool.core.io.BOMInputStream]  →  BOMInputStream.nullInputStream()


## BomReader

.nullReader : cn.hutool.core.io.BomReader.nullReader
	java.lang.Object [cn.hutool.core.io.BomReader]  →  BomReader.nullReader()


## BufferUtil

.readStr : cn.hutool.core.io.BufferUtil.readStr
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.readStr($expr$, $arg$)

.create : cn.hutool.core.io.BufferUtil.create
	scala.Array [cn.hutool.core.io.BufferUtil]  →  BufferUtil.create($expr$)
	java.lang.CharSequence [cn.hutool.core.io.BufferUtil]  →  BufferUtil.create($expr$, $arg$)

.lineEnd : cn.hutool.core.io.BufferUtil.lineEnd
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.lineEnd($expr$, $arg$)

.readLine : cn.hutool.core.io.BufferUtil.readLine
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.readLine($expr$, $arg$)

.readBytes : cn.hutool.core.io.BufferUtil.readBytes
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.readBytes($expr$, $arg$)

.readUtf8Str : cn.hutool.core.io.BufferUtil.readUtf8Str
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.readUtf8Str($expr$)

.createCharBuffer : cn.hutool.core.io.BufferUtil.createCharBuffer
	INT [cn.hutool.core.io.BufferUtil]  →  BufferUtil.createCharBuffer($expr$)

.copy : cn.hutool.core.io.BufferUtil.copy
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.copy($expr$, $arg$)

.createUtf8 : cn.hutool.core.io.BufferUtil.createUtf8
	java.lang.CharSequence [cn.hutool.core.io.BufferUtil]  →  BufferUtil.createUtf8($expr$)


## CharsetDetector

.detect : cn.hutool.core.io.CharsetDetector.detect
	INT [cn.hutool.core.io.CharsetDetector]  →  CharsetDetector.detect($expr$, $arg$)
	java.io.File [cn.hutool.core.io.CharsetDetector]  →  CharsetDetector.detect($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.CharsetDetector]  →  CharsetDetector.detect($expr$, $arg$)


## FastByteArrayOutputStream

.nullOutputStream : cn.hutool.core.io.FastByteArrayOutputStream.nullOutputStream
	java.lang.Object [cn.hutool.core.io.FastByteArrayOutputStream]  →  FastByteArrayOutputStream.nullOutputStream()


## FastStringWriter

.nullWriter : cn.hutool.core.io.FastStringWriter.nullWriter
	java.lang.Object [cn.hutool.core.io.FastStringWriter]  →  FastStringWriter.nullWriter()


## FileTypeUtil

.getType : cn.hutool.core.io.FileTypeUtil.getType
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.getType($expr$)
	java.io.File [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.getType($expr$)
	java.io.InputStream [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.getType($expr$, $arg$)

.putFileType : cn.hutool.core.io.FileTypeUtil.putFileType
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.putFileType($expr$, $arg$)

.getTypeByPath : cn.hutool.core.io.FileTypeUtil.getTypeByPath
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.getTypeByPath($expr$)

.removeFileType : cn.hutool.core.io.FileTypeUtil.removeFileType
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.removeFileType($expr$)


## FileUtil

.checksumCRC32 : cn.hutool.core.io.FileUtil.checksumCRC32
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.checksumCRC32($expr$)

.del : cn.hutool.core.io.FileUtil.del
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.del($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.del($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.del($expr$)

.subPath : cn.hutool.core.io.FileUtil.subPath
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.subPath($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.subPath($expr$, $arg$)

.isDirEmpty : cn.hutool.core.io.FileUtil.isDirEmpty
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirEmpty($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirEmpty($expr$)

.readString : cn.hutool.core.io.FileUtil.readString
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readString($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.FileUtil]  →  FileUtil.readString($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readString($expr$, $arg$)

.writeString : cn.hutool.core.io.FileUtil.writeString
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.writeString($expr$, $arg$)

.writeMap : cn.hutool.core.io.FileUtil.writeMap
	java.util.Map [cn.hutool.core.io.FileUtil]  →  FileUtil.writeMap($expr$, $arg$)

.writeLines : cn.hutool.core.io.FileUtil.writeLines
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  FileUtil.writeLines($expr$, $arg$)

.lastModifiedTime : cn.hutool.core.io.FileUtil.lastModifiedTime
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.lastModifiedTime($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.lastModifiedTime($expr$)

.getCanonicalPath : cn.hutool.core.io.FileUtil.getCanonicalPath
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getCanonicalPath($expr$)

.move : cn.hutool.core.io.FileUtil.move
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.move($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.move($expr$, $arg$)

.writeFromStream : cn.hutool.core.io.FileUtil.writeFromStream
	java.io.InputStream [cn.hutool.core.io.FileUtil]  →  FileUtil.writeFromStream($expr$, $arg$)

.mainName : cn.hutool.core.io.FileUtil.mainName
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.mainName($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.mainName($expr$)

.size : cn.hutool.core.io.FileUtil.size
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.size($expr$, $arg$)

.lastIndexOfSeparator : cn.hutool.core.io.FileUtil.lastIndexOfSeparator
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.lastIndexOfSeparator($expr$)

.ls : cn.hutool.core.io.FileUtil.ls
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.ls($expr$)

.exist : cn.hutool.core.io.FileUtil.exist
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.exist($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.exist($expr$)

.isModified : cn.hutool.core.io.FileUtil.isModified
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isModified($expr$, $arg$)

.appendString : cn.hutool.core.io.FileUtil.appendString
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.appendString($expr$, $arg$)

.touch : cn.hutool.core.io.FileUtil.touch
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.touch($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.touch($expr$, $arg$)

.writeUtf8Map : cn.hutool.core.io.FileUtil.writeUtf8Map
	java.util.Map [cn.hutool.core.io.FileUtil]  →  FileUtil.writeUtf8Map($expr$, $arg$)

.copyFilesFromDir : cn.hutool.core.io.FileUtil.copyFilesFromDir
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.copyFilesFromDir($expr$, $arg$)

.extName : cn.hutool.core.io.FileUtil.extName
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.extName($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.extName($expr$)

.equals : cn.hutool.core.io.FileUtil.equals
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.equals($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.equals($expr$, $arg$)

.readUtf8Lines : cn.hutool.core.io.FileUtil.readUtf8Lines
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8Lines($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8Lines($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8Lines($expr$, $arg$)

.normalize : cn.hutool.core.io.FileUtil.normalize
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.normalize($expr$)

.getPathEle : cn.hutool.core.io.FileUtil.getPathEle
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getPathEle($expr$, $arg$)

.isSymlink : cn.hutool.core.io.FileUtil.isSymlink
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isSymlink($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isSymlink($expr$)

.getWebRoot : cn.hutool.core.io.FileUtil.getWebRoot
	java.lang.Object [cn.hutool.core.io.FileUtil]  →  FileUtil.getWebRoot()

.clean : cn.hutool.core.io.FileUtil.clean
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.clean($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.clean($expr$)

.mkdir : cn.hutool.core.io.FileUtil.mkdir
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.mkdir($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.mkdir($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.mkdir($expr$)

.walkFiles : cn.hutool.core.io.FileUtil.walkFiles
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.walkFiles($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.walkFiles($expr$, $arg$)

.isWindows : cn.hutool.core.io.FileUtil.isWindows
	java.lang.Object [cn.hutool.core.io.FileUtil]  →  FileUtil.isWindows()

.pathEquals : cn.hutool.core.io.FileUtil.pathEquals
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.pathEquals($expr$, $arg$)

.writeBytes : cn.hutool.core.io.FileUtil.writeBytes
	scala.Array [cn.hutool.core.io.FileUtil]  →  FileUtil.writeBytes($expr$, $arg$)

.isNotEmpty : cn.hutool.core.io.FileUtil.isNotEmpty
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isNotEmpty($expr$)

.getPrintWriter : cn.hutool.core.io.FileUtil.getPrintWriter
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getPrintWriter($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getPrintWriter($expr$, $arg$)

.newFile : cn.hutool.core.io.FileUtil.newFile
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.newFile($expr$)

.writeUtf8String : cn.hutool.core.io.FileUtil.writeUtf8String
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.writeUtf8String($expr$, $arg$)

.load : cn.hutool.core.io.FileUtil.load
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.load($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.load($expr$, $arg$)

.getParent : cn.hutool.core.io.FileUtil.getParent
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getParent($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getParent($expr$, $arg$)

.isDirectory : cn.hutool.core.io.FileUtil.isDirectory
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirectory($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirectory($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirectory($expr$, $arg$)

.getUtf8Reader : cn.hutool.core.io.FileUtil.getUtf8Reader
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getUtf8Reader($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getUtf8Reader($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getUtf8Reader($expr$)

.getPrefix : cn.hutool.core.io.FileUtil.getPrefix
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getPrefix($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getPrefix($expr$)

.convertCharset : cn.hutool.core.io.FileUtil.convertCharset
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.convertCharset($expr$, $arg$)

.tail : cn.hutool.core.io.FileUtil.tail
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.tail($expr$, $arg$)

.readLines : cn.hutool.core.io.FileUtil.readLines
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readLines($expr$, $arg$)
	java.io.RandomAccessFile [cn.hutool.core.io.FileUtil]  →  FileUtil.readLines($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.FileUtil]  →  FileUtil.readLines($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readLines($expr$, $arg$)

.getName : cn.hutool.core.io.FileUtil.getName
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getName($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getName($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getName($expr$)

.rename : cn.hutool.core.io.FileUtil.rename
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.rename($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.rename($expr$, $arg$)

.getBOMReader : cn.hutool.core.io.FileUtil.getBOMReader
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getBOMReader($expr$)

.listFileNames : cn.hutool.core.io.FileUtil.listFileNames
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.listFileNames($expr$)

.mkParentDirs : cn.hutool.core.io.FileUtil.mkParentDirs
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.mkParentDirs($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.mkParentDirs($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.mkParentDirs($expr$)

.createRandomAccessFile : cn.hutool.core.io.FileUtil.createRandomAccessFile
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.createRandomAccessFile($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.createRandomAccessFile($expr$, $arg$)

.checkSlip : cn.hutool.core.io.FileUtil.checkSlip
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.checkSlip($expr$, $arg$)

.mkdirsSafely : cn.hutool.core.io.FileUtil.mkdirsSafely
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.mkdirsSafely($expr$, $arg$)

.readLine : cn.hutool.core.io.FileUtil.readLine
	java.io.RandomAccessFile [cn.hutool.core.io.FileUtil]  →  FileUtil.readLine($expr$, $arg$)

.copyContent : cn.hutool.core.io.FileUtil.copyContent
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.copyContent($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.copyContent($expr$, $arg$)

.getInputStream : cn.hutool.core.io.FileUtil.getInputStream
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getInputStream($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getInputStream($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getInputStream($expr$)

.getLastPathEle : cn.hutool.core.io.FileUtil.getLastPathEle
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getLastPathEle($expr$)

.checksum : cn.hutool.core.io.FileUtil.checksum
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.checksum($expr$, $arg$)

.copyFile : cn.hutool.core.io.FileUtil.copyFile
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.copyFile($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.copyFile($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.copyFile($expr$, $arg$)

.getUserHomePath : cn.hutool.core.io.FileUtil.getUserHomePath
	java.lang.Object [cn.hutool.core.io.FileUtil]  →  FileUtil.getUserHomePath()

.newerThan : cn.hutool.core.io.FileUtil.newerThan
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.newerThan($expr$, $arg$)

.getAttributes : cn.hutool.core.io.FileUtil.getAttributes
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getAttributes($expr$, $arg$)

.isFile : cn.hutool.core.io.FileUtil.isFile
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.isFile($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isFile($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isFile($expr$, $arg$)

.convertLineSeparator : cn.hutool.core.io.FileUtil.convertLineSeparator
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.convertLineSeparator($expr$, $arg$)

.moveContent : cn.hutool.core.io.FileUtil.moveContent
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.moveContent($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.moveContent($expr$, $arg$)

.getLineSeparator : cn.hutool.core.io.FileUtil.getLineSeparator
	java.lang.Object [cn.hutool.core.io.FileUtil]  →  FileUtil.getLineSeparator()

.isAbsolutePath : cn.hutool.core.io.FileUtil.isAbsolutePath
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.isAbsolutePath($expr$)

.readBytes : cn.hutool.core.io.FileUtil.readBytes
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readBytes($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readBytes($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.readBytes($expr$)

.exists : cn.hutool.core.io.FileUtil.exists
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.exists($expr$, $arg$)

.getWriter : cn.hutool.core.io.FileUtil.getWriter
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getWriter($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getWriter($expr$, $arg$)

.loopFiles : cn.hutool.core.io.FileUtil.loopFiles
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.loopFiles($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.loopFiles($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.loopFiles($expr$, $arg$)

.getType : cn.hutool.core.io.FileUtil.getType
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getType($expr$)

.getSuffix : cn.hutool.core.io.FileUtil.getSuffix
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getSuffix($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getSuffix($expr$)

.getBOMInputStream : cn.hutool.core.io.FileUtil.getBOMInputStream
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getBOMInputStream($expr$)

.copy : cn.hutool.core.io.FileUtil.copy
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.copy($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.copy($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.copy($expr$, $arg$)

.writeUtf8Lines : cn.hutool.core.io.FileUtil.writeUtf8Lines
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  FileUtil.writeUtf8Lines($expr$, $arg$)

.containsInvalid : cn.hutool.core.io.FileUtil.containsInvalid
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.containsInvalid($expr$)

.file : cn.hutool.core.io.FileUtil.file
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$, $arg$)
	scala.Array [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$)
	java.net.URI [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$)
	java.net.URL [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$)
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$, $arg$)

.getTmpDirPath : cn.hutool.core.io.FileUtil.getTmpDirPath
	java.lang.Object [cn.hutool.core.io.FileUtil]  →  FileUtil.getTmpDirPath()

.contentEquals : cn.hutool.core.io.FileUtil.contentEquals
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.contentEquals($expr$, $arg$)

.appendUtf8String : cn.hutool.core.io.FileUtil.appendUtf8String
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.appendUtf8String($expr$, $arg$)

.getReader : cn.hutool.core.io.FileUtil.getReader
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getReader($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getReader($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getReader($expr$, $arg$)

.createTempFile : cn.hutool.core.io.FileUtil.createTempFile
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.createTempFile($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.createTempFile($expr$, $arg$)

.getTmpDir : cn.hutool.core.io.FileUtil.getTmpDir
	java.lang.Object [cn.hutool.core.io.FileUtil]  →  FileUtil.getTmpDir()

.appendUtf8Lines : cn.hutool.core.io.FileUtil.appendUtf8Lines
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  FileUtil.appendUtf8Lines($expr$, $arg$)

.writeToStream : cn.hutool.core.io.FileUtil.writeToStream
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.writeToStream($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.writeToStream($expr$, $arg$)

.contentEqualsIgnoreEOL : cn.hutool.core.io.FileUtil.contentEqualsIgnoreEOL
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.contentEqualsIgnoreEOL($expr$, $arg$)

.isEmpty : cn.hutool.core.io.FileUtil.isEmpty
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isEmpty($expr$)

.loadUtf8 : cn.hutool.core.io.FileUtil.loadUtf8
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.loadUtf8($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.loadUtf8($expr$, $arg$)

.appendLines : cn.hutool.core.io.FileUtil.appendLines
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  FileUtil.appendLines($expr$, $arg$)

.readUtf8String : cn.hutool.core.io.FileUtil.readUtf8String
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8String($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8String($expr$)

.isSub : cn.hutool.core.io.FileUtil.isSub
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isSub($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isSub($expr$, $arg$)

.toAbsNormal : cn.hutool.core.io.FileUtil.toAbsNormal
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.toAbsNormal($expr$)

.getAbsolutePath : cn.hutool.core.io.FileUtil.getAbsolutePath
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getAbsolutePath($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getAbsolutePath($expr$)

.pathEndsWith : cn.hutool.core.io.FileUtil.pathEndsWith
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.pathEndsWith($expr$, $arg$)

.cleanInvalid : cn.hutool.core.io.FileUtil.cleanInvalid
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.cleanInvalid($expr$)

.cleanEmpty : cn.hutool.core.io.FileUtil.cleanEmpty
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.cleanEmpty($expr$)

.getOutputStream : cn.hutool.core.io.FileUtil.getOutputStream
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getOutputStream($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getOutputStream($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getOutputStream($expr$)

.getUserHomeDir : cn.hutool.core.io.FileUtil.getUserHomeDir
	java.lang.Object [cn.hutool.core.io.FileUtil]  →  FileUtil.getUserHomeDir()

.getMimeType : cn.hutool.core.io.FileUtil.getMimeType
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getMimeType($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getMimeType($expr$)

.readableFileSize : cn.hutool.core.io.FileUtil.readableFileSize
	LONG [cn.hutool.core.io.FileUtil]  →  FileUtil.readableFileSize($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readableFileSize($expr$)


## IoUtil

.checksumCRC32 : cn.hutool.core.io.IoUtil.checksumCRC32
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.checksumCRC32($expr$)

.toBuffered : cn.hutool.core.io.IoUtil.toBuffered
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toBuffered($expr$, $arg$)
	java.io.Writer [cn.hutool.core.io.IoUtil]  →  IoUtil.toBuffered($expr$, $arg$)
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.toBuffered($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toBuffered($expr$, $arg$)

.read : cn.hutool.core.io.IoUtil.read
	java.nio.channels.FileChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.read($expr$, $arg$)
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.read($expr$, $arg$)
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.read($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.read($expr$, $arg$)

.toPushbackStream : cn.hutool.core.io.IoUtil.toPushbackStream
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toPushbackStream($expr$, $arg$)

.readUtf8Lines : cn.hutool.core.io.IoUtil.readUtf8Lines
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readUtf8Lines($expr$, $arg$)

.readObj : cn.hutool.core.io.IoUtil.readObj
	cn.hutool.core.io.ValidateObjectInputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readObj($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readObj($expr$, $arg$)

.checksumValue : cn.hutool.core.io.IoUtil.checksumValue
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.checksumValue($expr$, $arg$)

.getPushBackReader : cn.hutool.core.io.IoUtil.getPushBackReader
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.getPushBackReader($expr$, $arg$)

.readHex28Upper : cn.hutool.core.io.IoUtil.readHex28Upper
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readHex28Upper($expr$)

.getUtf8Reader : cn.hutool.core.io.IoUtil.getUtf8Reader
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getUtf8Reader($expr$)

.readUtf8 : cn.hutool.core.io.IoUtil.readUtf8
	java.nio.channels.FileChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.readUtf8($expr$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readUtf8($expr$)

.readLines : cn.hutool.core.io.IoUtil.readLines
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.readLines($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readLines($expr$, $arg$)

.lineIter : cn.hutool.core.io.IoUtil.lineIter
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.lineIter($expr$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.lineIter($expr$, $arg$)

.writeObjects : cn.hutool.core.io.IoUtil.writeObjects
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.writeObjects($expr$, $arg$)

.toStr : cn.hutool.core.io.IoUtil.toStr
	java.io.ByteArrayOutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toStr($expr$, $arg$)

.writeUtf8 : cn.hutool.core.io.IoUtil.writeUtf8
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.writeUtf8($expr$, $arg$)

.toStream : cn.hutool.core.io.IoUtil.toStream
	java.io.ByteArrayOutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toStream($expr$)
	scala.Array [cn.hutool.core.io.IoUtil]  →  IoUtil.toStream($expr$)
	java.lang.String [cn.hutool.core.io.IoUtil]  →  IoUtil.toStream($expr$, $arg$)
	java.io.File [cn.hutool.core.io.IoUtil]  →  IoUtil.toStream($expr$)

.checksum : cn.hutool.core.io.IoUtil.checksum
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.checksum($expr$, $arg$)

.readBytes : cn.hutool.core.io.IoUtil.readBytes
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readBytes($expr$, $arg$)

.getUtf8Writer : cn.hutool.core.io.IoUtil.getUtf8Writer
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getUtf8Writer($expr$)

.getWriter : cn.hutool.core.io.IoUtil.getWriter
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getWriter($expr$, $arg$)

.writeObj : cn.hutool.core.io.IoUtil.writeObj
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.writeObj($expr$, $arg$)

.toAvailableStream : cn.hutool.core.io.IoUtil.toAvailableStream
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toAvailableStream($expr$)

.copy : cn.hutool.core.io.IoUtil.copy
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)
	java.io.FileInputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)
	java.nio.channels.FileChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)

.flush : cn.hutool.core.io.IoUtil.flush
	java.io.Flushable [cn.hutool.core.io.IoUtil]  →  IoUtil.flush($expr$)

.contentEquals : cn.hutool.core.io.IoUtil.contentEquals
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.contentEquals($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.contentEquals($expr$, $arg$)

.getReader : cn.hutool.core.io.IoUtil.getReader
	cn.hutool.core.io.BOMInputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getReader($expr$)
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.getReader($expr$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getReader($expr$, $arg$)

.readHex : cn.hutool.core.io.IoUtil.readHex
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readHex($expr$, $arg$)

.close : cn.hutool.core.io.IoUtil.close
	java.io.Closeable [cn.hutool.core.io.IoUtil]  →  IoUtil.close($expr$)
	java.lang.AutoCloseable [cn.hutool.core.io.IoUtil]  →  IoUtil.close($expr$)

.toMarkSupportStream : cn.hutool.core.io.IoUtil.toMarkSupportStream
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toMarkSupportStream($expr$)

.contentEqualsIgnoreEOL : cn.hutool.core.io.IoUtil.contentEqualsIgnoreEOL
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.contentEqualsIgnoreEOL($expr$, $arg$)

.closeIfPosible : cn.hutool.core.io.IoUtil.closeIfPosible
	java.lang.Object [cn.hutool.core.io.IoUtil]  →  IoUtil.closeIfPosible($expr$)

.toUtf8Stream : cn.hutool.core.io.IoUtil.toUtf8Stream
	java.lang.String [cn.hutool.core.io.IoUtil]  →  IoUtil.toUtf8Stream($expr$)

.copyByNIO : cn.hutool.core.io.IoUtil.copyByNIO
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.copyByNIO($expr$, $arg$)

.readHex28Lower : cn.hutool.core.io.IoUtil.readHex28Lower
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readHex28Lower($expr$)

.write : cn.hutool.core.io.IoUtil.write
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.write($expr$, $arg$)

.getBomReader : cn.hutool.core.io.IoUtil.getBomReader
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getBomReader($expr$)


## ManifestUtil

.getManifest : cn.hutool.core.io.ManifestUtil.getManifest
	java.util.jar.JarFile [cn.hutool.core.io.ManifestUtil]  →  ManifestUtil.getManifest($expr$)
	java.net.JarURLConnection [cn.hutool.core.io.ManifestUtil]  →  ManifestUtil.getManifest($expr$)
	java.lang.Class [cn.hutool.core.io.ManifestUtil]  →  ManifestUtil.getManifest($expr$)
	java.io.File [cn.hutool.core.io.ManifestUtil]  →  ManifestUtil.getManifest($expr$)


## NioUtil

.read : cn.hutool.core.io.NioUtil.read
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.read($expr$, $arg$)
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.read($expr$, $arg$)

.readUtf8 : cn.hutool.core.io.NioUtil.readUtf8
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.readUtf8($expr$)

.copy : cn.hutool.core.io.NioUtil.copy
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.copy($expr$, $arg$)
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.copy($expr$, $arg$)

.close : cn.hutool.core.io.NioUtil.close
	java.lang.AutoCloseable [cn.hutool.core.io.NioUtil]  →  NioUtil.close($expr$)

.copyByNIO : cn.hutool.core.io.NioUtil.copyByNIO
	java.io.InputStream [cn.hutool.core.io.NioUtil]  →  NioUtil.copyByNIO($expr$, $arg$)


## NullOutputStream

.nullOutputStream : cn.hutool.core.io.NullOutputStream.nullOutputStream
	java.lang.Object [cn.hutool.core.io.NullOutputStream]  →  NullOutputStream.nullOutputStream()


## ValidateObjectInputStream

.nullInputStream : cn.hutool.core.io.ValidateObjectInputStream.nullInputStream
	java.lang.Object [cn.hutool.core.io.ValidateObjectInputStream]  →  ValidateObjectInputStream.nullInputStream()


## FileCopier

.create : cn.hutool.core.io.file.FileCopier.create
	java.lang.String [cn.hutool.core.io.file.FileCopier]  →  FileCopier.create($expr$, $arg$)
	java.io.File [cn.hutool.core.io.file.FileCopier]  →  FileCopier.create($expr$, $arg$)


## FileNameUtil

.mainName : cn.hutool.core.io.file.FileNameUtil.mainName
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.mainName($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.mainName($expr$)

.extName : cn.hutool.core.io.file.FileNameUtil.extName
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.extName($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.extName($expr$)

.isType : cn.hutool.core.io.file.FileNameUtil.isType
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.isType($expr$, $arg$)

.getPrefix : cn.hutool.core.io.file.FileNameUtil.getPrefix
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getPrefix($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getPrefix($expr$)

.getName : cn.hutool.core.io.file.FileNameUtil.getName
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getName($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getName($expr$)

.getSuffix : cn.hutool.core.io.file.FileNameUtil.getSuffix
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getSuffix($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getSuffix($expr$)

.containsInvalid : cn.hutool.core.io.file.FileNameUtil.containsInvalid
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.containsInvalid($expr$)

.cleanInvalid : cn.hutool.core.io.file.FileNameUtil.cleanInvalid
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.cleanInvalid($expr$)


## FileReader

.create : cn.hutool.core.io.file.FileReader.create
	java.io.File [cn.hutool.core.io.file.FileReader]  →  FileReader.create($expr$, $arg$)


## FileSystemUtil

.getRoot : cn.hutool.core.io.file.FileSystemUtil.getRoot
	java.nio.file.FileSystem [cn.hutool.core.io.file.FileSystemUtil]  →  FileSystemUtil.getRoot($expr$)

.createZip : cn.hutool.core.io.file.FileSystemUtil.createZip
	java.lang.String [cn.hutool.core.io.file.FileSystemUtil]  →  FileSystemUtil.createZip($expr$, $arg$)

.create : cn.hutool.core.io.file.FileSystemUtil.create
	java.lang.String [cn.hutool.core.io.file.FileSystemUtil]  →  FileSystemUtil.create($expr$)


## FileWriter

.create : cn.hutool.core.io.file.FileWriter.create
	java.io.File [cn.hutool.core.io.file.FileWriter]  →  FileWriter.create($expr$, $arg$)


## PathUtil

.del : cn.hutool.core.io.file.PathUtil.del
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.del($expr$)

.subPath : cn.hutool.core.io.file.PathUtil.subPath
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.subPath($expr$, $arg$)

.isDirEmpty : cn.hutool.core.io.file.PathUtil.isDirEmpty
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isDirEmpty($expr$)

.move : cn.hutool.core.io.file.PathUtil.move
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.move($expr$, $arg$)

.equals : cn.hutool.core.io.file.PathUtil.equals
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.equals($expr$, $arg$)

.getPathEle : cn.hutool.core.io.file.PathUtil.getPathEle
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getPathEle($expr$, $arg$)

.isSymlink : cn.hutool.core.io.file.PathUtil.isSymlink
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isSymlink($expr$)

.mkdir : cn.hutool.core.io.file.PathUtil.mkdir
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.mkdir($expr$)

.walkFiles : cn.hutool.core.io.file.PathUtil.walkFiles
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.walkFiles($expr$, $arg$)

.isDirectory : cn.hutool.core.io.file.PathUtil.isDirectory
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isDirectory($expr$, $arg$)

.getUtf8Reader : cn.hutool.core.io.file.PathUtil.getUtf8Reader
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getUtf8Reader($expr$)

.getName : cn.hutool.core.io.file.PathUtil.getName
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getName($expr$)

.rename : cn.hutool.core.io.file.PathUtil.rename
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.rename($expr$, $arg$)

.mkParentDirs : cn.hutool.core.io.file.PathUtil.mkParentDirs
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.mkParentDirs($expr$)

.copyContent : cn.hutool.core.io.file.PathUtil.copyContent
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.copyContent($expr$, $arg$)

.getInputStream : cn.hutool.core.io.file.PathUtil.getInputStream
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getInputStream($expr$)

.getLastPathEle : cn.hutool.core.io.file.PathUtil.getLastPathEle
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getLastPathEle($expr$)

.copyFile : cn.hutool.core.io.file.PathUtil.copyFile
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.copyFile($expr$, $arg$)

.getAttributes : cn.hutool.core.io.file.PathUtil.getAttributes
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getAttributes($expr$, $arg$)

.isFile : cn.hutool.core.io.file.PathUtil.isFile
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isFile($expr$, $arg$)

.moveContent : cn.hutool.core.io.file.PathUtil.moveContent
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.moveContent($expr$, $arg$)

.readBytes : cn.hutool.core.io.file.PathUtil.readBytes
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.readBytes($expr$)

.exists : cn.hutool.core.io.file.PathUtil.exists
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.exists($expr$, $arg$)

.loopFiles : cn.hutool.core.io.file.PathUtil.loopFiles
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.loopFiles($expr$, $arg$)

.copy : cn.hutool.core.io.file.PathUtil.copy
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.copy($expr$, $arg$)

.getReader : cn.hutool.core.io.file.PathUtil.getReader
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getReader($expr$, $arg$)

.isSub : cn.hutool.core.io.file.PathUtil.isSub
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isSub($expr$, $arg$)

.toAbsNormal : cn.hutool.core.io.file.PathUtil.toAbsNormal
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.toAbsNormal($expr$)

.getOutputStream : cn.hutool.core.io.file.PathUtil.getOutputStream
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getOutputStream($expr$)

.getMimeType : cn.hutool.core.io.file.PathUtil.getMimeType
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getMimeType($expr$)


## ResourceUtil

.getStreamSafe : cn.hutool.core.io.resource.ResourceUtil.getStreamSafe
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getStreamSafe($expr$)

.readStr : cn.hutool.core.io.resource.ResourceUtil.readStr
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.readStr($expr$, $arg$)

.getUtf8Reader : cn.hutool.core.io.resource.ResourceUtil.getUtf8Reader
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getUtf8Reader($expr$)

.getResource : cn.hutool.core.io.resource.ResourceUtil.getResource
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getResource($expr$, $arg$)

.getResourceIter : cn.hutool.core.io.resource.ResourceUtil.getResourceIter
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getResourceIter($expr$)

.getResourceObj : cn.hutool.core.io.resource.ResourceUtil.getResourceObj
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getResourceObj($expr$)

.readBytes : cn.hutool.core.io.resource.ResourceUtil.readBytes
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.readBytes($expr$)

.readUtf8Str : cn.hutool.core.io.resource.ResourceUtil.readUtf8Str
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.readUtf8Str($expr$)

.getReader : cn.hutool.core.io.resource.ResourceUtil.getReader
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getReader($expr$, $arg$)

.getStream : cn.hutool.core.io.resource.ResourceUtil.getStream
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getStream($expr$)

.getResources : cn.hutool.core.io.resource.ResourceUtil.getResources
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getResources($expr$)


## DataSize

.ofGigabytes : cn.hutool.core.io.unit.DataSize.ofGigabytes
	LONG [cn.hutool.core.io.unit.DataSize]  →  DataSize.ofGigabytes($expr$)

.ofTerabytes : cn.hutool.core.io.unit.DataSize.ofTerabytes
	LONG [cn.hutool.core.io.unit.DataSize]  →  DataSize.ofTerabytes($expr$)

.ofBytes : cn.hutool.core.io.unit.DataSize.ofBytes
	LONG [cn.hutool.core.io.unit.DataSize]  →  DataSize.ofBytes($expr$)

.ofMegabytes : cn.hutool.core.io.unit.DataSize.ofMegabytes
	LONG [cn.hutool.core.io.unit.DataSize]  →  DataSize.ofMegabytes($expr$)

.parse : cn.hutool.core.io.unit.DataSize.parse
	java.lang.CharSequence [cn.hutool.core.io.unit.DataSize]  →  DataSize.parse($expr$, $arg$)

.ofKilobytes : cn.hutool.core.io.unit.DataSize.ofKilobytes
	LONG [cn.hutool.core.io.unit.DataSize]  →  DataSize.ofKilobytes($expr$)

.of : cn.hutool.core.io.unit.DataSize.of
	java.math.BigDecimal [cn.hutool.core.io.unit.DataSize]  →  DataSize.of($expr$, $arg$)
	LONG [cn.hutool.core.io.unit.DataSize]  →  DataSize.of($expr$, $arg$)


## DataSizeUtil

.parse : cn.hutool.core.io.unit.DataSizeUtil.parse
	java.lang.String [cn.hutool.core.io.unit.DataSizeUtil]  →  DataSizeUtil.parse($expr$)

.format : cn.hutool.core.io.unit.DataSizeUtil.format
	LONG [cn.hutool.core.io.unit.DataSizeUtil]  →  DataSizeUtil.format($expr$)


## WatchMonitor

.createAll : cn.hutool.core.io.watch.WatchMonitor.createAll
	java.io.File [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.createAll($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.createAll($expr$, $arg$)
	java.net.URI [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.createAll($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.createAll($expr$, $arg$)
	java.lang.String [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.createAll($expr$, $arg$)

.interrupted : cn.hutool.core.io.watch.WatchMonitor.interrupted
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.interrupted()

.sleep : cn.hutool.core.io.watch.WatchMonitor.sleep
	LONG [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.sleep($expr$, $arg$)

.create : cn.hutool.core.io.watch.WatchMonitor.create
	java.io.File [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.create($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.create($expr$, $arg$)
	java.net.URI [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.create($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.create($expr$, $arg$)
	java.lang.String [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.create($expr$, $arg$)

.yield : cn.hutool.core.io.watch.WatchMonitor.yield
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.yield()

.enumerate : cn.hutool.core.io.watch.WatchMonitor.enumerate
	scala.Array [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.enumerate($expr$)

.onSpinWait : cn.hutool.core.io.watch.WatchMonitor.onSpinWait
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.onSpinWait()

.setDefaultUncaughtExceptionHandler : cn.hutool.core.io.watch.WatchMonitor.setDefaultUncaughtExceptionHandler
	java.lang.Thread.UncaughtExceptionHandler [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.setDefaultUncaughtExceptionHandler($expr$)

.getDefaultUncaughtExceptionHandler : cn.hutool.core.io.watch.WatchMonitor.getDefaultUncaughtExceptionHandler
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.getDefaultUncaughtExceptionHandler()

.currentThread : cn.hutool.core.io.watch.WatchMonitor.currentThread
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.currentThread()

.dumpStack : cn.hutool.core.io.watch.WatchMonitor.dumpStack
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.dumpStack()

.activeCount : cn.hutool.core.io.watch.WatchMonitor.activeCount
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.activeCount()

.getAllStackTraces : cn.hutool.core.io.watch.WatchMonitor.getAllStackTraces
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.getAllStackTraces()

.holdsLock : cn.hutool.core.io.watch.WatchMonitor.holdsLock
	java.lang.Object [cn.hutool.core.io.watch.WatchMonitor]  →  WatchMonitor.holdsLock($expr$)


## WatchServer

.interrupted : cn.hutool.core.io.watch.WatchServer.interrupted
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.interrupted()

.sleep : cn.hutool.core.io.watch.WatchServer.sleep
	LONG [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.sleep($expr$, $arg$)

.yield : cn.hutool.core.io.watch.WatchServer.yield
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.yield()

.enumerate : cn.hutool.core.io.watch.WatchServer.enumerate
	scala.Array [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.enumerate($expr$)

.onSpinWait : cn.hutool.core.io.watch.WatchServer.onSpinWait
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.onSpinWait()

.setDefaultUncaughtExceptionHandler : cn.hutool.core.io.watch.WatchServer.setDefaultUncaughtExceptionHandler
	java.lang.Thread.UncaughtExceptionHandler [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.setDefaultUncaughtExceptionHandler($expr$)

.getDefaultUncaughtExceptionHandler : cn.hutool.core.io.watch.WatchServer.getDefaultUncaughtExceptionHandler
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.getDefaultUncaughtExceptionHandler()

.currentThread : cn.hutool.core.io.watch.WatchServer.currentThread
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.currentThread()

.dumpStack : cn.hutool.core.io.watch.WatchServer.dumpStack
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.dumpStack()

.activeCount : cn.hutool.core.io.watch.WatchServer.activeCount
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.activeCount()

.getAllStackTraces : cn.hutool.core.io.watch.WatchServer.getAllStackTraces
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.getAllStackTraces()

.holdsLock : cn.hutool.core.io.watch.WatchServer.holdsLock
	java.lang.Object [cn.hutool.core.io.watch.WatchServer]  →  WatchServer.holdsLock($expr$)


## WatchUtil

.register : cn.hutool.core.io.watch.WatchUtil.register
	java.nio.file.Watchable [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.register($expr$, $arg$)

.createAll : cn.hutool.core.io.watch.WatchUtil.createAll
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)

.createModify : cn.hutool.core.io.watch.WatchUtil.createModify
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)

.create : cn.hutool.core.io.watch.WatchUtil.create
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)


## WatcherChain

.create : cn.hutool.core.io.watch.watchers.WatcherChain.create
	scala.Array [cn.hutool.core.io.watch.watchers.WatcherChain]  →  WatcherChain.create($expr$)


## Assert

.notContain : cn.hutool.core.lang.Assert.notContain
	java.lang.String [cn.hutool.core.lang.Assert]  →  Assert.notContain($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.lang.Assert]  →  Assert.notContain($expr$, $arg$)

.checkIndex : cn.hutool.core.lang.Assert.checkIndex
	INT [cn.hutool.core.lang.Assert]  →  Assert.checkIndex($expr$, $arg$)

.state : cn.hutool.core.lang.Assert.state
	BOOLEAN [cn.hutool.core.lang.Assert]  →  Assert.state($expr$, $arg$)

.isNull : cn.hutool.core.lang.Assert.isNull
	java.lang.Object [cn.hutool.core.lang.Assert]  →  Assert.isNull($expr$, $arg$)

.notEmpty : cn.hutool.core.lang.Assert.notEmpty
	scala.Array [cn.hutool.core.lang.Assert]  →  Assert.notEmpty($expr$, $arg$)
	java.util.Map [cn.hutool.core.lang.Assert]  →  Assert.notEmpty($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.lang.Assert]  →  Assert.notEmpty($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.lang.Assert]  →  Assert.notEmpty($expr$, $arg$)

.noNullElements : cn.hutool.core.lang.Assert.noNullElements
	scala.Array [cn.hutool.core.lang.Assert]  →  Assert.noNullElements($expr$, $arg$)

.notBlank : cn.hutool.core.lang.Assert.notBlank
	java.lang.CharSequence [cn.hutool.core.lang.Assert]  →  Assert.notBlank($expr$, $arg$)

.notNull : cn.hutool.core.lang.Assert.notNull
	java.lang.Object [cn.hutool.core.lang.Assert]  →  Assert.notNull($expr$, $arg$)

.isInstanceOf : cn.hutool.core.lang.Assert.isInstanceOf
	java.lang.Class [cn.hutool.core.lang.Assert]  →  Assert.isInstanceOf($expr$, $arg$)

.isAssignable : cn.hutool.core.lang.Assert.isAssignable
	java.lang.Class [cn.hutool.core.lang.Assert]  →  Assert.isAssignable($expr$, $arg$)

.isTrue : cn.hutool.core.lang.Assert.isTrue
	BOOLEAN [cn.hutool.core.lang.Assert]  →  Assert.isTrue($expr$, $arg$)

.checkBetween : cn.hutool.core.lang.Assert.checkBetween
	java.lang.Number [cn.hutool.core.lang.Assert]  →  Assert.checkBetween($expr$, $arg$)
	LONG [cn.hutool.core.lang.Assert]  →  Assert.checkBetween($expr$, $arg$)
	INT [cn.hutool.core.lang.Assert]  →  Assert.checkBetween($expr$, $arg$)
	DOUBLE [cn.hutool.core.lang.Assert]  →  Assert.checkBetween($expr$, $arg$)

.isFalse : cn.hutool.core.lang.Assert.isFalse
	BOOLEAN [cn.hutool.core.lang.Assert]  →  Assert.isFalse($expr$, $arg$)


## ClassScanner

.scanAllPackageBySuper : cn.hutool.core.lang.ClassScanner.scanAllPackageBySuper
	java.lang.String [cn.hutool.core.lang.ClassScanner]  →  ClassScanner.scanAllPackageBySuper($expr$, $arg$)

.scanAllPackageByAnnotation : cn.hutool.core.lang.ClassScanner.scanAllPackageByAnnotation
	java.lang.String [cn.hutool.core.lang.ClassScanner]  →  ClassScanner.scanAllPackageByAnnotation($expr$, $arg$)

.scanPackageBySuper : cn.hutool.core.lang.ClassScanner.scanPackageBySuper
	java.lang.String [cn.hutool.core.lang.ClassScanner]  →  ClassScanner.scanPackageBySuper($expr$, $arg$)

.scanAllPackage : cn.hutool.core.lang.ClassScanner.scanAllPackage
	java.lang.String [cn.hutool.core.lang.ClassScanner]  →  ClassScanner.scanAllPackage($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.ClassScanner]  →  ClassScanner.scanAllPackage()

.scanPackageByAnnotation : cn.hutool.core.lang.ClassScanner.scanPackageByAnnotation
	java.lang.String [cn.hutool.core.lang.ClassScanner]  →  ClassScanner.scanPackageByAnnotation($expr$, $arg$)

.scanPackage : cn.hutool.core.lang.ClassScanner.scanPackage
	java.lang.String [cn.hutool.core.lang.ClassScanner]  →  ClassScanner.scanPackage($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.ClassScanner]  →  ClassScanner.scanPackage()


## Console

.scanner : cn.hutool.core.lang.Console.scanner
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.scanner()

.print : cn.hutool.core.lang.Console.print
	java.lang.String [cn.hutool.core.lang.Console]  →  Console.print($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.print($expr$, $arg$)

.lineNumber : cn.hutool.core.lang.Console.lineNumber
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.lineNumber()

.error : cn.hutool.core.lang.Console.error
	java.lang.String [cn.hutool.core.lang.Console]  →  Console.error($expr$, $arg$)
	java.lang.Throwable [cn.hutool.core.lang.Console]  →  Console.error($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.error($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.error()

.printProgress : cn.hutool.core.lang.Console.printProgress
	CHAR [cn.hutool.core.lang.Console]  →  Console.printProgress($expr$, $arg$)

.where : cn.hutool.core.lang.Console.where
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.where()

.input : cn.hutool.core.lang.Console.input
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.input()

.log : cn.hutool.core.lang.Console.log
	java.lang.String [cn.hutool.core.lang.Console]  →  Console.log($expr$, $arg$)
	java.lang.Throwable [cn.hutool.core.lang.Console]  →  Console.log($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.log($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.Console]  →  Console.log()

.table : cn.hutool.core.lang.Console.table
	cn.hutool.core.lang.ConsoleTable [cn.hutool.core.lang.Console]  →  Console.table($expr$)


## ConsoleTable

.create : cn.hutool.core.lang.ConsoleTable.create
	java.lang.Object [cn.hutool.core.lang.ConsoleTable]  →  ConsoleTable.create()


## Dict

.of : cn.hutool.core.lang.Dict.of
	scala.Array [cn.hutool.core.lang.Dict]  →  Dict.of($expr$)

.parse : cn.hutool.core.lang.Dict.parse
	java.lang.Object [cn.hutool.core.lang.Dict]  →  Dict.parse($expr$)

.create : cn.hutool.core.lang.Dict.create
	java.lang.Object [cn.hutool.core.lang.Dict]  →  Dict.create()


## Holder

.of : cn.hutool.core.lang.Holder.of
	java.lang.Object [cn.hutool.core.lang.Holder]  →  Holder.of($expr$)


## JarClassLoader

.getSystemClassLoader : cn.hutool.core.lang.JarClassLoader.getSystemClassLoader
	java.lang.Object [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.getSystemClassLoader()

.loadJarToSystemClassLoader : cn.hutool.core.lang.JarClassLoader.loadJarToSystemClassLoader
	java.io.File [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.loadJarToSystemClassLoader($expr$)

.getSystemResources : cn.hutool.core.lang.JarClassLoader.getSystemResources
	java.lang.String [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.getSystemResources($expr$)

.load : cn.hutool.core.lang.JarClassLoader.load
	java.io.File [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.load($expr$)

.getSystemResource : cn.hutool.core.lang.JarClassLoader.getSystemResource
	java.lang.String [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.getSystemResource($expr$)

.newInstance : cn.hutool.core.lang.JarClassLoader.newInstance
	scala.Array [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.newInstance($expr$, $arg$)

.loadJar : cn.hutool.core.lang.JarClassLoader.loadJar
	java.net.URLClassLoader [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.loadJar($expr$, $arg$)
	java.io.File [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.loadJar($expr$)

.getPlatformClassLoader : cn.hutool.core.lang.JarClassLoader.getPlatformClassLoader
	java.lang.Object [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.getPlatformClassLoader()

.getSystemResourceAsStream : cn.hutool.core.lang.JarClassLoader.getSystemResourceAsStream
	java.lang.String [cn.hutool.core.lang.JarClassLoader]  →  JarClassLoader.getSystemResourceAsStream($expr$)


## ObjectId

.next : cn.hutool.core.lang.ObjectId.next
	BOOLEAN [cn.hutool.core.lang.ObjectId]  →  ObjectId.next($expr$)
	java.lang.Object [cn.hutool.core.lang.ObjectId]  →  ObjectId.next()

.nextBytes : cn.hutool.core.lang.ObjectId.nextBytes
	java.lang.Object [cn.hutool.core.lang.ObjectId]  →  ObjectId.nextBytes()

.isValid : cn.hutool.core.lang.ObjectId.isValid
	java.lang.String [cn.hutool.core.lang.ObjectId]  →  ObjectId.isValid($expr$)


## Opt

.ofEmptyAble : cn.hutool.core.lang.Opt.ofEmptyAble
	java.util.List [cn.hutool.core.lang.Opt]  →  Opt.ofEmptyAble($expr$)

.empty : cn.hutool.core.lang.Opt.empty
	java.lang.Object [cn.hutool.core.lang.Opt]  →  Opt.empty()

.ofTry : cn.hutool.core.lang.Opt.ofTry
	cn.hutool.core.lang.func.Func0 [cn.hutool.core.lang.Opt]  →  Opt.ofTry($expr$)

.ofNullable : cn.hutool.core.lang.Opt.ofNullable
	java.lang.Object [cn.hutool.core.lang.Opt]  →  Opt.ofNullable($expr$)

.ofBlankAble : cn.hutool.core.lang.Opt.ofBlankAble
	java.lang.Object [cn.hutool.core.lang.Opt]  →  Opt.ofBlankAble($expr$)

.of : cn.hutool.core.lang.Opt.of
	java.lang.Object [cn.hutool.core.lang.Opt]  →  Opt.of($expr$)


## Pair

.of : cn.hutool.core.lang.Pair.of
	java.lang.Object [cn.hutool.core.lang.Pair]  →  Pair.of($expr$, $arg$)


## PatternPool

.get : cn.hutool.core.lang.PatternPool.get
	java.lang.String [cn.hutool.core.lang.PatternPool]  →  PatternPool.get($expr$, $arg$)

.clear : cn.hutool.core.lang.PatternPool.clear
	java.lang.Object [cn.hutool.core.lang.PatternPool]  →  PatternPool.clear()

.remove : cn.hutool.core.lang.PatternPool.remove
	java.lang.String [cn.hutool.core.lang.PatternPool]  →  PatternPool.remove($expr$, $arg$)


## ResourceClassLoader

.getSystemClassLoader : cn.hutool.core.lang.ResourceClassLoader.getSystemClassLoader
	java.lang.Object [cn.hutool.core.lang.ResourceClassLoader]  →  ResourceClassLoader.getSystemClassLoader()

.getSystemResources : cn.hutool.core.lang.ResourceClassLoader.getSystemResources
	java.lang.String [cn.hutool.core.lang.ResourceClassLoader]  →  ResourceClassLoader.getSystemResources($expr$)

.getSystemResource : cn.hutool.core.lang.ResourceClassLoader.getSystemResource
	java.lang.String [cn.hutool.core.lang.ResourceClassLoader]  →  ResourceClassLoader.getSystemResource($expr$)

.getPlatformClassLoader : cn.hutool.core.lang.ResourceClassLoader.getPlatformClassLoader
	java.lang.Object [cn.hutool.core.lang.ResourceClassLoader]  →  ResourceClassLoader.getPlatformClassLoader()

.getSystemResourceAsStream : cn.hutool.core.lang.ResourceClassLoader.getSystemResourceAsStream
	java.lang.String [cn.hutool.core.lang.ResourceClassLoader]  →  ResourceClassLoader.getSystemResourceAsStream($expr$)


## Singleton

.get : cn.hutool.core.lang.Singleton.get
	java.lang.String [cn.hutool.core.lang.Singleton]  →  Singleton.get($expr$, $arg$)
	java.lang.Class [cn.hutool.core.lang.Singleton]  →  Singleton.get($expr$, $arg$)

.put : cn.hutool.core.lang.Singleton.put
	java.lang.String [cn.hutool.core.lang.Singleton]  →  Singleton.put($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.Singleton]  →  Singleton.put($expr$)

.destroy : cn.hutool.core.lang.Singleton.destroy
	java.lang.Object [cn.hutool.core.lang.Singleton]  →  Singleton.destroy()

.remove : cn.hutool.core.lang.Singleton.remove
	java.lang.String [cn.hutool.core.lang.Singleton]  →  Singleton.remove($expr$)
	java.lang.Class [cn.hutool.core.lang.Singleton]  →  Singleton.remove($expr$)


## UUID

.randomUUID : cn.hutool.core.lang.UUID.randomUUID
	BOOLEAN [cn.hutool.core.lang.UUID]  →  UUID.randomUUID($expr$)
	java.lang.Object [cn.hutool.core.lang.UUID]  →  UUID.randomUUID()

.fastUUID : cn.hutool.core.lang.UUID.fastUUID
	java.lang.Object [cn.hutool.core.lang.UUID]  →  UUID.fastUUID()

.nameUUIDFromBytes : cn.hutool.core.lang.UUID.nameUUIDFromBytes
	scala.Array [cn.hutool.core.lang.UUID]  →  UUID.nameUUIDFromBytes($expr$)

.fromString : cn.hutool.core.lang.UUID.fromString
	java.lang.String [cn.hutool.core.lang.UUID]  →  UUID.fromString($expr$)


## Validator

.validateNotEqual : cn.hutool.core.lang.Validator.validateNotEqual
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.validateNotEqual($expr$, $arg$)

.isUrl : cn.hutool.core.lang.Validator.isUrl
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isUrl($expr$)

.isMobile : cn.hutool.core.lang.Validator.isMobile
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isMobile($expr$)

.validateNotEmptyAndNotEqual : cn.hutool.core.lang.Validator.validateNotEmptyAndNotEqual
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.validateNotEmptyAndNotEqual($expr$, $arg$)

.isHex : cn.hutool.core.lang.Validator.isHex
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isHex($expr$)

.isCitizenId : cn.hutool.core.lang.Validator.isCitizenId
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isCitizenId($expr$)

.validateMoney : cn.hutool.core.lang.Validator.validateMoney
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateMoney($expr$, $arg$)

.isIpv6 : cn.hutool.core.lang.Validator.isIpv6
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isIpv6($expr$)

.validateTrue : cn.hutool.core.lang.Validator.validateTrue
	BOOLEAN [cn.hutool.core.lang.Validator]  →  Validator.validateTrue($expr$, $arg$)

.isNull : cn.hutool.core.lang.Validator.isNull
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.isNull($expr$)

.isMac : cn.hutool.core.lang.Validator.isMac
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isMac($expr$)

.validateUrl : cn.hutool.core.lang.Validator.validateUrl
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateUrl($expr$, $arg$)

.validateMobile : cn.hutool.core.lang.Validator.validateMobile
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateMobile($expr$, $arg$)

.hasChinese : cn.hutool.core.lang.Validator.hasChinese
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.hasChinese($expr$)

.isMoney : cn.hutool.core.lang.Validator.isMoney
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isMoney($expr$)

.validateChinese : cn.hutool.core.lang.Validator.validateChinese
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateChinese($expr$, $arg$)

.validateIpv4 : cn.hutool.core.lang.Validator.validateIpv4
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateIpv4($expr$, $arg$)

.validateHex : cn.hutool.core.lang.Validator.validateHex
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateHex($expr$, $arg$)

.isLetter : cn.hutool.core.lang.Validator.isLetter
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isLetter($expr$)

.validatePlateNumber : cn.hutool.core.lang.Validator.validatePlateNumber
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validatePlateNumber($expr$, $arg$)

.validateNotEmpty : cn.hutool.core.lang.Validator.validateNotEmpty
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.validateNotEmpty($expr$, $arg$)

.isNotEmpty : cn.hutool.core.lang.Validator.isNotEmpty
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.isNotEmpty($expr$)

.validateNumber : cn.hutool.core.lang.Validator.validateNumber
	java.lang.String [cn.hutool.core.lang.Validator]  →  Validator.validateNumber($expr$, $arg$)

.validateBirthday : cn.hutool.core.lang.Validator.validateBirthday
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateBirthday($expr$, $arg$)

.isIpv4 : cn.hutool.core.lang.Validator.isIpv4
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isIpv4($expr$)

.validateFalse : cn.hutool.core.lang.Validator.validateFalse
	BOOLEAN [cn.hutool.core.lang.Validator]  →  Validator.validateFalse($expr$, $arg$)

.validateZipCode : cn.hutool.core.lang.Validator.validateZipCode
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateZipCode($expr$, $arg$)

.validateEmpty : cn.hutool.core.lang.Validator.validateEmpty
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.validateEmpty($expr$, $arg$)

.validateWord : cn.hutool.core.lang.Validator.validateWord
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateWord($expr$, $arg$)

.isZipCode : cn.hutool.core.lang.Validator.isZipCode
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isZipCode($expr$)

.isGeneralWithChinese : cn.hutool.core.lang.Validator.isGeneralWithChinese
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isGeneralWithChinese($expr$)

.isPlateNumber : cn.hutool.core.lang.Validator.isPlateNumber
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isPlateNumber($expr$)

.validateUpperCase : cn.hutool.core.lang.Validator.validateUpperCase
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateUpperCase($expr$, $arg$)

.validateMatchRegex : cn.hutool.core.lang.Validator.validateMatchRegex
	java.lang.String [cn.hutool.core.lang.Validator]  →  Validator.validateMatchRegex($expr$, $arg$)

.isLowerCase : cn.hutool.core.lang.Validator.isLowerCase
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isLowerCase($expr$)

.equal : cn.hutool.core.lang.Validator.equal
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.equal($expr$, $arg$)

.isBirthday : cn.hutool.core.lang.Validator.isBirthday
	INT [cn.hutool.core.lang.Validator]  →  Validator.isBirthday($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isBirthday($expr$)

.hasNumber : cn.hutool.core.lang.Validator.hasNumber
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.hasNumber($expr$)

.isBetween : cn.hutool.core.lang.Validator.isBetween
	java.lang.Number [cn.hutool.core.lang.Validator]  →  Validator.isBetween($expr$, $arg$)

.validateMac : cn.hutool.core.lang.Validator.validateMac
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateMac($expr$, $arg$)

.isChinese : cn.hutool.core.lang.Validator.isChinese
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isChinese($expr$)

.validateEmail : cn.hutool.core.lang.Validator.validateEmail
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateEmail($expr$, $arg$)

.isCarVin : cn.hutool.core.lang.Validator.isCarVin
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isCarVin($expr$)

.validateEqual : cn.hutool.core.lang.Validator.validateEqual
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.validateEqual($expr$, $arg$)

.isUpperCase : cn.hutool.core.lang.Validator.isUpperCase
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isUpperCase($expr$)

.isCreditCode : cn.hutool.core.lang.Validator.isCreditCode
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isCreditCode($expr$)

.isNumber : cn.hutool.core.lang.Validator.isNumber
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isNumber($expr$)

.validateGeneralWithChinese : cn.hutool.core.lang.Validator.validateGeneralWithChinese
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateGeneralWithChinese($expr$, $arg$)

.validateGeneral : cn.hutool.core.lang.Validator.validateGeneral
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateGeneral($expr$, $arg$)

.validateUUID : cn.hutool.core.lang.Validator.validateUUID
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateUUID($expr$, $arg$)

.isCarDrivingLicence : cn.hutool.core.lang.Validator.isCarDrivingLicence
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isCarDrivingLicence($expr$)

.isTrue : cn.hutool.core.lang.Validator.isTrue
	BOOLEAN [cn.hutool.core.lang.Validator]  →  Validator.isTrue($expr$)

.isGeneral : cn.hutool.core.lang.Validator.isGeneral
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isGeneral($expr$, $arg$)

.validateCitizenIdNumber : cn.hutool.core.lang.Validator.validateCitizenIdNumber
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateCitizenIdNumber($expr$, $arg$)

.isMatchRegex : cn.hutool.core.lang.Validator.isMatchRegex
	java.lang.String [cn.hutool.core.lang.Validator]  →  Validator.isMatchRegex($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.lang.Validator]  →  Validator.isMatchRegex($expr$, $arg$)

.validateNotEmptyAndEqual : cn.hutool.core.lang.Validator.validateNotEmptyAndEqual
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.validateNotEmptyAndEqual($expr$, $arg$)

.validateIpv6 : cn.hutool.core.lang.Validator.validateIpv6
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateIpv6($expr$, $arg$)

.isNotNull : cn.hutool.core.lang.Validator.isNotNull
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.isNotNull($expr$)

.validateNotNull : cn.hutool.core.lang.Validator.validateNotNull
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.validateNotNull($expr$, $arg$)

.isWord : cn.hutool.core.lang.Validator.isWord
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isWord($expr$)

.isEmpty : cn.hutool.core.lang.Validator.isEmpty
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.isEmpty($expr$)

.validateBetween : cn.hutool.core.lang.Validator.validateBetween
	java.lang.Number [cn.hutool.core.lang.Validator]  →  Validator.validateBetween($expr$, $arg$)

.validateCarDrivingLicence : cn.hutool.core.lang.Validator.validateCarDrivingLicence
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateCarDrivingLicence($expr$, $arg$)

.isEmail : cn.hutool.core.lang.Validator.isEmail
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isEmail($expr$)

.validateLetter : cn.hutool.core.lang.Validator.validateLetter
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateLetter($expr$, $arg$)

.isFalse : cn.hutool.core.lang.Validator.isFalse
	BOOLEAN [cn.hutool.core.lang.Validator]  →  Validator.isFalse($expr$)

.isUUID : cn.hutool.core.lang.Validator.isUUID
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.isUUID($expr$)

.validateCarVin : cn.hutool.core.lang.Validator.validateCarVin
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateCarVin($expr$, $arg$)

.validateNull : cn.hutool.core.lang.Validator.validateNull
	java.lang.Object [cn.hutool.core.lang.Validator]  →  Validator.validateNull($expr$, $arg$)

.validateLowerCase : cn.hutool.core.lang.Validator.validateLowerCase
	java.lang.CharSequence [cn.hutool.core.lang.Validator]  →  Validator.validateLowerCase($expr$, $arg$)


## WeightRandom

.create : cn.hutool.core.lang.WeightRandom.create
	java.lang.Object [cn.hutool.core.lang.WeightRandom]  →  WeightRandom.create()


## CallerUtil

.getCallerCaller : cn.hutool.core.lang.caller.CallerUtil.getCallerCaller
	java.lang.Object [cn.hutool.core.lang.caller.CallerUtil]  →  CallerUtil.getCallerCaller()

.getCaller : cn.hutool.core.lang.caller.CallerUtil.getCaller
	INT [cn.hutool.core.lang.caller.CallerUtil]  →  CallerUtil.getCaller($expr$)
	java.lang.Object [cn.hutool.core.lang.caller.CallerUtil]  →  CallerUtil.getCaller()

.getCallerMethodName : cn.hutool.core.lang.caller.CallerUtil.getCallerMethodName
	BOOLEAN [cn.hutool.core.lang.caller.CallerUtil]  →  CallerUtil.getCallerMethodName($expr$)

.isCalledBy : cn.hutool.core.lang.caller.CallerUtil.isCalledBy
	java.lang.Class [cn.hutool.core.lang.caller.CallerUtil]  →  CallerUtil.isCalledBy($expr$)


## LambdaUtil

.getMethodName : cn.hutool.core.lang.func.LambdaUtil.getMethodName
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  LambdaUtil.getMethodName($expr$)

.getFieldName : cn.hutool.core.lang.func.LambdaUtil.getFieldName
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  LambdaUtil.getFieldName($expr$)

.resolve : cn.hutool.core.lang.func.LambdaUtil.resolve
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  LambdaUtil.resolve($expr$)


## CityHash

.hash32 : cn.hutool.core.lang.hash.CityHash.hash32
	scala.Array [cn.hutool.core.lang.hash.CityHash]  →  CityHash.hash32($expr$)

.hash128 : cn.hutool.core.lang.hash.CityHash.hash128
	scala.Array [cn.hutool.core.lang.hash.CityHash]  →  CityHash.hash128($expr$, $arg$)

.hash64 : cn.hutool.core.lang.hash.CityHash.hash64
	scala.Array [cn.hutool.core.lang.hash.CityHash]  →  CityHash.hash64($expr$, $arg$)


## MetroHash

.hash128 : cn.hutool.core.lang.hash.MetroHash.hash128
	scala.Array [cn.hutool.core.lang.hash.MetroHash]  →  MetroHash.hash128($expr$, $arg$)

.hash64 : cn.hutool.core.lang.hash.MetroHash.hash64
	scala.Array [cn.hutool.core.lang.hash.MetroHash]  →  MetroHash.hash64($expr$, $arg$)


## MurmurHash

.hash32 : cn.hutool.core.lang.hash.MurmurHash.hash32
	scala.Array [cn.hutool.core.lang.hash.MurmurHash]  →  MurmurHash.hash32($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.lang.hash.MurmurHash]  →  MurmurHash.hash32($expr$)

.hash128 : cn.hutool.core.lang.hash.MurmurHash.hash128
	scala.Array [cn.hutool.core.lang.hash.MurmurHash]  →  MurmurHash.hash128($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.lang.hash.MurmurHash]  →  MurmurHash.hash128($expr$)

.hash64 : cn.hutool.core.lang.hash.MurmurHash.hash64
	scala.Array [cn.hutool.core.lang.hash.MurmurHash]  →  MurmurHash.hash64($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.lang.hash.MurmurHash]  →  MurmurHash.hash64($expr$)


## NanoId

.randomNanoId : cn.hutool.core.lang.id.NanoId.randomNanoId
	INT [cn.hutool.core.lang.id.NanoId]  →  NanoId.randomNanoId($expr$)
	java.util.Random [cn.hutool.core.lang.id.NanoId]  →  NanoId.randomNanoId($expr$, $arg$)
	java.lang.Object [cn.hutool.core.lang.id.NanoId]  →  NanoId.randomNanoId()


## InternUtil

.createStringInterner : cn.hutool.core.lang.intern.InternUtil.createStringInterner
	BOOLEAN [cn.hutool.core.lang.intern.InternUtil]  →  InternUtil.createStringInterner($expr$)

.createWeakInterner : cn.hutool.core.lang.intern.InternUtil.createWeakInterner
	java.lang.Object [cn.hutool.core.lang.intern.InternUtil]  →  InternUtil.createWeakInterner()

.createJdkInterner : cn.hutool.core.lang.intern.InternUtil.createJdkInterner
	java.lang.Object [cn.hutool.core.lang.intern.InternUtil]  →  InternUtil.createJdkInterner()


## MutablePair

.of : cn.hutool.core.lang.mutable.MutablePair.of
	java.lang.Object [cn.hutool.core.lang.mutable.MutablePair]  →  MutablePair.of($expr$, $arg$)


## ActualTypeMapperPool

.getActualType : cn.hutool.core.lang.reflect.ActualTypeMapperPool.getActualType
	java.lang.reflect.Type [cn.hutool.core.lang.reflect.ActualTypeMapperPool]  →  ActualTypeMapperPool.getActualType($expr$, $arg$)

.get : cn.hutool.core.lang.reflect.ActualTypeMapperPool.get
	java.lang.reflect.Type [cn.hutool.core.lang.reflect.ActualTypeMapperPool]  →  ActualTypeMapperPool.get($expr$)

.getStrKeyMap : cn.hutool.core.lang.reflect.ActualTypeMapperPool.getStrKeyMap
	java.lang.reflect.Type [cn.hutool.core.lang.reflect.ActualTypeMapperPool]  →  ActualTypeMapperPool.getStrKeyMap($expr$)

.getActualTypes : cn.hutool.core.lang.reflect.ActualTypeMapperPool.getActualTypes
	java.lang.reflect.Type [cn.hutool.core.lang.reflect.ActualTypeMapperPool]  →  ActualTypeMapperPool.getActualTypes($expr$, $arg$)


## LookupFactory

.lookup : cn.hutool.core.lang.reflect.LookupFactory.lookup
	java.lang.Class [cn.hutool.core.lang.reflect.LookupFactory]  →  LookupFactory.lookup($expr$)


## MethodHandleUtil

.lookup : cn.hutool.core.lang.reflect.MethodHandleUtil.lookup
	java.lang.Class [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  MethodHandleUtil.lookup($expr$)

.invokeSpecial : cn.hutool.core.lang.reflect.MethodHandleUtil.invokeSpecial
	java.lang.Object [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  MethodHandleUtil.invokeSpecial($expr$, $arg$)

.findMethod : cn.hutool.core.lang.reflect.MethodHandleUtil.findMethod
	java.lang.Class [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  MethodHandleUtil.findMethod($expr$, $arg$)

.invoke : cn.hutool.core.lang.reflect.MethodHandleUtil.invoke
	java.lang.Object [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  MethodHandleUtil.invoke($expr$, $arg$)
	BOOLEAN [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  MethodHandleUtil.invoke($expr$, $arg$)

.findConstructor : cn.hutool.core.lang.reflect.MethodHandleUtil.findConstructor
	java.lang.Class [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  MethodHandleUtil.findConstructor($expr$, $arg$)


## TreeBuilder

.of : cn.hutool.core.lang.tree.TreeBuilder.of
	java.lang.Object [cn.hutool.core.lang.tree.TreeBuilder]  →  TreeBuilder.of($expr$, $arg$)


## TreeUtil

.buildSingle : cn.hutool.core.lang.tree.TreeUtil.buildSingle
	java.util.List [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.buildSingle($expr$, $arg$)
	java.util.Map [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.buildSingle($expr$, $arg$)

.build : cn.hutool.core.lang.tree.TreeUtil.build
	java.util.Map [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.build($expr$, $arg$)
	java.util.List [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.build($expr$, $arg$)

.getParentsName : cn.hutool.core.lang.tree.TreeUtil.getParentsName
	cn.hutool.core.lang.tree.Tree [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.getParentsName($expr$, $arg$)

.getNode : cn.hutool.core.lang.tree.TreeUtil.getNode
	cn.hutool.core.lang.tree.Tree [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.getNode($expr$, $arg$)

.createEmptyNode : cn.hutool.core.lang.tree.TreeUtil.createEmptyNode
	java.lang.Object [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.createEmptyNode($expr$)


## MapBuilder

.create : cn.hutool.core.map.MapBuilder.create
	java.util.Map [cn.hutool.core.map.MapBuilder]  →  MapBuilder.create($expr$)
	BOOLEAN [cn.hutool.core.map.MapBuilder]  →  MapBuilder.create($expr$)
	java.lang.Object [cn.hutool.core.map.MapBuilder]  →  MapBuilder.create()


## MapProxy

.create : cn.hutool.core.map.MapProxy.create
	java.util.Map [cn.hutool.core.map.MapProxy]  →  MapProxy.create($expr$)


## MapUtil

.newIdentityMap : cn.hutool.core.map.MapUtil.newIdentityMap
	INT [cn.hutool.core.map.MapUtil]  →  MapUtil.newIdentityMap($expr$)

.createProxy : cn.hutool.core.map.MapUtil.createProxy
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.createProxy($expr$)

.getStr : cn.hutool.core.map.MapUtil.getStr
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getStr($expr$, $arg$)

.getBool : cn.hutool.core.map.MapUtil.getBool
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getBool($expr$, $arg$)

.getShort : cn.hutool.core.map.MapUtil.getShort
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getShort($expr$, $arg$)

.getQuietly : cn.hutool.core.map.MapUtil.getQuietly
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getQuietly($expr$, $arg$)

.empty : cn.hutool.core.map.MapUtil.empty
	java.lang.Class [cn.hutool.core.map.MapUtil]  →  MapUtil.empty($expr$)
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  MapUtil.empty()

.removeNullValue : cn.hutool.core.map.MapUtil.removeNullValue
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.removeNullValue($expr$)

.join : cn.hutool.core.map.MapUtil.join
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.join($expr$, $arg$)

.sortJoin : cn.hutool.core.map.MapUtil.sortJoin
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.sortJoin($expr$, $arg$)

.clear : cn.hutool.core.map.MapUtil.clear
	scala.Array [cn.hutool.core.map.MapUtil]  →  MapUtil.clear($expr$)

.defaultIfEmpty : cn.hutool.core.map.MapUtil.defaultIfEmpty
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.defaultIfEmpty($expr$, $arg$)

.toMapList : cn.hutool.core.map.MapUtil.toMapList
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.toMapList($expr$)

.getDouble : cn.hutool.core.map.MapUtil.getDouble
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getDouble($expr$, $arg$)

.isNotEmpty : cn.hutool.core.map.MapUtil.isNotEmpty
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.isNotEmpty($expr$)

.renameKey : cn.hutool.core.map.MapUtil.renameKey
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.renameKey($expr$, $arg$)

.valuesOfKeys : cn.hutool.core.map.MapUtil.valuesOfKeys
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.valuesOfKeys($expr$, $arg$)

.builder : cn.hutool.core.map.MapUtil.builder
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.builder($expr$)
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  MapUtil.builder($expr$, $arg$)
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  MapUtil.builder()

.getChar : cn.hutool.core.map.MapUtil.getChar
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getChar($expr$, $arg$)

.getDate : cn.hutool.core.map.MapUtil.getDate
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getDate($expr$, $arg$)

.inverse : cn.hutool.core.map.MapUtil.inverse
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.inverse($expr$)

.reverse : cn.hutool.core.map.MapUtil.reverse
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.reverse($expr$)

.toListMap : cn.hutool.core.map.MapUtil.toListMap
	java.lang.Iterable [cn.hutool.core.map.MapUtil]  →  MapUtil.toListMap($expr$)

.filter : cn.hutool.core.map.MapUtil.filter
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.filter($expr$, $arg$)

.edit : cn.hutool.core.map.MapUtil.edit
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.edit($expr$, $arg$)

.newConcurrentHashMap : cn.hutool.core.map.MapUtil.newConcurrentHashMap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.newConcurrentHashMap($expr$)
	INT [cn.hutool.core.map.MapUtil]  →  MapUtil.newConcurrentHashMap($expr$)
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  MapUtil.newConcurrentHashMap()

.wrap : cn.hutool.core.map.MapUtil.wrap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.wrap($expr$)

.getFloat : cn.hutool.core.map.MapUtil.getFloat
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getFloat($expr$, $arg$)

.emptyIfNull : cn.hutool.core.map.MapUtil.emptyIfNull
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.emptyIfNull($expr$)

.getInt : cn.hutool.core.map.MapUtil.getInt
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getInt($expr$, $arg$)

.sortByValue : cn.hutool.core.map.MapUtil.sortByValue
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.sortByValue($expr$, $arg$)

.unmodifiable : cn.hutool.core.map.MapUtil.unmodifiable
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.unmodifiable($expr$)

.joinIgnoreNull : cn.hutool.core.map.MapUtil.joinIgnoreNull
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.joinIgnoreNull($expr$, $arg$)

.get : cn.hutool.core.map.MapUtil.get
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.get($expr$, $arg$)

.toCamelCaseMap : cn.hutool.core.map.MapUtil.toCamelCaseMap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.toCamelCaseMap($expr$)

.sort : cn.hutool.core.map.MapUtil.sort
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.sort($expr$, $arg$)

.createMap : cn.hutool.core.map.MapUtil.createMap
	java.lang.Class [cn.hutool.core.map.MapUtil]  →  MapUtil.createMap($expr$)

.getAny : cn.hutool.core.map.MapUtil.getAny
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getAny($expr$, $arg$)

.isEmpty : cn.hutool.core.map.MapUtil.isEmpty
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.isEmpty($expr$)

.removeAny : cn.hutool.core.map.MapUtil.removeAny
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.removeAny($expr$, $arg$)

.newHashMap : cn.hutool.core.map.MapUtil.newHashMap
	INT [cn.hutool.core.map.MapUtil]  →  MapUtil.newHashMap($expr$, $arg$)
	BOOLEAN [cn.hutool.core.map.MapUtil]  →  MapUtil.newHashMap($expr$)
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  MapUtil.newHashMap()

.of : cn.hutool.core.map.MapUtil.of
	scala.Array [cn.hutool.core.map.MapUtil]  →  MapUtil.of($expr$)
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  MapUtil.of($expr$, $arg$)

.getLong : cn.hutool.core.map.MapUtil.getLong
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getLong($expr$, $arg$)

.toObjectArray : cn.hutool.core.map.MapUtil.toObjectArray
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.toObjectArray($expr$)

.newTreeMap : cn.hutool.core.map.MapUtil.newTreeMap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.newTreeMap($expr$, $arg$)
	java.util.Comparator [cn.hutool.core.map.MapUtil]  →  MapUtil.newTreeMap($expr$)


## TolerantMap

.of : cn.hutool.core.map.TolerantMap.of
	java.util.Map [cn.hutool.core.map.TolerantMap]  →  TolerantMap.of($expr$, $arg$)


## Arrangement

.count : cn.hutool.core.math.Arrangement.count
	INT [cn.hutool.core.math.Arrangement]  →  Arrangement.count($expr$, $arg$)

.countAll : cn.hutool.core.math.Arrangement.countAll
	INT [cn.hutool.core.math.Arrangement]  →  Arrangement.countAll($expr$)


## BitStatusUtil

.clear : cn.hutool.core.math.BitStatusUtil.clear
	java.lang.Object [cn.hutool.core.math.BitStatusUtil]  →  BitStatusUtil.clear()

.remove : cn.hutool.core.math.BitStatusUtil.remove
	INT [cn.hutool.core.math.BitStatusUtil]  →  BitStatusUtil.remove($expr$, $arg$)

.has : cn.hutool.core.math.BitStatusUtil.has
	INT [cn.hutool.core.math.BitStatusUtil]  →  BitStatusUtil.has($expr$, $arg$)

.add : cn.hutool.core.math.BitStatusUtil.add
	INT [cn.hutool.core.math.BitStatusUtil]  →  BitStatusUtil.add($expr$, $arg$)


## Calculator

.conversion : cn.hutool.core.math.Calculator.conversion
	java.lang.String [cn.hutool.core.math.Calculator]  →  Calculator.conversion($expr$)


## Combination

.count : cn.hutool.core.math.Combination.count
	INT [cn.hutool.core.math.Combination]  →  Combination.count($expr$, $arg$)

.countAll : cn.hutool.core.math.Combination.countAll
	INT [cn.hutool.core.math.Combination]  →  Combination.countAll($expr$)


## MathUtil

.centToYuan : cn.hutool.core.math.MathUtil.centToYuan
	LONG [cn.hutool.core.math.MathUtil]  →  MathUtil.centToYuan($expr$)

.yuanToCent : cn.hutool.core.math.MathUtil.yuanToCent
	DOUBLE [cn.hutool.core.math.MathUtil]  →  MathUtil.yuanToCent($expr$)

.arrangementCount : cn.hutool.core.math.MathUtil.arrangementCount
	INT [cn.hutool.core.math.MathUtil]  →  MathUtil.arrangementCount($expr$, $arg$)

.arrangementSelect : cn.hutool.core.math.MathUtil.arrangementSelect
	scala.Array [cn.hutool.core.math.MathUtil]  →  MathUtil.arrangementSelect($expr$, $arg$)

.combinationCount : cn.hutool.core.math.MathUtil.combinationCount
	INT [cn.hutool.core.math.MathUtil]  →  MathUtil.combinationCount($expr$, $arg$)

.combinationSelect : cn.hutool.core.math.MathUtil.combinationSelect
	scala.Array [cn.hutool.core.math.MathUtil]  →  MathUtil.combinationSelect($expr$, $arg$)


## Ipv4Util

.longToIpv4 : cn.hutool.core.net.Ipv4Util.longToIpv4
	LONG [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.longToIpv4($expr$)

.formatIpBlock : cn.hutool.core.net.Ipv4Util.formatIpBlock
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.formatIpBlock($expr$, $arg$)

.getEndIpStr : cn.hutool.core.net.Ipv4Util.getEndIpStr
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getEndIpStr($expr$, $arg$)

.countByIpRange : cn.hutool.core.net.Ipv4Util.countByIpRange
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.countByIpRange($expr$, $arg$)

.isMaskBitValid : cn.hutool.core.net.Ipv4Util.isMaskBitValid
	INT [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.isMaskBitValid($expr$)

.getMaskByMaskBit : cn.hutool.core.net.Ipv4Util.getMaskByMaskBit
	INT [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getMaskByMaskBit($expr$)

.getMaskBitByMask : cn.hutool.core.net.Ipv4Util.getMaskBitByMask
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getMaskBitByMask($expr$)

.isInnerIP : cn.hutool.core.net.Ipv4Util.isInnerIP
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.isInnerIP($expr$)

.getBeginIpStr : cn.hutool.core.net.Ipv4Util.getBeginIpStr
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getBeginIpStr($expr$, $arg$)

.getEndIpLong : cn.hutool.core.net.Ipv4Util.getEndIpLong
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getEndIpLong($expr$, $arg$)

.isMaskValid : cn.hutool.core.net.Ipv4Util.isMaskValid
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.isMaskValid($expr$)

.getBeginIpLong : cn.hutool.core.net.Ipv4Util.getBeginIpLong
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getBeginIpLong($expr$, $arg$)

.countByMaskBit : cn.hutool.core.net.Ipv4Util.countByMaskBit
	INT [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.countByMaskBit($expr$, $arg$)

.ipv4ToLong : cn.hutool.core.net.Ipv4Util.ipv4ToLong
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.ipv4ToLong($expr$)

.list : cn.hutool.core.net.Ipv4Util.list
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.list($expr$, $arg$)

.getMaskByIpRange : cn.hutool.core.net.Ipv4Util.getMaskByIpRange
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getMaskByIpRange($expr$, $arg$)


## MaskBit

.getMaskBit : cn.hutool.core.net.MaskBit.getMaskBit
	java.lang.String [cn.hutool.core.net.MaskBit]  →  MaskBit.getMaskBit($expr$)

.get : cn.hutool.core.net.MaskBit.get
	INT [cn.hutool.core.net.MaskBit]  →  MaskBit.get($expr$)


## NetUtil

.longToIpv4 : cn.hutool.core.net.NetUtil.longToIpv4
	LONG [cn.hutool.core.net.NetUtil]  →  NetUtil.longToIpv4($expr$)

.createAddress : cn.hutool.core.net.NetUtil.createAddress
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.createAddress($expr$, $arg$)

.getLocalMacAddress : cn.hutool.core.net.NetUtil.getLocalMacAddress
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.getLocalMacAddress()

.localIps : cn.hutool.core.net.NetUtil.localIps
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.localIps()

.localIpv4s : cn.hutool.core.net.NetUtil.localIpv4s
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.localIpv4s()

.isInRange : cn.hutool.core.net.NetUtil.isInRange
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.isInRange($expr$, $arg$)

.isUsableLocalPort : cn.hutool.core.net.NetUtil.isUsableLocalPort
	INT [cn.hutool.core.net.NetUtil]  →  NetUtil.isUsableLocalPort($expr$)

.getLocalHardwareAddress : cn.hutool.core.net.NetUtil.getLocalHardwareAddress
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.getLocalHardwareAddress()

.getLocalhost : cn.hutool.core.net.NetUtil.getLocalhost
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.getLocalhost()

.getLocalHostName : cn.hutool.core.net.NetUtil.getLocalHostName
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.getLocalHostName()

.localIpv6s : cn.hutool.core.net.NetUtil.localIpv6s
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.localIpv6s()

.getNetworkInterface : cn.hutool.core.net.NetUtil.getNetworkInterface
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.getNetworkInterface($expr$)

.getIpByHost : cn.hutool.core.net.NetUtil.getIpByHost
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.getIpByHost($expr$)

.isUnknown : cn.hutool.core.net.NetUtil.isUnknown
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.isUnknown($expr$)

.ipv6ToBitInteger : cn.hutool.core.net.NetUtil.ipv6ToBitInteger
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.ipv6ToBitInteger($expr$)

.toIpList : cn.hutool.core.net.NetUtil.toIpList
	java.util.Set [cn.hutool.core.net.NetUtil]  →  NetUtil.toIpList($expr$)

.isInnerIP : cn.hutool.core.net.NetUtil.isInnerIP
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.isInnerIP($expr$)

.getMacAddress : cn.hutool.core.net.NetUtil.getMacAddress
	java.net.InetAddress [cn.hutool.core.net.NetUtil]  →  NetUtil.getMacAddress($expr$, $arg$)

.ping : cn.hutool.core.net.NetUtil.ping
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.ping($expr$, $arg$)

.idnToASCII : cn.hutool.core.net.NetUtil.idnToASCII
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.idnToASCII($expr$)

.setGlobalAuthenticator : cn.hutool.core.net.NetUtil.setGlobalAuthenticator
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.setGlobalAuthenticator($expr$, $arg$)
	java.net.Authenticator [cn.hutool.core.net.NetUtil]  →  NetUtil.setGlobalAuthenticator($expr$)

.bigIntegerToIPv6 : cn.hutool.core.net.NetUtil.bigIntegerToIPv6
	java.math.BigInteger [cn.hutool.core.net.NetUtil]  →  NetUtil.bigIntegerToIPv6($expr$)

.parseCookies : cn.hutool.core.net.NetUtil.parseCookies
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.parseCookies($expr$)

.isValidPort : cn.hutool.core.net.NetUtil.isValidPort
	INT [cn.hutool.core.net.NetUtil]  →  NetUtil.isValidPort($expr$)

.toAbsoluteUrl : cn.hutool.core.net.NetUtil.toAbsoluteUrl
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.toAbsoluteUrl($expr$, $arg$)

.getUsableLocalPort : cn.hutool.core.net.NetUtil.getUsableLocalPort
	INT [cn.hutool.core.net.NetUtil]  →  NetUtil.getUsableLocalPort($expr$, $arg$)
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.getUsableLocalPort()

.getNetworkInterfaces : cn.hutool.core.net.NetUtil.getNetworkInterfaces
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.getNetworkInterfaces()

.getDnsInfo : cn.hutool.core.net.NetUtil.getDnsInfo
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.getDnsInfo($expr$, $arg$)

.buildInetSocketAddress : cn.hutool.core.net.NetUtil.buildInetSocketAddress
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.buildInetSocketAddress($expr$, $arg$)

.isOpen : cn.hutool.core.net.NetUtil.isOpen
	java.net.InetSocketAddress [cn.hutool.core.net.NetUtil]  →  NetUtil.isOpen($expr$, $arg$)

.getMultistageReverseProxyIp : cn.hutool.core.net.NetUtil.getMultistageReverseProxyIp
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.getMultistageReverseProxyIp($expr$)

.hideIpPart : cn.hutool.core.net.NetUtil.hideIpPart
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.hideIpPart($expr$)
	LONG [cn.hutool.core.net.NetUtil]  →  NetUtil.hideIpPart($expr$)

.localAddressList : cn.hutool.core.net.NetUtil.localAddressList
	cn.hutool.core.lang.Filter [cn.hutool.core.net.NetUtil]  →  NetUtil.localAddressList($expr$)

.ipv4ToLong : cn.hutool.core.net.NetUtil.ipv4ToLong
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.ipv4ToLong($expr$)

.getHardwareAddress : cn.hutool.core.net.NetUtil.getHardwareAddress
	java.net.InetAddress [cn.hutool.core.net.NetUtil]  →  NetUtil.getHardwareAddress($expr$)

.getUsableLocalPorts : cn.hutool.core.net.NetUtil.getUsableLocalPorts
	INT [cn.hutool.core.net.NetUtil]  →  NetUtil.getUsableLocalPorts($expr$, $arg$)

.getLocalhostStr : cn.hutool.core.net.NetUtil.getLocalhostStr
	java.lang.Object [cn.hutool.core.net.NetUtil]  →  NetUtil.getLocalhostStr()

.netCat : cn.hutool.core.net.NetUtil.netCat
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.netCat($expr$, $arg$)


## PassAuth

.setDefault : cn.hutool.core.net.PassAuth.setDefault
	java.net.Authenticator [cn.hutool.core.net.PassAuth]  →  PassAuth.setDefault($expr$)

.of : cn.hutool.core.net.PassAuth.of
	java.lang.String [cn.hutool.core.net.PassAuth]  →  PassAuth.of($expr$, $arg$)

.requestPasswordAuthentication : cn.hutool.core.net.PassAuth.requestPasswordAuthentication
	java.lang.String [cn.hutool.core.net.PassAuth]  →  PassAuth.requestPasswordAuthentication($expr$, $arg$)
	java.net.InetAddress [cn.hutool.core.net.PassAuth]  →  PassAuth.requestPasswordAuthentication($expr$, $arg$)
	java.net.Authenticator [cn.hutool.core.net.PassAuth]  →  PassAuth.requestPasswordAuthentication($expr$, $arg$)

.getDefault : cn.hutool.core.net.PassAuth.getDefault
	java.lang.Object [cn.hutool.core.net.PassAuth]  →  PassAuth.getDefault()


## SSLContextBuilder

.create : cn.hutool.core.net.SSLContextBuilder.create
	java.lang.Object [cn.hutool.core.net.SSLContextBuilder]  →  SSLContextBuilder.create()


## SSLUtil

.createSSLContext : cn.hutool.core.net.SSLUtil.createSSLContext
	java.lang.String [cn.hutool.core.net.SSLUtil]  →  SSLUtil.createSSLContext($expr$, $arg$)


## URLDecoder

.decodeForPath : cn.hutool.core.net.URLDecoder.decodeForPath
	java.lang.String [cn.hutool.core.net.URLDecoder]  →  URLDecoder.decodeForPath($expr$, $arg$)

.decode : cn.hutool.core.net.URLDecoder.decode
	scala.Array [cn.hutool.core.net.URLDecoder]  →  URLDecoder.decode($expr$, $arg$)
	java.lang.String [cn.hutool.core.net.URLDecoder]  →  URLDecoder.decode($expr$, $arg$)


## URLEncodeUtil

.encode : cn.hutool.core.net.URLEncodeUtil.encode
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  URLEncodeUtil.encode($expr$, $arg$)

.encodeQuery : cn.hutool.core.net.URLEncodeUtil.encodeQuery
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  URLEncodeUtil.encodeQuery($expr$, $arg$)

.encodePathSegment : cn.hutool.core.net.URLEncodeUtil.encodePathSegment
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  URLEncodeUtil.encodePathSegment($expr$, $arg$)

.encodeFragment : cn.hutool.core.net.URLEncodeUtil.encodeFragment
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  URLEncodeUtil.encodeFragment($expr$, $arg$)

.encodeAll : cn.hutool.core.net.URLEncodeUtil.encodeAll
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  URLEncodeUtil.encodeAll($expr$, $arg$)


## URLEncoder

.createAll : cn.hutool.core.net.URLEncoder.createAll
	java.lang.Object [cn.hutool.core.net.URLEncoder]  →  URLEncoder.createAll()

.createFragment : cn.hutool.core.net.URLEncoder.createFragment
	java.lang.Object [cn.hutool.core.net.URLEncoder]  →  URLEncoder.createFragment()

.createPathSegment : cn.hutool.core.net.URLEncoder.createPathSegment
	java.lang.Object [cn.hutool.core.net.URLEncoder]  →  URLEncoder.createPathSegment()

.createQuery : cn.hutool.core.net.URLEncoder.createQuery
	java.lang.Object [cn.hutool.core.net.URLEncoder]  →  URLEncoder.createQuery()

.createDefault : cn.hutool.core.net.URLEncoder.createDefault
	java.lang.Object [cn.hutool.core.net.URLEncoder]  →  URLEncoder.createDefault()


## UserPassAuthenticator

.setDefault : cn.hutool.core.net.UserPassAuthenticator.setDefault
	java.net.Authenticator [cn.hutool.core.net.UserPassAuthenticator]  →  UserPassAuthenticator.setDefault($expr$)

.requestPasswordAuthentication : cn.hutool.core.net.UserPassAuthenticator.requestPasswordAuthentication
	java.lang.String [cn.hutool.core.net.UserPassAuthenticator]  →  UserPassAuthenticator.requestPasswordAuthentication($expr$, $arg$)
	java.net.InetAddress [cn.hutool.core.net.UserPassAuthenticator]  →  UserPassAuthenticator.requestPasswordAuthentication($expr$, $arg$)
	java.net.Authenticator [cn.hutool.core.net.UserPassAuthenticator]  →  UserPassAuthenticator.requestPasswordAuthentication($expr$, $arg$)

.getDefault : cn.hutool.core.net.UserPassAuthenticator.getDefault
	java.lang.Object [cn.hutool.core.net.UserPassAuthenticator]  →  UserPassAuthenticator.getDefault()


## MultipartRequestInputStream

.nullInputStream : cn.hutool.core.net.multipart.MultipartRequestInputStream.nullInputStream
	java.lang.Object [cn.hutool.core.net.multipart.MultipartRequestInputStream]  →  MultipartRequestInputStream.nullInputStream()


## UrlBuilder

.ofHttpWithoutEncode : cn.hutool.core.net.url.UrlBuilder.ofHttpWithoutEncode
	java.lang.String [cn.hutool.core.net.url.UrlBuilder]  →  UrlBuilder.ofHttpWithoutEncode($expr$)

.of : cn.hutool.core.net.url.UrlBuilder.of
	java.lang.String [cn.hutool.core.net.url.UrlBuilder]  →  UrlBuilder.of($expr$, $arg$)
	java.net.URI [cn.hutool.core.net.url.UrlBuilder]  →  UrlBuilder.of($expr$, $arg$)
	java.net.URL [cn.hutool.core.net.url.UrlBuilder]  →  UrlBuilder.of($expr$, $arg$)

.ofHttp : cn.hutool.core.net.url.UrlBuilder.ofHttp
	java.lang.String [cn.hutool.core.net.url.UrlBuilder]  →  UrlBuilder.ofHttp($expr$, $arg$)

.create : cn.hutool.core.net.url.UrlBuilder.create
	java.lang.Object [cn.hutool.core.net.url.UrlBuilder]  →  UrlBuilder.create()


## UrlPath

.of : cn.hutool.core.net.url.UrlPath.of
	java.lang.CharSequence [cn.hutool.core.net.url.UrlPath]  →  UrlPath.of($expr$, $arg$)


## UrlQuery

.of : cn.hutool.core.net.url.UrlQuery.of
	java.lang.String [cn.hutool.core.net.url.UrlQuery]  →  UrlQuery.of($expr$, $arg$)
	java.util.Map [cn.hutool.core.net.url.UrlQuery]  →  UrlQuery.of($expr$, $arg$)


## CollectorUtil

.toMap : cn.hutool.core.stream.CollectorUtil.toMap
	java.util.function.Function [cn.hutool.core.stream.CollectorUtil]  →  CollectorUtil.toMap($expr$, $arg$)

.mapMerger : cn.hutool.core.stream.CollectorUtil.mapMerger
	java.util.function.BinaryOperator [cn.hutool.core.stream.CollectorUtil]  →  CollectorUtil.mapMerger($expr$)

.joining : cn.hutool.core.stream.CollectorUtil.joining
	java.lang.CharSequence [cn.hutool.core.stream.CollectorUtil]  →  CollectorUtil.joining($expr$, $arg$)

.groupingBy : cn.hutool.core.stream.CollectorUtil.groupingBy
	java.util.function.Function [cn.hutool.core.stream.CollectorUtil]  →  CollectorUtil.groupingBy($expr$, $arg$)


## StreamUtil

.of : cn.hutool.core.stream.StreamUtil.of
	java.io.File [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$, $arg$)
	scala.Array [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$)
	java.nio.file.Path [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$, $arg$)
	java.lang.Object [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$, $arg$)

.join : cn.hutool.core.stream.StreamUtil.join
	java.util.stream.Stream [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.join($expr$, $arg$)


## DesktopUtil

.print : cn.hutool.core.swing.DesktopUtil.print
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.print($expr$)

.browse : cn.hutool.core.swing.DesktopUtil.browse
	java.lang.String [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.browse($expr$)
	java.net.URI [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.browse($expr$)

.getDsktop : cn.hutool.core.swing.DesktopUtil.getDsktop
	java.lang.Object [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.getDsktop()

.open : cn.hutool.core.swing.DesktopUtil.open
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.open($expr$)

.edit : cn.hutool.core.swing.DesktopUtil.edit
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.edit($expr$)

.mail : cn.hutool.core.swing.DesktopUtil.mail
	java.lang.String [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.mail($expr$)


## RobotUtil

.keyPressWithAlt : cn.hutool.core.swing.RobotUtil.keyPressWithAlt
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyPressWithAlt($expr$)

.mouseWheel : cn.hutool.core.swing.RobotUtil.mouseWheel
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.mouseWheel($expr$)

.delay : cn.hutool.core.swing.RobotUtil.delay
	java.lang.Object [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.delay()

.captureScreen : cn.hutool.core.swing.RobotUtil.captureScreen
	java.io.File [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.captureScreen($expr$)
	java.awt.Rectangle [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.captureScreen($expr$, $arg$)
	java.lang.Object [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.captureScreen()

.getRobot : cn.hutool.core.swing.RobotUtil.getRobot
	java.lang.Object [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.getRobot()

.setDelay : cn.hutool.core.swing.RobotUtil.setDelay
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.setDelay($expr$)

.keyPressString : cn.hutool.core.swing.RobotUtil.keyPressString
	java.lang.String [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyPressString($expr$)

.keyPressWithShift : cn.hutool.core.swing.RobotUtil.keyPressWithShift
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyPressWithShift($expr$)

.mouseMove : cn.hutool.core.swing.RobotUtil.mouseMove
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.mouseMove($expr$, $arg$)

.keyPressWithCtrl : cn.hutool.core.swing.RobotUtil.keyPressWithCtrl
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyPressWithCtrl($expr$)

.getDelay : cn.hutool.core.swing.RobotUtil.getDelay
	java.lang.Object [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.getDelay()

.rightClick : cn.hutool.core.swing.RobotUtil.rightClick
	java.lang.Object [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.rightClick()

.click : cn.hutool.core.swing.RobotUtil.click
	java.lang.Object [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.click()

.keyClick : cn.hutool.core.swing.RobotUtil.keyClick
	scala.Array [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyClick($expr$)


## ScreenUtil

.getWidth : cn.hutool.core.swing.ScreenUtil.getWidth
	java.lang.Object [cn.hutool.core.swing.ScreenUtil]  →  ScreenUtil.getWidth()

.getHeight : cn.hutool.core.swing.ScreenUtil.getHeight
	java.lang.Object [cn.hutool.core.swing.ScreenUtil]  →  ScreenUtil.getHeight()

.getRectangle : cn.hutool.core.swing.ScreenUtil.getRectangle
	java.lang.Object [cn.hutool.core.swing.ScreenUtil]  →  ScreenUtil.getRectangle()

.captureScreen : cn.hutool.core.swing.ScreenUtil.captureScreen
	java.io.File [cn.hutool.core.swing.ScreenUtil]  →  ScreenUtil.captureScreen($expr$)
	java.awt.Rectangle [cn.hutool.core.swing.ScreenUtil]  →  ScreenUtil.captureScreen($expr$, $arg$)
	java.lang.Object [cn.hutool.core.swing.ScreenUtil]  →  ScreenUtil.captureScreen()


## ClipboardUtil

.getStr : cn.hutool.core.swing.clipboard.ClipboardUtil.getStr
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.getStr($expr$)
	java.lang.Object [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.getStr()

.set : cn.hutool.core.swing.clipboard.ClipboardUtil.set
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.set($expr$, $arg$)

.getImage : cn.hutool.core.swing.clipboard.ClipboardUtil.getImage
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.getImage($expr$)
	java.lang.Object [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.getImage()

.setStr : cn.hutool.core.swing.clipboard.ClipboardUtil.setStr
	java.lang.String [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.setStr($expr$)

.listen : cn.hutool.core.swing.clipboard.ClipboardUtil.listen
	INT [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.listen($expr$, $arg$)
	cn.hutool.core.swing.clipboard.ClipboardListener [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.listen($expr$, $arg$)

.get : cn.hutool.core.swing.clipboard.ClipboardUtil.get
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.get($expr$, $arg$)
	java.awt.datatransfer.DataFlavor [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.get($expr$)

.setImage : cn.hutool.core.swing.clipboard.ClipboardUtil.setImage
	java.awt.Image [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.setImage($expr$)

.getClipboard : cn.hutool.core.swing.clipboard.ClipboardUtil.getClipboard
	java.lang.Object [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.getClipboard()


## ASCIIStrCache

.toString : cn.hutool.core.text.ASCIIStrCache.toString
	CHAR [cn.hutool.core.text.ASCIIStrCache]  →  ASCIIStrCache.toString($expr$)


## CharSequenceUtil

.subSufByLength : cn.hutool.core.text.CharSequenceUtil.subSufByLength
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subSufByLength($expr$, $arg$)

.unWrap : cn.hutool.core.text.CharSequenceUtil.unWrap
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.unWrap($expr$, $arg$)

.removeSuffixIgnoreCase : cn.hutool.core.text.CharSequenceUtil.removeSuffixIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeSuffixIgnoreCase($expr$, $arg$)

.equalsIgnoreCase : cn.hutool.core.text.CharSequenceUtil.equalsIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equalsIgnoreCase($expr$, $arg$)

.format : cn.hutool.core.text.CharSequenceUtil.format
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.format($expr$, $arg$)

.isNullOrUndefined : cn.hutool.core.text.CharSequenceUtil.isNullOrUndefined
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isNullOrUndefined($expr$)

.isAllBlank : cn.hutool.core.text.CharSequenceUtil.isAllBlank
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllBlank($expr$)

.indexedFormat : cn.hutool.core.text.CharSequenceUtil.indexedFormat
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.indexedFormat($expr$, $arg$)

.emptyToDefault : cn.hutool.core.text.CharSequenceUtil.emptyToDefault
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.emptyToDefault($expr$, $arg$)

.hasEmpty : cn.hutool.core.text.CharSequenceUtil.hasEmpty
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.hasEmpty($expr$)

.count : cn.hutool.core.text.CharSequenceUtil.count
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.count($expr$, $arg$)

.move : cn.hutool.core.text.CharSequenceUtil.move
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.move($expr$, $arg$)

.replaceIgnoreCase : cn.hutool.core.text.CharSequenceUtil.replaceIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.replaceIgnoreCase($expr$, $arg$)

.isNumeric : cn.hutool.core.text.CharSequenceUtil.isNumeric
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isNumeric($expr$)

.isEmptyOrUndefined : cn.hutool.core.text.CharSequenceUtil.isEmptyOrUndefined
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isEmptyOrUndefined($expr$)

.removePreAndLowerFirst : cn.hutool.core.text.CharSequenceUtil.removePreAndLowerFirst
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removePreAndLowerFirst($expr$, $arg$)

.removeSuffix : cn.hutool.core.text.CharSequenceUtil.removeSuffix
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeSuffix($expr$, $arg$)

.replace : cn.hutool.core.text.CharSequenceUtil.replace
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.replace($expr$, $arg$)

.removePrefix : cn.hutool.core.text.CharSequenceUtil.removePrefix
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removePrefix($expr$, $arg$)

.repeatAndJoin : cn.hutool.core.text.CharSequenceUtil.repeatAndJoin
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.repeatAndJoin($expr$, $arg$)

.startWith : cn.hutool.core.text.CharSequenceUtil.startWith
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.startWith($expr$, $arg$)

.isAllCharMatch : cn.hutool.core.text.CharSequenceUtil.isAllCharMatch
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllCharMatch($expr$, $arg$)

.prependIfMissing : cn.hutool.core.text.CharSequenceUtil.prependIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.prependIfMissing($expr$, $arg$)

.join : cn.hutool.core.text.CharSequenceUtil.join
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.join($expr$, $arg$)

.isSurround : cn.hutool.core.text.CharSequenceUtil.isSurround
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isSurround($expr$, $arg$)

.subSuf : cn.hutool.core.text.CharSequenceUtil.subSuf
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subSuf($expr$, $arg$)

.equals : cn.hutool.core.text.CharSequenceUtil.equals
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equals($expr$, $arg$)

.equalsCharAt : cn.hutool.core.text.CharSequenceUtil.equalsCharAt
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equalsCharAt($expr$, $arg$)

.appendIfMissing : cn.hutool.core.text.CharSequenceUtil.appendIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.appendIfMissing($expr$, $arg$)

.nullToDefault : cn.hutool.core.text.CharSequenceUtil.nullToDefault
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.nullToDefault($expr$, $arg$)

.center : cn.hutool.core.text.CharSequenceUtil.center
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.center($expr$, $arg$)

.normalize : cn.hutool.core.text.CharSequenceUtil.normalize
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.normalize($expr$)

.lastIndexOf : cn.hutool.core.text.CharSequenceUtil.lastIndexOf
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.lastIndexOf($expr$, $arg$)

.isNotBlank : cn.hutool.core.text.CharSequenceUtil.isNotBlank
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isNotBlank($expr$)

.splitToArray : cn.hutool.core.text.CharSequenceUtil.splitToArray
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.splitToArray($expr$, $arg$)

.addSuffixIfNot : cn.hutool.core.text.CharSequenceUtil.addSuffixIfNot
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.addSuffixIfNot($expr$, $arg$)

.compareIgnoreCase : cn.hutool.core.text.CharSequenceUtil.compareIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.compareIgnoreCase($expr$, $arg$)

.cut : cn.hutool.core.text.CharSequenceUtil.cut
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.cut($expr$, $arg$)

.padPre : cn.hutool.core.text.CharSequenceUtil.padPre
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.padPre($expr$, $arg$)

.indexOfIgnoreCase : cn.hutool.core.text.CharSequenceUtil.indexOfIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.indexOfIgnoreCase($expr$, $arg$)

.containsIgnoreCase : cn.hutool.core.text.CharSequenceUtil.containsIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsIgnoreCase($expr$, $arg$)

.isAllNotEmpty : cn.hutool.core.text.CharSequenceUtil.isAllNotEmpty
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllNotEmpty($expr$)

.concat : cn.hutool.core.text.CharSequenceUtil.concat
	BOOLEAN [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.concat($expr$, $arg$)

.isNotEmpty : cn.hutool.core.text.CharSequenceUtil.isNotEmpty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isNotEmpty($expr$)

.lastIndexOfIgnoreCase : cn.hutool.core.text.CharSequenceUtil.lastIndexOfIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.lastIndexOfIgnoreCase($expr$, $arg$)

.trimEnd : cn.hutool.core.text.CharSequenceUtil.trimEnd
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trimEnd($expr$)

.totalLength : cn.hutool.core.text.CharSequenceUtil.totalLength
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.totalLength($expr$)

.removeSufAndLowerFirst : cn.hutool.core.text.CharSequenceUtil.removeSufAndLowerFirst
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeSufAndLowerFirst($expr$, $arg$)

.builder : cn.hutool.core.text.CharSequenceUtil.builder
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.builder($expr$)

.equalsAnyIgnoreCase : cn.hutool.core.text.CharSequenceUtil.equalsAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equalsAnyIgnoreCase($expr$, $arg$)

.subWithLength : cn.hutool.core.text.CharSequenceUtil.subWithLength
	java.lang.String [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subWithLength($expr$, $arg$)

.subAfter : cn.hutool.core.text.CharSequenceUtil.subAfter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subAfter($expr$, $arg$)

.blankToDefault : cn.hutool.core.text.CharSequenceUtil.blankToDefault
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.blankToDefault($expr$, $arg$)

.strip : cn.hutool.core.text.CharSequenceUtil.strip
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.strip($expr$, $arg$)

.toCamelCase : cn.hutool.core.text.CharSequenceUtil.toCamelCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.toCamelCase($expr$, $arg$)

.wrapAllWithPairIfMissing : cn.hutool.core.text.CharSequenceUtil.wrapAllWithPairIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapAllWithPairIfMissing($expr$, $arg$)

.startWithIgnoreCase : cn.hutool.core.text.CharSequenceUtil.startWithIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.startWithIgnoreCase($expr$, $arg$)

.endWithAnyIgnoreCase : cn.hutool.core.text.CharSequenceUtil.endWithAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.endWithAnyIgnoreCase($expr$, $arg$)

.addPrefixIfNot : cn.hutool.core.text.CharSequenceUtil.addPrefixIfNot
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.addPrefixIfNot($expr$, $arg$)

.isBlank : cn.hutool.core.text.CharSequenceUtil.isBlank
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isBlank($expr$)

.containsAnyIgnoreCase : cn.hutool.core.text.CharSequenceUtil.containsAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsAnyIgnoreCase($expr$, $arg$)

.compareVersion : cn.hutool.core.text.CharSequenceUtil.compareVersion
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.compareVersion($expr$, $arg$)

.removeAllLineBreaks : cn.hutool.core.text.CharSequenceUtil.removeAllLineBreaks
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeAllLineBreaks($expr$)

.wrapIfMissing : cn.hutool.core.text.CharSequenceUtil.wrapIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapIfMissing($expr$, $arg$)

.filter : cn.hutool.core.text.CharSequenceUtil.filter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.filter($expr$, $arg$)

.getContainsStrIgnoreCase : cn.hutool.core.text.CharSequenceUtil.getContainsStrIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.getContainsStrIgnoreCase($expr$, $arg$)

.endWithIgnoreCase : cn.hutool.core.text.CharSequenceUtil.endWithIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.endWithIgnoreCase($expr$, $arg$)

.str : cn.hutool.core.text.CharSequenceUtil.str
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.str($expr$)

.ordinalIndexOf : cn.hutool.core.text.CharSequenceUtil.ordinalIndexOf
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.ordinalIndexOf($expr$, $arg$)

.bytes : cn.hutool.core.text.CharSequenceUtil.bytes
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.bytes($expr$, $arg$)

.utf8Bytes : cn.hutool.core.text.CharSequenceUtil.utf8Bytes
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.utf8Bytes($expr$)

.subBefore : cn.hutool.core.text.CharSequenceUtil.subBefore
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subBefore($expr$, $arg$)

.hasBlank : cn.hutool.core.text.CharSequenceUtil.hasBlank
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.hasBlank($expr$)

.wrap : cn.hutool.core.text.CharSequenceUtil.wrap
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrap($expr$, $arg$)

.isLowerCase : cn.hutool.core.text.CharSequenceUtil.isLowerCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isLowerCase($expr$)

.splitToLong : cn.hutool.core.text.CharSequenceUtil.splitToLong
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.splitToLong($expr$, $arg$)

.splitTrim : cn.hutool.core.text.CharSequenceUtil.splitTrim
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.splitTrim($expr$, $arg$)

.desensitized : cn.hutool.core.text.CharSequenceUtil.desensitized
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.desensitized($expr$, $arg$)

.subBetween : cn.hutool.core.text.CharSequenceUtil.subBetween
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subBetween($expr$, $arg$)

.upperFirst : cn.hutool.core.text.CharSequenceUtil.upperFirst
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.upperFirst($expr$)

.subByCodePoint : cn.hutool.core.text.CharSequenceUtil.subByCodePoint
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subByCodePoint($expr$, $arg$)

.isCharEquals : cn.hutool.core.text.CharSequenceUtil.isCharEquals
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isCharEquals($expr$)

.isBlankOrUndefined : cn.hutool.core.text.CharSequenceUtil.isBlankOrUndefined
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isBlankOrUndefined($expr$)

.trimStart : cn.hutool.core.text.CharSequenceUtil.trimStart
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trimStart($expr$)

.hide : cn.hutool.core.text.CharSequenceUtil.hide
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.hide($expr$, $arg$)

.emptyIfNull : cn.hutool.core.text.CharSequenceUtil.emptyIfNull
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.emptyIfNull($expr$)

.cleanBlank : cn.hutool.core.text.CharSequenceUtil.cleanBlank
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.cleanBlank($expr$)

.split : cn.hutool.core.text.CharSequenceUtil.split
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.split($expr$, $arg$)

.byteLength : cn.hutool.core.text.CharSequenceUtil.byteLength
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.byteLength($expr$, $arg$)

.byteBuffer : cn.hutool.core.text.CharSequenceUtil.byteBuffer
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.byteBuffer($expr$, $arg$)

.subPre : cn.hutool.core.text.CharSequenceUtil.subPre
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subPre($expr$, $arg$)

.isUpperCase : cn.hutool.core.text.CharSequenceUtil.isUpperCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isUpperCase($expr$)

.genSetter : cn.hutool.core.text.CharSequenceUtil.genSetter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.genSetter($expr$)

.wrapAllIfMissing : cn.hutool.core.text.CharSequenceUtil.wrapAllIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapAllIfMissing($expr$, $arg$)

.equalsAny : cn.hutool.core.text.CharSequenceUtil.equalsAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equalsAny($expr$, $arg$)

.containsOnly : cn.hutool.core.text.CharSequenceUtil.containsOnly
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsOnly($expr$, $arg$)

.brief : cn.hutool.core.text.CharSequenceUtil.brief
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.brief($expr$, $arg$)

.lowerFirst : cn.hutool.core.text.CharSequenceUtil.lowerFirst
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.lowerFirst($expr$)

.repeatByLength : cn.hutool.core.text.CharSequenceUtil.repeatByLength
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.repeatByLength($expr$, $arg$)

.sub : cn.hutool.core.text.CharSequenceUtil.sub
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.sub($expr$, $arg$)

.length : cn.hutool.core.text.CharSequenceUtil.length
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.length($expr$)

.getContainsStr : cn.hutool.core.text.CharSequenceUtil.getContainsStr
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.getContainsStr($expr$, $arg$)

.containsBlank : cn.hutool.core.text.CharSequenceUtil.containsBlank
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsBlank($expr$)

.startWithAny : cn.hutool.core.text.CharSequenceUtil.startWithAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.startWithAny($expr$, $arg$)

.wrapAllWithPair : cn.hutool.core.text.CharSequenceUtil.wrapAllWithPair
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapAllWithPair($expr$, $arg$)

.strBuilder : cn.hutool.core.text.CharSequenceUtil.strBuilder
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.strBuilder($expr$)

.isWrap : cn.hutool.core.text.CharSequenceUtil.isWrap
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isWrap($expr$, $arg$)

.splitToInt : cn.hutool.core.text.CharSequenceUtil.splitToInt
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.splitToInt($expr$, $arg$)

.repeat : cn.hutool.core.text.CharSequenceUtil.repeat
	CHAR [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.repeat($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.repeat($expr$, $arg$)

.prependIfMissingIgnoreCase : cn.hutool.core.text.CharSequenceUtil.prependIfMissingIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.prependIfMissingIgnoreCase($expr$, $arg$)

.nullToEmpty : cn.hutool.core.text.CharSequenceUtil.nullToEmpty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.nullToEmpty($expr$)

.isSubEquals : cn.hutool.core.text.CharSequenceUtil.isSubEquals
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isSubEquals($expr$, $arg$)

.trim : cn.hutool.core.text.CharSequenceUtil.trim
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trim($expr$, $arg$)

.removeAll : cn.hutool.core.text.CharSequenceUtil.removeAll
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeAll($expr$, $arg$)

.removePrefixIgnoreCase : cn.hutool.core.text.CharSequenceUtil.removePrefixIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removePrefixIgnoreCase($expr$, $arg$)

.endWith : cn.hutool.core.text.CharSequenceUtil.endWith
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.endWith($expr$, $arg$)

.endWithAny : cn.hutool.core.text.CharSequenceUtil.endWithAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.endWithAny($expr$, $arg$)

.contains : cn.hutool.core.text.CharSequenceUtil.contains
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.contains($expr$, $arg$)

.isEmpty : cn.hutool.core.text.CharSequenceUtil.isEmpty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isEmpty($expr$)

.appendIfMissingIgnoreCase : cn.hutool.core.text.CharSequenceUtil.appendIfMissingIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.appendIfMissingIgnoreCase($expr$, $arg$)

.isAllNotBlank : cn.hutool.core.text.CharSequenceUtil.isAllNotBlank
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllNotBlank($expr$)

.replaceChars : cn.hutool.core.text.CharSequenceUtil.replaceChars
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.replaceChars($expr$, $arg$)

.toUnderlineCase : cn.hutool.core.text.CharSequenceUtil.toUnderlineCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.toUnderlineCase($expr$)

.removeAny : cn.hutool.core.text.CharSequenceUtil.removeAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeAny($expr$, $arg$)

.indexOf : cn.hutool.core.text.CharSequenceUtil.indexOf
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.indexOf($expr$, $arg$)

.upperFirstAndAddPre : cn.hutool.core.text.CharSequenceUtil.upperFirstAndAddPre
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.upperFirstAndAddPre($expr$, $arg$)

.isAllEmpty : cn.hutool.core.text.CharSequenceUtil.isAllEmpty
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllEmpty($expr$)

.maxLength : cn.hutool.core.text.CharSequenceUtil.maxLength
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.maxLength($expr$, $arg$)

.emptyToNull : cn.hutool.core.text.CharSequenceUtil.emptyToNull
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.emptyToNull($expr$)

.swapCase : cn.hutool.core.text.CharSequenceUtil.swapCase
	java.lang.String [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.swapCase($expr$)

.trimToEmpty : cn.hutool.core.text.CharSequenceUtil.trimToEmpty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trimToEmpty($expr$)

.subPreGbk : cn.hutool.core.text.CharSequenceUtil.subPreGbk
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subPreGbk($expr$, $arg$)

.compare : cn.hutool.core.text.CharSequenceUtil.compare
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.compare($expr$, $arg$)

.getGeneralField : cn.hutool.core.text.CharSequenceUtil.getGeneralField
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.getGeneralField($expr$)

.genGetter : cn.hutool.core.text.CharSequenceUtil.genGetter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.genGetter($expr$)

.padAfter : cn.hutool.core.text.CharSequenceUtil.padAfter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.padAfter($expr$, $arg$)

.containsAny : cn.hutool.core.text.CharSequenceUtil.containsAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsAny($expr$, $arg$)

.trimToNull : cn.hutool.core.text.CharSequenceUtil.trimToNull
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trimToNull($expr$)

.startWithIgnoreEquals : cn.hutool.core.text.CharSequenceUtil.startWithIgnoreEquals
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.startWithIgnoreEquals($expr$, $arg$)

.subBetweenAll : cn.hutool.core.text.CharSequenceUtil.subBetweenAll
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subBetweenAll($expr$, $arg$)

.wrapAll : cn.hutool.core.text.CharSequenceUtil.wrapAll
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapAll($expr$, $arg$)

.toSymbolCase : cn.hutool.core.text.CharSequenceUtil.toSymbolCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.toSymbolCase($expr$, $arg$)

.stripIgnoreCase : cn.hutool.core.text.CharSequenceUtil.stripIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.stripIgnoreCase($expr$, $arg$)


## NamingCase

.toPascalCase : cn.hutool.core.text.NamingCase.toPascalCase
	java.lang.CharSequence [cn.hutool.core.text.NamingCase]  →  NamingCase.toPascalCase($expr$)

.toKebabCase : cn.hutool.core.text.NamingCase.toKebabCase
	java.lang.CharSequence [cn.hutool.core.text.NamingCase]  →  NamingCase.toKebabCase($expr$)

.toCamelCase : cn.hutool.core.text.NamingCase.toCamelCase
	java.lang.CharSequence [cn.hutool.core.text.NamingCase]  →  NamingCase.toCamelCase($expr$, $arg$)

.toUnderlineCase : cn.hutool.core.text.NamingCase.toUnderlineCase
	java.lang.CharSequence [cn.hutool.core.text.NamingCase]  →  NamingCase.toUnderlineCase($expr$)

.toSymbolCase : cn.hutool.core.text.NamingCase.toSymbolCase
	java.lang.CharSequence [cn.hutool.core.text.NamingCase]  →  NamingCase.toSymbolCase($expr$, $arg$)


## PasswdStrength

.getLevel : cn.hutool.core.text.PasswdStrength.getLevel
	java.lang.String [cn.hutool.core.text.PasswdStrength]  →  PasswdStrength.getLevel($expr$)

.check : cn.hutool.core.text.PasswdStrength.check
	java.lang.String [cn.hutool.core.text.PasswdStrength]  →  PasswdStrength.check($expr$)


## StrBuilder

.create : cn.hutool.core.text.StrBuilder.create
	scala.Array [cn.hutool.core.text.StrBuilder]  →  StrBuilder.create($expr$)
	INT [cn.hutool.core.text.StrBuilder]  →  StrBuilder.create($expr$)
	java.lang.Object [cn.hutool.core.text.StrBuilder]  →  StrBuilder.create()


## StrFormatter

.formatWith : cn.hutool.core.text.StrFormatter.formatWith
	java.lang.String [cn.hutool.core.text.StrFormatter]  →  StrFormatter.formatWith($expr$, $arg$)

.format : cn.hutool.core.text.StrFormatter.format
	java.lang.String [cn.hutool.core.text.StrFormatter]  →  StrFormatter.format($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.text.StrFormatter]  →  StrFormatter.format($expr$, $arg$)


## StrJoiner

.of : cn.hutool.core.text.StrJoiner.of
	cn.hutool.core.text.StrJoiner [cn.hutool.core.text.StrJoiner]  →  StrJoiner.of($expr$)
	java.lang.CharSequence [cn.hutool.core.text.StrJoiner]  →  StrJoiner.of($expr$, $arg$)


## StrSplitter

.splitPath : cn.hutool.core.text.StrSplitter.splitPath
	java.lang.CharSequence [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitPath($expr$, $arg$)

.splitToArray : cn.hutool.core.text.StrSplitter.splitToArray
	java.lang.String [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitToArray($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitToArray($expr$, $arg$)

.splitTrimIgnoreCase : cn.hutool.core.text.StrSplitter.splitTrimIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitTrimIgnoreCase($expr$, $arg$)

.splitByLength : cn.hutool.core.text.StrSplitter.splitByLength
	java.lang.CharSequence [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitByLength($expr$, $arg$)

.splitPathToArray : cn.hutool.core.text.StrSplitter.splitPathToArray
	java.lang.CharSequence [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitPathToArray($expr$, $arg$)

.splitByRegex : cn.hutool.core.text.StrSplitter.splitByRegex
	java.lang.String [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitByRegex($expr$, $arg$)

.splitIgnoreCase : cn.hutool.core.text.StrSplitter.splitIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitIgnoreCase($expr$, $arg$)

.splitTrim : cn.hutool.core.text.StrSplitter.splitTrim
	java.lang.CharSequence [cn.hutool.core.text.StrSplitter]  →  StrSplitter.splitTrim($expr$, $arg$)

.split : cn.hutool.core.text.StrSplitter.split
	java.lang.String [cn.hutool.core.text.StrSplitter]  →  StrSplitter.split($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.text.StrSplitter]  →  StrSplitter.split($expr$, $arg$)


## TextSimilarity

.similar : cn.hutool.core.text.TextSimilarity.similar
	java.lang.String [cn.hutool.core.text.TextSimilarity]  →  TextSimilarity.similar($expr$, $arg$)

.longestCommonSubstring : cn.hutool.core.text.TextSimilarity.longestCommonSubstring
	java.lang.String [cn.hutool.core.text.TextSimilarity]  →  TextSimilarity.longestCommonSubstring($expr$, $arg$)


## UnicodeUtil

.toUnicode : cn.hutool.core.text.UnicodeUtil.toUnicode
	java.lang.String [cn.hutool.core.text.UnicodeUtil]  →  UnicodeUtil.toUnicode($expr$, $arg$)
	CHAR [cn.hutool.core.text.UnicodeUtil]  →  UnicodeUtil.toUnicode($expr$)
	INT [cn.hutool.core.text.UnicodeUtil]  →  UnicodeUtil.toUnicode($expr$)

.toString : cn.hutool.core.text.UnicodeUtil.toString
	java.lang.String [cn.hutool.core.text.UnicodeUtil]  →  UnicodeUtil.toString($expr$)


## CsvReadConfig

.defaultConfig : cn.hutool.core.text.csv.CsvReadConfig.defaultConfig
	java.lang.Object [cn.hutool.core.text.csv.CsvReadConfig]  →  CsvReadConfig.defaultConfig()


## CsvUtil

.getWriter : cn.hutool.core.text.csv.CsvUtil.getWriter
	java.lang.String [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getWriter($expr$, $arg$)
	java.io.File [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getWriter($expr$, $arg$)
	java.io.Writer [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getWriter($expr$, $arg$)

.getReader : cn.hutool.core.text.csv.CsvUtil.getReader
	cn.hutool.core.text.csv.CsvReadConfig [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getReader($expr$)
	java.io.Reader [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getReader($expr$, $arg$)
	java.lang.Object [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getReader()


## CsvWriteConfig

.defaultConfig : cn.hutool.core.text.csv.CsvWriteConfig.defaultConfig
	java.lang.Object [cn.hutool.core.text.csv.CsvWriteConfig]  →  CsvWriteConfig.defaultConfig()


## AsyncUtil

.get : cn.hutool.core.thread.AsyncUtil.get
	java.util.concurrent.CompletableFuture [cn.hutool.core.thread.AsyncUtil]  →  AsyncUtil.get($expr$)

.waitAny : cn.hutool.core.thread.AsyncUtil.waitAny
	scala.Array [cn.hutool.core.thread.AsyncUtil]  →  AsyncUtil.waitAny($expr$)

.waitAll : cn.hutool.core.thread.AsyncUtil.waitAll
	scala.Array [cn.hutool.core.thread.AsyncUtil]  →  AsyncUtil.waitAll($expr$)


## ExecutorBuilder

.create : cn.hutool.core.thread.ExecutorBuilder.create
	java.lang.Object [cn.hutool.core.thread.ExecutorBuilder]  →  ExecutorBuilder.create()


## GlobalThreadPool

.execute : cn.hutool.core.thread.GlobalThreadPool.execute
	java.lang.Runnable [cn.hutool.core.thread.GlobalThreadPool]  →  GlobalThreadPool.execute($expr$)

.submit : cn.hutool.core.thread.GlobalThreadPool.submit
	java.util.concurrent.Callable [cn.hutool.core.thread.GlobalThreadPool]  →  GlobalThreadPool.submit($expr$)
	java.lang.Runnable [cn.hutool.core.thread.GlobalThreadPool]  →  GlobalThreadPool.submit($expr$)

.shutdown : cn.hutool.core.thread.GlobalThreadPool.shutdown
	BOOLEAN [cn.hutool.core.thread.GlobalThreadPool]  →  GlobalThreadPool.shutdown($expr$)

.getExecutor : cn.hutool.core.thread.GlobalThreadPool.getExecutor
	java.lang.Object [cn.hutool.core.thread.GlobalThreadPool]  →  GlobalThreadPool.getExecutor()

.init : cn.hutool.core.thread.GlobalThreadPool.init
	java.lang.Object [cn.hutool.core.thread.GlobalThreadPool]  →  GlobalThreadPool.init()


## ThreadFactoryBuilder

.create : cn.hutool.core.thread.ThreadFactoryBuilder.create
	java.lang.Object [cn.hutool.core.thread.ThreadFactoryBuilder]  →  ThreadFactoryBuilder.create()


## ThreadUtil

.newExecutorByBlockingCoefficient : cn.hutool.core.thread.ThreadUtil.newExecutorByBlockingCoefficient
	FLOAT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newExecutorByBlockingCoefficient($expr$)

.newThread : cn.hutool.core.thread.ThreadUtil.newThread
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newThread($expr$, $arg$)

.newCompletionService : cn.hutool.core.thread.ThreadUtil.newCompletionService
	java.util.concurrent.ExecutorService [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newCompletionService($expr$)
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newCompletionService()

.execute : cn.hutool.core.thread.ThreadUtil.execute
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.execute($expr$)

.currentThreadGroup : cn.hutool.core.thread.ThreadUtil.currentThreadGroup
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.currentThreadGroup()

.execAsync : cn.hutool.core.thread.ThreadUtil.execAsync
	java.util.concurrent.Callable [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.execAsync($expr$)
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.execAsync($expr$, $arg$)

.createScheduledExecutor : cn.hutool.core.thread.ThreadUtil.createScheduledExecutor
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.createScheduledExecutor($expr$)

.waitForDie : cn.hutool.core.thread.ThreadUtil.waitForDie
	java.lang.Thread [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.waitForDie($expr$)
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.waitForDie()

.newCountDownLatch : cn.hutool.core.thread.ThreadUtil.newCountDownLatch
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newCountDownLatch($expr$)

.sleep : cn.hutool.core.thread.ThreadUtil.sleep
	java.lang.Number [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.sleep($expr$, $arg$)
	LONG [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.sleep($expr$)

.concurrencyTest : cn.hutool.core.thread.ThreadUtil.concurrencyTest
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.concurrencyTest($expr$, $arg$)

.getStackTrace : cn.hutool.core.thread.ThreadUtil.getStackTrace
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.getStackTrace()

.getStackTraceElement : cn.hutool.core.thread.ThreadUtil.getStackTraceElement
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.getStackTraceElement($expr$)

.newSingleExecutor : cn.hutool.core.thread.ThreadUtil.newSingleExecutor
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newSingleExecutor()

.newExecutor : cn.hutool.core.thread.ThreadUtil.newExecutor
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newExecutor($expr$, $arg$)
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newExecutor()

.schedule : cn.hutool.core.thread.ThreadUtil.schedule
	java.util.concurrent.ScheduledThreadPoolExecutor [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.schedule($expr$, $arg$)

.sync : cn.hutool.core.thread.ThreadUtil.sync
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.sync($expr$)

.getMainThread : cn.hutool.core.thread.ThreadUtil.getMainThread
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.getMainThread()

.safeSleep : cn.hutool.core.thread.ThreadUtil.safeSleep
	java.lang.Number [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.safeSleep($expr$)
	LONG [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.safeSleep($expr$)

.getThreads : cn.hutool.core.thread.ThreadUtil.getThreads
	java.lang.ThreadGroup [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.getThreads($expr$)
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.getThreads()

.createThreadFactoryBuilder : cn.hutool.core.thread.ThreadUtil.createThreadFactoryBuilder
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.createThreadFactoryBuilder()

.newNamedThreadFactory : cn.hutool.core.thread.ThreadUtil.newNamedThreadFactory
	java.lang.String [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newNamedThreadFactory($expr$, $arg$)

.interrupt : cn.hutool.core.thread.ThreadUtil.interrupt
	java.lang.Thread [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.interrupt($expr$, $arg$)

.createThreadLocal : cn.hutool.core.thread.ThreadUtil.createThreadLocal
	BOOLEAN [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.createThreadLocal($expr$)
	java.util.function.Supplier [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.createThreadLocal($expr$)


## LockUtil

.createReadWriteLock : cn.hutool.core.thread.lock.LockUtil.createReadWriteLock
	BOOLEAN [cn.hutool.core.thread.lock.LockUtil]  →  LockUtil.createReadWriteLock($expr$)

.createStampLock : cn.hutool.core.thread.lock.LockUtil.createStampLock
	java.lang.Object [cn.hutool.core.thread.lock.LockUtil]  →  LockUtil.createStampLock()

.getNoLock : cn.hutool.core.thread.lock.LockUtil.getNoLock
	java.lang.Object [cn.hutool.core.thread.lock.LockUtil]  →  LockUtil.getNoLock()


## NamedInheritableThreadLocal

.withInitial : cn.hutool.core.thread.threadlocal.NamedInheritableThreadLocal.withInitial
	java.util.function.Supplier [cn.hutool.core.thread.threadlocal.NamedInheritableThreadLocal]  →  NamedInheritableThreadLocal.withInitial($expr$)


## NamedThreadLocal

.withInitial : cn.hutool.core.thread.threadlocal.NamedThreadLocal.withInitial
	java.util.function.Supplier [cn.hutool.core.thread.threadlocal.NamedThreadLocal]  →  NamedThreadLocal.withInitial($expr$)


## ArrayUtil

.unWrap : cn.hutool.core.util.ArrayUtil.unWrap
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.unWrap($expr$)

.hasEmpty : cn.hutool.core.util.ArrayUtil.hasEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.hasEmpty($expr$)

.isArray : cn.hutool.core.util.ArrayUtil.isArray
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isArray($expr$)

.newArray : cn.hutool.core.util.ArrayUtil.newArray
	INT [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.newArray($expr$)
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.newArray($expr$, $arg$)

.zip : cn.hutool.core.util.ArrayUtil.zip
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.zip($expr$, $arg$)

.removeEle : cn.hutool.core.util.ArrayUtil.removeEle
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.removeEle($expr$, $arg$)

.isSorted : cn.hutool.core.util.ArrayUtil.isSorted
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isSorted($expr$, $arg$)

.join : cn.hutool.core.util.ArrayUtil.join
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.join($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.join($expr$, $arg$)

.matchIndex : cn.hutool.core.util.ArrayUtil.matchIndex
	cn.hutool.core.lang.Matcher [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.matchIndex($expr$, $arg$)

.insert : cn.hutool.core.util.ArrayUtil.insert
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.insert($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.insert($expr$, $arg$)

.map : cn.hutool.core.util.ArrayUtil.map
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.map($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.map($expr$, $arg$)

.equals : cn.hutool.core.util.ArrayUtil.equals
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.equals($expr$, $arg$)

.hasNull : cn.hutool.core.util.ArrayUtil.hasNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.hasNull($expr$)

.isSortedASC : cn.hutool.core.util.ArrayUtil.isSortedASC
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isSortedASC($expr$)

.lastIndexOf : cn.hutool.core.util.ArrayUtil.lastIndexOf
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.lastIndexOf($expr$, $arg$)

.defaultIfEmpty : cn.hutool.core.util.ArrayUtil.defaultIfEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.defaultIfEmpty($expr$, $arg$)

.addAll : cn.hutool.core.util.ArrayUtil.addAll
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.addAll($expr$)

.indexOfIgnoreCase : cn.hutool.core.util.ArrayUtil.indexOfIgnoreCase
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.indexOfIgnoreCase($expr$, $arg$)

.containsIgnoreCase : cn.hutool.core.util.ArrayUtil.containsIgnoreCase
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.containsIgnoreCase($expr$, $arg$)

.isAllNotEmpty : cn.hutool.core.util.ArrayUtil.isAllNotEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isAllNotEmpty($expr$)

.setOrAppend : cn.hutool.core.util.ArrayUtil.setOrAppend
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.setOrAppend($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.setOrAppend($expr$, $arg$)

.isNotEmpty : cn.hutool.core.util.ArrayUtil.isNotEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isNotEmpty($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isNotEmpty($expr$)

.min : cn.hutool.core.util.ArrayUtil.min
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.min($expr$)

.isSortedDESC : cn.hutool.core.util.ArrayUtil.isSortedDESC
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isSortedDESC($expr$)

.lastIndexOfSub : cn.hutool.core.util.ArrayUtil.lastIndexOfSub
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.lastIndexOfSub($expr$, $arg$)

.firstMatch : cn.hutool.core.util.ArrayUtil.firstMatch
	cn.hutool.core.lang.Matcher [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.firstMatch($expr$, $arg$)

.indexOfSub : cn.hutool.core.util.ArrayUtil.indexOfSub
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.indexOfSub($expr$, $arg$)

.firstNonNull : cn.hutool.core.util.ArrayUtil.firstNonNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.firstNonNull($expr$)

.reverse : cn.hutool.core.util.ArrayUtil.reverse
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.reverse($expr$, $arg$)

.filter : cn.hutool.core.util.ArrayUtil.filter
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.filter($expr$, $arg$)

.resize : cn.hutool.core.util.ArrayUtil.resize
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.resize($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.resize($expr$, $arg$)

.edit : cn.hutool.core.util.ArrayUtil.edit
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.edit($expr$, $arg$)

.removeBlank : cn.hutool.core.util.ArrayUtil.removeBlank
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.removeBlank($expr$)

.removeNull : cn.hutool.core.util.ArrayUtil.removeNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.removeNull($expr$)

.wrap : cn.hutool.core.util.ArrayUtil.wrap
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.wrap($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.wrap($expr$)

.cast : cn.hutool.core.util.ArrayUtil.cast
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.cast($expr$, $arg$)

.max : cn.hutool.core.util.ArrayUtil.max
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.max($expr$)

.remove : cn.hutool.core.util.ArrayUtil.remove
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.remove($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.remove($expr$, $arg$)

.containsAll : cn.hutool.core.util.ArrayUtil.containsAll
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.containsAll($expr$, $arg$)

.range : cn.hutool.core.util.ArrayUtil.range
	INT [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.range($expr$, $arg$)

.split : cn.hutool.core.util.ArrayUtil.split
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.split($expr$, $arg$)

.clone : cn.hutool.core.util.ArrayUtil.clone
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.clone($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.clone($expr$)

.distinct : cn.hutool.core.util.ArrayUtil.distinct
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.distinct($expr$)

.isAllNull : cn.hutool.core.util.ArrayUtil.isAllNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isAllNull($expr$)

.toArray : cn.hutool.core.util.ArrayUtil.toArray
	java.util.Collection [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toArray($expr$, $arg$)
	java.nio.ByteBuffer [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toArray($expr$)
	java.lang.Iterable [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toArray($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toArray($expr$, $arg$)

.isAllNotNull : cn.hutool.core.util.ArrayUtil.isAllNotNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isAllNotNull($expr$)

.getComponentType : cn.hutool.core.util.ArrayUtil.getComponentType
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.getComponentType($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.getComponentType($expr$)

.emptyCount : cn.hutool.core.util.ArrayUtil.emptyCount
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.emptyCount($expr$)

.shuffle : cn.hutool.core.util.ArrayUtil.shuffle
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.shuffle($expr$, $arg$)

.swap : cn.hutool.core.util.ArrayUtil.swap
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.swap($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.swap($expr$, $arg$)

.copy : cn.hutool.core.util.ArrayUtil.copy
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.copy($expr$, $arg$)

.toString : cn.hutool.core.util.ArrayUtil.toString
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toString($expr$)

.sub : cn.hutool.core.util.ArrayUtil.sub
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.sub($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.sub($expr$, $arg$)

.length : cn.hutool.core.util.ArrayUtil.length
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.length($expr$)

.get : cn.hutool.core.util.ArrayUtil.get
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.get($expr$, $arg$)

.nullToEmpty : cn.hutool.core.util.ArrayUtil.nullToEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.nullToEmpty($expr$)

.getArrayType : cn.hutool.core.util.ArrayUtil.getArrayType
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.getArrayType($expr$)

.getAny : cn.hutool.core.util.ArrayUtil.getAny
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.getAny($expr$, $arg$)

.contains : cn.hutool.core.util.ArrayUtil.contains
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.contains($expr$, $arg$)

.isEmpty : cn.hutool.core.util.ArrayUtil.isEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isEmpty($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isEmpty($expr$)

.isSub : cn.hutool.core.util.ArrayUtil.isSub
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isSub($expr$, $arg$)

.indexOf : cn.hutool.core.util.ArrayUtil.indexOf
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.indexOf($expr$, $arg$)

.isAllEmpty : cn.hutool.core.util.ArrayUtil.isAllEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isAllEmpty($expr$)

.containsAny : cn.hutool.core.util.ArrayUtil.containsAny
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.containsAny($expr$, $arg$)

.removeEmpty : cn.hutool.core.util.ArrayUtil.removeEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.removeEmpty($expr$)

.append : cn.hutool.core.util.ArrayUtil.append
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.append($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.append($expr$, $arg$)


## BooleanUtil

.toInteger : cn.hutool.core.util.BooleanUtil.toInteger
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toInteger($expr$)

.toStringTrueFalse : cn.hutool.core.util.BooleanUtil.toStringTrueFalse
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toStringTrueFalse($expr$)

.toByte : cn.hutool.core.util.BooleanUtil.toByte
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toByte($expr$)

.toShortObj : cn.hutool.core.util.BooleanUtil.toShortObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toShortObj($expr$)

.toByteObj : cn.hutool.core.util.BooleanUtil.toByteObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toByteObj($expr$)

.or : cn.hutool.core.util.BooleanUtil.or
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.or($expr$)

.toFloatObj : cn.hutool.core.util.BooleanUtil.toFloatObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toFloatObj($expr$)

.toStringOnOff : cn.hutool.core.util.BooleanUtil.toStringOnOff
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toStringOnOff($expr$)

.toLongObj : cn.hutool.core.util.BooleanUtil.toLongObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toLongObj($expr$)

.toFloat : cn.hutool.core.util.BooleanUtil.toFloat
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toFloat($expr$)

.toCharacter : cn.hutool.core.util.BooleanUtil.toCharacter
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toCharacter($expr$)

.toLong : cn.hutool.core.util.BooleanUtil.toLong
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toLong($expr$)

.toStringYesNo : cn.hutool.core.util.BooleanUtil.toStringYesNo
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toStringYesNo($expr$)

.toBoolean : cn.hutool.core.util.BooleanUtil.toBoolean
	java.lang.String [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toBoolean($expr$)

.orOfWrap : cn.hutool.core.util.BooleanUtil.orOfWrap
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.orOfWrap($expr$)

.isBoolean : cn.hutool.core.util.BooleanUtil.isBoolean
	java.lang.Class [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.isBoolean($expr$)

.toInt : cn.hutool.core.util.BooleanUtil.toInt
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toInt($expr$)

.negate : cn.hutool.core.util.BooleanUtil.negate
	java.lang.Boolean [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.negate($expr$)
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.negate($expr$)

.xor : cn.hutool.core.util.BooleanUtil.xor
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.xor($expr$)

.toChar : cn.hutool.core.util.BooleanUtil.toChar
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toChar($expr$)

.toDouble : cn.hutool.core.util.BooleanUtil.toDouble
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toDouble($expr$)

.isTrue : cn.hutool.core.util.BooleanUtil.isTrue
	java.lang.Boolean [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.isTrue($expr$)

.toString : cn.hutool.core.util.BooleanUtil.toString
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toString($expr$, $arg$)

.xorOfWrap : cn.hutool.core.util.BooleanUtil.xorOfWrap
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.xorOfWrap($expr$)

.toShort : cn.hutool.core.util.BooleanUtil.toShort
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toShort($expr$)

.andOfWrap : cn.hutool.core.util.BooleanUtil.andOfWrap
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.andOfWrap($expr$)

.toDoubleObj : cn.hutool.core.util.BooleanUtil.toDoubleObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toDoubleObj($expr$)

.and : cn.hutool.core.util.BooleanUtil.and
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.and($expr$)

.isFalse : cn.hutool.core.util.BooleanUtil.isFalse
	java.lang.Boolean [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.isFalse($expr$)


## ByteUtil

.shortToBytes : cn.hutool.core.util.ByteUtil.shortToBytes
	SHORT [cn.hutool.core.util.ByteUtil]  →  ByteUtil.shortToBytes($expr$, $arg$)

.bytesToShort : cn.hutool.core.util.ByteUtil.bytesToShort
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToShort($expr$, $arg$)

.bytesToLong : cn.hutool.core.util.ByteUtil.bytesToLong
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToLong($expr$, $arg$)

.bytesToDouble : cn.hutool.core.util.ByteUtil.bytesToDouble
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToDouble($expr$, $arg$)

.intToBytes : cn.hutool.core.util.ByteUtil.intToBytes
	INT [cn.hutool.core.util.ByteUtil]  →  ByteUtil.intToBytes($expr$, $arg$)

.longToBytes : cn.hutool.core.util.ByteUtil.longToBytes
	LONG [cn.hutool.core.util.ByteUtil]  →  ByteUtil.longToBytes($expr$, $arg$)

.doubleToBytes : cn.hutool.core.util.ByteUtil.doubleToBytes
	DOUBLE [cn.hutool.core.util.ByteUtil]  →  ByteUtil.doubleToBytes($expr$, $arg$)

.byteToUnsignedInt : cn.hutool.core.util.ByteUtil.byteToUnsignedInt
	BYTE [cn.hutool.core.util.ByteUtil]  →  ByteUtil.byteToUnsignedInt($expr$)

.bytesToNumber : cn.hutool.core.util.ByteUtil.bytesToNumber
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToNumber($expr$, $arg$)

.bytesToFloat : cn.hutool.core.util.ByteUtil.bytesToFloat
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToFloat($expr$, $arg$)

.numberToBytes : cn.hutool.core.util.ByteUtil.numberToBytes
	java.lang.Number [cn.hutool.core.util.ByteUtil]  →  ByteUtil.numberToBytes($expr$, $arg$)

.floatToBytes : cn.hutool.core.util.ByteUtil.floatToBytes
	FLOAT [cn.hutool.core.util.ByteUtil]  →  ByteUtil.floatToBytes($expr$, $arg$)

.intToByte : cn.hutool.core.util.ByteUtil.intToByte
	INT [cn.hutool.core.util.ByteUtil]  →  ByteUtil.intToByte($expr$)

.bytesToInt : cn.hutool.core.util.ByteUtil.bytesToInt
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToInt($expr$, $arg$)


## CharUtil

.isAsciiControl : cn.hutool.core.util.CharUtil.isAsciiControl
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isAsciiControl($expr$)

.isHexChar : cn.hutool.core.util.CharUtil.isHexChar
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isHexChar($expr$)

.equals : cn.hutool.core.util.CharUtil.equals
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.equals($expr$, $arg$)

.isLetterLower : cn.hutool.core.util.CharUtil.isLetterLower
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isLetterLower($expr$)

.isChar : cn.hutool.core.util.CharUtil.isChar
	java.lang.Object [cn.hutool.core.util.CharUtil]  →  CharUtil.isChar($expr$)

.isLetter : cn.hutool.core.util.CharUtil.isLetter
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isLetter($expr$)

.toCloseByNumber : cn.hutool.core.util.CharUtil.toCloseByNumber
	INT [cn.hutool.core.util.CharUtil]  →  CharUtil.toCloseByNumber($expr$)

.isCharClass : cn.hutool.core.util.CharUtil.isCharClass
	java.lang.Class [cn.hutool.core.util.CharUtil]  →  CharUtil.isCharClass($expr$)

.isBlankChar : cn.hutool.core.util.CharUtil.isBlankChar
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isBlankChar($expr$)
	INT [cn.hutool.core.util.CharUtil]  →  CharUtil.isBlankChar($expr$)

.isFileSeparator : cn.hutool.core.util.CharUtil.isFileSeparator
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isFileSeparator($expr$)

.digit16 : cn.hutool.core.util.CharUtil.digit16
	INT [cn.hutool.core.util.CharUtil]  →  CharUtil.digit16($expr$)

.isEmoji : cn.hutool.core.util.CharUtil.isEmoji
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isEmoji($expr$)

.isAsciiPrintable : cn.hutool.core.util.CharUtil.isAsciiPrintable
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isAsciiPrintable($expr$)

.isLetterOrNumber : cn.hutool.core.util.CharUtil.isLetterOrNumber
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isLetterOrNumber($expr$)

.toCloseChar : cn.hutool.core.util.CharUtil.toCloseChar
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.toCloseChar($expr$)

.isNumber : cn.hutool.core.util.CharUtil.isNumber
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isNumber($expr$)

.isLetterUpper : cn.hutool.core.util.CharUtil.isLetterUpper
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isLetterUpper($expr$)

.getType : cn.hutool.core.util.CharUtil.getType
	INT [cn.hutool.core.util.CharUtil]  →  CharUtil.getType($expr$)

.toString : cn.hutool.core.util.CharUtil.toString
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.toString($expr$)

.isAscii : cn.hutool.core.util.CharUtil.isAscii
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isAscii($expr$)


## CharsetUtil

.defaultCharset : cn.hutool.core.util.CharsetUtil.defaultCharset
	INT [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.defaultCharset($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.defaultCharset($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.defaultCharset()

.defaultCharsetName : cn.hutool.core.util.CharsetUtil.defaultCharsetName
	java.lang.Object [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.defaultCharsetName()

.systemCharset : cn.hutool.core.util.CharsetUtil.systemCharset
	java.lang.Object [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.systemCharset()

.systemCharsetName : cn.hutool.core.util.CharsetUtil.systemCharsetName
	java.lang.Object [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.systemCharsetName()

.parse : cn.hutool.core.util.CharsetUtil.parse
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.parse($expr$, $arg$)

.charset : cn.hutool.core.util.CharsetUtil.charset
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.charset($expr$)

.convert : cn.hutool.core.util.CharsetUtil.convert
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.convert($expr$, $arg$)
	java.io.File [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.convert($expr$, $arg$)


## ClassLoaderUtil

.getSystemClassLoader : cn.hutool.core.util.ClassLoaderUtil.getSystemClassLoader
	java.lang.Object [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.getSystemClassLoader()

.getContextClassLoader : cn.hutool.core.util.ClassLoaderUtil.getContextClassLoader
	java.lang.Object [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.getContextClassLoader()

.isPresent : cn.hutool.core.util.ClassLoaderUtil.isPresent
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.isPresent($expr$, $arg$)

.loadPrimitiveClass : cn.hutool.core.util.ClassLoaderUtil.loadPrimitiveClass
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.loadPrimitiveClass($expr$)

.getJarClassLoader : cn.hutool.core.util.ClassLoaderUtil.getJarClassLoader
	java.io.File [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.getJarClassLoader($expr$)

.getClassLoader : cn.hutool.core.util.ClassLoaderUtil.getClassLoader
	java.lang.Object [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.getClassLoader()

.loadClass : cn.hutool.core.util.ClassLoaderUtil.loadClass
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.loadClass($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.loadClass($expr$, $arg$)


## ClassUtil

.isPrimitiveWrapper : cn.hutool.core.util.ClassUtil.isPrimitiveWrapper
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isPrimitiveWrapper($expr$)

.getDeclaredField : cn.hutool.core.util.ClassUtil.getDeclaredField
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredField($expr$, $arg$)

.getDeclaredMethod : cn.hutool.core.util.ClassUtil.getDeclaredMethod
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredMethod($expr$, $arg$)

.getPublicMethod : cn.hutool.core.util.ClassUtil.getPublicMethod
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPublicMethod($expr$, $arg$)

.getDefaultValues : cn.hutool.core.util.ClassUtil.getDefaultValues
	scala.Array [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDefaultValues($expr$)

.isNotPublic : cn.hutool.core.util.ClassUtil.isNotPublic
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isNotPublic($expr$)
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isNotPublic($expr$)

.getClassPath : cn.hutool.core.util.ClassUtil.getClassPath
	BOOLEAN [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPath($expr$)
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPath()

.getEnclosingClass : cn.hutool.core.util.ClassUtil.getEnclosingClass
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getEnclosingClass($expr$)

.getDefaultValue : cn.hutool.core.util.ClassUtil.getDefaultValue
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDefaultValue($expr$)

.getJavaClassPaths : cn.hutool.core.util.ClassUtil.getJavaClassPaths
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getJavaClassPaths()

.scanPackageBySuper : cn.hutool.core.util.ClassUtil.scanPackageBySuper
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.scanPackageBySuper($expr$, $arg$)

.getContextClassLoader : cn.hutool.core.util.ClassUtil.getContextClassLoader
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getContextClassLoader()

.isBasicType : cn.hutool.core.util.ClassUtil.isBasicType
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isBasicType($expr$)

.equals : cn.hutool.core.util.ClassUtil.equals
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.equals($expr$, $arg$)

.isJdkClass : cn.hutool.core.util.ClassUtil.isJdkClass
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isJdkClass($expr$)

.scanPackageByAnnotation : cn.hutool.core.util.ClassUtil.scanPackageByAnnotation
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.scanPackageByAnnotation($expr$, $arg$)

.isTopLevelClass : cn.hutool.core.util.ClassUtil.isTopLevelClass
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isTopLevelClass($expr$)

.getDeclaredMethodNames : cn.hutool.core.util.ClassUtil.getDeclaredMethodNames
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredMethodNames($expr$)

.getTypeArgument : cn.hutool.core.util.ClassUtil.getTypeArgument
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getTypeArgument($expr$, $arg$)

.isSimpleValueType : cn.hutool.core.util.ClassUtil.isSimpleValueType
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isSimpleValueType($expr$)

.setAccessible : cn.hutool.core.util.ClassUtil.setAccessible
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  ClassUtil.setAccessible($expr$)

.getPackagePath : cn.hutool.core.util.ClassUtil.getPackagePath
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPackagePath($expr$)

.getShortClassName : cn.hutool.core.util.ClassUtil.getShortClassName
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getShortClassName($expr$)

.getResourceUrl : cn.hutool.core.util.ClassUtil.getResourceUrl
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getResourceUrl($expr$, $arg$)

.isEnum : cn.hutool.core.util.ClassUtil.isEnum
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isEnum($expr$)

.getClassLoader : cn.hutool.core.util.ClassUtil.getClassLoader
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassLoader()

.getPublicMethods : cn.hutool.core.util.ClassUtil.getPublicMethods
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPublicMethods($expr$, $arg$)

.getClasses : cn.hutool.core.util.ClassUtil.getClasses
	scala.Array [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClasses($expr$)

.getClassPathURL : cn.hutool.core.util.ClassUtil.getClassPathURL
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPathURL()

.isNormalClass : cn.hutool.core.util.ClassUtil.isNormalClass
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isNormalClass($expr$)

.isAssignable : cn.hutool.core.util.ClassUtil.isAssignable
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isAssignable($expr$, $arg$)

.loadClass : cn.hutool.core.util.ClassUtil.loadClass
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.loadClass($expr$, $arg$)

.getDeclaredMethods : cn.hutool.core.util.ClassUtil.getDeclaredMethods
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredMethods($expr$)

.isAllAssignableFrom : cn.hutool.core.util.ClassUtil.isAllAssignableFrom
	scala.Array [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isAllAssignableFrom($expr$, $arg$)

.getPackage : cn.hutool.core.util.ClassUtil.getPackage
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPackage($expr$)

.isPublic : cn.hutool.core.util.ClassUtil.isPublic
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isPublic($expr$)
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isPublic($expr$)

.getClassName : cn.hutool.core.util.ClassUtil.getClassName
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassName($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassName($expr$, $arg$)

.getClassPathResources : cn.hutool.core.util.ClassUtil.getClassPathResources
	BOOLEAN [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPathResources($expr$)
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPathResources()

.invoke : cn.hutool.core.util.ClassUtil.invoke
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.invoke($expr$, $arg$)

.getDeclaredFields : cn.hutool.core.util.ClassUtil.getDeclaredFields
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredFields($expr$)

.getLocation : cn.hutool.core.util.ClassUtil.getLocation
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getLocation($expr$)

.getClassPaths : cn.hutool.core.util.ClassUtil.getClassPaths
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPaths($expr$, $arg$)

.scanPackage : cn.hutool.core.util.ClassUtil.scanPackage
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.scanPackage($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.scanPackage()

.getClass : cn.hutool.core.util.ClassUtil.getClass
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClass($expr$)

.isAbstract : cn.hutool.core.util.ClassUtil.isAbstract
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isAbstract($expr$)

.getDeclaredMethodOfObj : cn.hutool.core.util.ClassUtil.getDeclaredMethodOfObj
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredMethodOfObj($expr$, $arg$)

.isSimpleTypeOrArray : cn.hutool.core.util.ClassUtil.isSimpleTypeOrArray
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isSimpleTypeOrArray($expr$)

.getPublicMethodNames : cn.hutool.core.util.ClassUtil.getPublicMethodNames
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPublicMethodNames($expr$)

.getResourceURL : cn.hutool.core.util.ClassUtil.getResourceURL
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getResourceURL($expr$)

.getResources : cn.hutool.core.util.ClassUtil.getResources
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getResources($expr$)

.isStatic : cn.hutool.core.util.ClassUtil.isStatic
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isStatic($expr$)

.getLocationPath : cn.hutool.core.util.ClassUtil.getLocationPath
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getLocationPath($expr$)


## CoordinateUtil

.gcj02ToWgs84 : cn.hutool.core.util.CoordinateUtil.gcj02ToWgs84
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  CoordinateUtil.gcj02ToWgs84($expr$, $arg$)

.outOfChina : cn.hutool.core.util.CoordinateUtil.outOfChina
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  CoordinateUtil.outOfChina($expr$, $arg$)

.wgs84ToGcj02 : cn.hutool.core.util.CoordinateUtil.wgs84ToGcj02
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  CoordinateUtil.wgs84ToGcj02($expr$, $arg$)

.gcj02ToBd09 : cn.hutool.core.util.CoordinateUtil.gcj02ToBd09
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  CoordinateUtil.gcj02ToBd09($expr$, $arg$)

.wgs84ToBd09 : cn.hutool.core.util.CoordinateUtil.wgs84ToBd09
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  CoordinateUtil.wgs84ToBd09($expr$, $arg$)

.bd09toWgs84 : cn.hutool.core.util.CoordinateUtil.bd09toWgs84
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  CoordinateUtil.bd09toWgs84($expr$, $arg$)

.bd09ToGcj02 : cn.hutool.core.util.CoordinateUtil.bd09ToGcj02
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  CoordinateUtil.bd09ToGcj02($expr$, $arg$)


## CreditCodeUtil

.isCreditCodeSimple : cn.hutool.core.util.CreditCodeUtil.isCreditCodeSimple
	java.lang.CharSequence [cn.hutool.core.util.CreditCodeUtil]  →  CreditCodeUtil.isCreditCodeSimple($expr$)

.isCreditCode : cn.hutool.core.util.CreditCodeUtil.isCreditCode
	java.lang.CharSequence [cn.hutool.core.util.CreditCodeUtil]  →  CreditCodeUtil.isCreditCode($expr$)

.randomCreditCode : cn.hutool.core.util.CreditCodeUtil.randomCreditCode
	java.lang.Object [cn.hutool.core.util.CreditCodeUtil]  →  CreditCodeUtil.randomCreditCode()


## DesensitizedUtil

.email : cn.hutool.core.util.DesensitizedUtil.email
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.email($expr$)

.idCardNum : cn.hutool.core.util.DesensitizedUtil.idCardNum
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.idCardNum($expr$, $arg$)

.mobilePhone : cn.hutool.core.util.DesensitizedUtil.mobilePhone
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.mobilePhone($expr$)

.desensitized : cn.hutool.core.util.DesensitizedUtil.desensitized
	java.lang.CharSequence [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.desensitized($expr$, $arg$)

.carLicense : cn.hutool.core.util.DesensitizedUtil.carLicense
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.carLicense($expr$)

.address : cn.hutool.core.util.DesensitizedUtil.address
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.address($expr$, $arg$)

.chineseName : cn.hutool.core.util.DesensitizedUtil.chineseName
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.chineseName($expr$)

.userId : cn.hutool.core.util.DesensitizedUtil.userId
	java.lang.Object [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.userId()

.bankCard : cn.hutool.core.util.DesensitizedUtil.bankCard
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.bankCard($expr$)

.fixedPhone : cn.hutool.core.util.DesensitizedUtil.fixedPhone
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.fixedPhone($expr$)

.password : cn.hutool.core.util.DesensitizedUtil.password
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.password($expr$)


## EnumUtil

.equalsIgnoreCase : cn.hutool.core.util.EnumUtil.equalsIgnoreCase
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  EnumUtil.equalsIgnoreCase($expr$, $arg$)

.fromString : cn.hutool.core.util.EnumUtil.fromString
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.fromString($expr$, $arg$)

.equals : cn.hutool.core.util.EnumUtil.equals
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  EnumUtil.equals($expr$, $arg$)

.getEnumAt : cn.hutool.core.util.EnumUtil.getEnumAt
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getEnumAt($expr$, $arg$)

.isEnum : cn.hutool.core.util.EnumUtil.isEnum
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.isEnum($expr$)
	java.lang.Object [cn.hutool.core.util.EnumUtil]  →  EnumUtil.isEnum($expr$)

.getEnumMap : cn.hutool.core.util.EnumUtil.getEnumMap
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getEnumMap($expr$)

.notContains : cn.hutool.core.util.EnumUtil.notContains
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.notContains($expr$, $arg$)

.toString : cn.hutool.core.util.EnumUtil.toString
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  EnumUtil.toString($expr$)

.fromStringQuietly : cn.hutool.core.util.EnumUtil.fromStringQuietly
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.fromStringQuietly($expr$, $arg$)

.getFieldValues : cn.hutool.core.util.EnumUtil.getFieldValues
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getFieldValues($expr$, $arg$)

.getNames : cn.hutool.core.util.EnumUtil.getNames
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getNames($expr$)

.contains : cn.hutool.core.util.EnumUtil.contains
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.contains($expr$, $arg$)

.getFieldNames : cn.hutool.core.util.EnumUtil.getFieldNames
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getFieldNames($expr$)

.likeValueOf : cn.hutool.core.util.EnumUtil.likeValueOf
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.likeValueOf($expr$, $arg$)

.getNameFieldMap : cn.hutool.core.util.EnumUtil.getNameFieldMap
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getNameFieldMap($expr$, $arg$)


## EscapeUtil

.unescapeXml : cn.hutool.core.util.EscapeUtil.unescapeXml
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.unescapeXml($expr$)

.escapeHtml4 : cn.hutool.core.util.EscapeUtil.escapeHtml4
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.escapeHtml4($expr$)

.escapeXml : cn.hutool.core.util.EscapeUtil.escapeXml
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.escapeXml($expr$)

.safeUnescape : cn.hutool.core.util.EscapeUtil.safeUnescape
	java.lang.String [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.safeUnescape($expr$)

.escape : cn.hutool.core.util.EscapeUtil.escape
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.escape($expr$, $arg$)

.escapeAll : cn.hutool.core.util.EscapeUtil.escapeAll
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.escapeAll($expr$)

.unescapeHtml4 : cn.hutool.core.util.EscapeUtil.unescapeHtml4
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.unescapeHtml4($expr$)

.unescape : cn.hutool.core.util.EscapeUtil.unescape
	java.lang.String [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.unescape($expr$)


## HashUtil

.jsHash : cn.hutool.core.util.HashUtil.jsHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.jsHash($expr$)

.murmur64 : cn.hutool.core.util.HashUtil.murmur64
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.murmur64($expr$)

.javaDefaultHash : cn.hutool.core.util.HashUtil.javaDefaultHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.javaDefaultHash($expr$)

.rsHash : cn.hutool.core.util.HashUtil.rsHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.rsHash($expr$)

.identityHashCode : cn.hutool.core.util.HashUtil.identityHashCode
	java.lang.Object [cn.hutool.core.util.HashUtil]  →  HashUtil.identityHashCode($expr$)

.sdbmHash : cn.hutool.core.util.HashUtil.sdbmHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.sdbmHash($expr$)

.cityHash64 : cn.hutool.core.util.HashUtil.cityHash64
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.cityHash64($expr$, $arg$)

.mixHash : cn.hutool.core.util.HashUtil.mixHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.mixHash($expr$)

.elfHash : cn.hutool.core.util.HashUtil.elfHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.elfHash($expr$)

.murmur32 : cn.hutool.core.util.HashUtil.murmur32
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.murmur32($expr$)

.pjwHash : cn.hutool.core.util.HashUtil.pjwHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.pjwHash($expr$)

.djbHash : cn.hutool.core.util.HashUtil.djbHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.djbHash($expr$)

.metroHash128 : cn.hutool.core.util.HashUtil.metroHash128
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.metroHash128($expr$, $arg$)

.dekHash : cn.hutool.core.util.HashUtil.dekHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.dekHash($expr$)

.cityHash32 : cn.hutool.core.util.HashUtil.cityHash32
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.cityHash32($expr$)

.bernstein : cn.hutool.core.util.HashUtil.bernstein
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.bernstein($expr$)

.metroHash64 : cn.hutool.core.util.HashUtil.metroHash64
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.metroHash64($expr$, $arg$)

.universal : cn.hutool.core.util.HashUtil.universal
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.universal($expr$, $arg$)

.fnvHash : cn.hutool.core.util.HashUtil.fnvHash
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.fnvHash($expr$)
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.fnvHash($expr$)

.murmur128 : cn.hutool.core.util.HashUtil.murmur128
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.murmur128($expr$)

.rotatingHash : cn.hutool.core.util.HashUtil.rotatingHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.rotatingHash($expr$, $arg$)

.oneByOneHash : cn.hutool.core.util.HashUtil.oneByOneHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.oneByOneHash($expr$)

.tianlHash : cn.hutool.core.util.HashUtil.tianlHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.tianlHash($expr$)

.intHash : cn.hutool.core.util.HashUtil.intHash
	INT [cn.hutool.core.util.HashUtil]  →  HashUtil.intHash($expr$)

.zobrist : cn.hutool.core.util.HashUtil.zobrist
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.zobrist($expr$, $arg$)

.cityHash128 : cn.hutool.core.util.HashUtil.cityHash128
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.cityHash128($expr$, $arg$)

.bkdrHash : cn.hutool.core.util.HashUtil.bkdrHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.bkdrHash($expr$)

.apHash : cn.hutool.core.util.HashUtil.apHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.apHash($expr$)

.additiveHash : cn.hutool.core.util.HashUtil.additiveHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.additiveHash($expr$, $arg$)


## HexUtil

.encodeColor : cn.hutool.core.util.HexUtil.encodeColor
	java.awt.Color [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeColor($expr$, $arg$)

.format : cn.hutool.core.util.HexUtil.format
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.format($expr$)

.hexToInt : cn.hutool.core.util.HexUtil.hexToInt
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.hexToInt($expr$)

.encodeHex : cn.hutool.core.util.HexUtil.encodeHex
	scala.Array [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeHex($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeHex($expr$, $arg$)

.decodeColor : cn.hutool.core.util.HexUtil.decodeColor
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeColor($expr$)

.hexToLong : cn.hutool.core.util.HexUtil.hexToLong
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.hexToLong($expr$)

.decodeHexStr : cn.hutool.core.util.HexUtil.decodeHexStr
	scala.Array [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHexStr($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHexStr($expr$, $arg$)

.toUnicodeHex : cn.hutool.core.util.HexUtil.toUnicodeHex
	CHAR [cn.hutool.core.util.HexUtil]  →  HexUtil.toUnicodeHex($expr$)
	INT [cn.hutool.core.util.HexUtil]  →  HexUtil.toUnicodeHex($expr$)

.isHexNumber : cn.hutool.core.util.HexUtil.isHexNumber
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.isHexNumber($expr$)

.decodeHex : cn.hutool.core.util.HexUtil.decodeHex
	scala.Array [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHex($expr$)
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHex($expr$)
	java.lang.CharSequence [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHex($expr$)

.toHex : cn.hutool.core.util.HexUtil.toHex
	LONG [cn.hutool.core.util.HexUtil]  →  HexUtil.toHex($expr$)
	INT [cn.hutool.core.util.HexUtil]  →  HexUtil.toHex($expr$)

.appendHex : cn.hutool.core.util.HexUtil.appendHex
	java.lang.StringBuilder [cn.hutool.core.util.HexUtil]  →  HexUtil.appendHex($expr$, $arg$)

.encodeHexStr : cn.hutool.core.util.HexUtil.encodeHexStr
	scala.Array [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeHexStr($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeHexStr($expr$, $arg$)

.toBigInteger : cn.hutool.core.util.HexUtil.toBigInteger
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.toBigInteger($expr$)


## IdUtil

.getSnowflake : cn.hutool.core.util.IdUtil.getSnowflake
	LONG [cn.hutool.core.util.IdUtil]  →  IdUtil.getSnowflake($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.getSnowflake()

.randomUUID : cn.hutool.core.util.IdUtil.randomUUID
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.randomUUID()

.nanoId : cn.hutool.core.util.IdUtil.nanoId
	INT [cn.hutool.core.util.IdUtil]  →  IdUtil.nanoId($expr$)
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.nanoId()

.fastSimpleUUID : cn.hutool.core.util.IdUtil.fastSimpleUUID
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.fastSimpleUUID()

.fastUUID : cn.hutool.core.util.IdUtil.fastUUID
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.fastUUID()

.getSnowflakeNextIdStr : cn.hutool.core.util.IdUtil.getSnowflakeNextIdStr
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.getSnowflakeNextIdStr()

.getSnowflakeNextId : cn.hutool.core.util.IdUtil.getSnowflakeNextId
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.getSnowflakeNextId()

.objectId : cn.hutool.core.util.IdUtil.objectId
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.objectId()

.simpleUUID : cn.hutool.core.util.IdUtil.simpleUUID
	java.lang.Object [cn.hutool.core.util.IdUtil]  →  IdUtil.simpleUUID()

.getWorkerId : cn.hutool.core.util.IdUtil.getWorkerId
	LONG [cn.hutool.core.util.IdUtil]  →  IdUtil.getWorkerId($expr$, $arg$)

.getDataCenterId : cn.hutool.core.util.IdUtil.getDataCenterId
	LONG [cn.hutool.core.util.IdUtil]  →  IdUtil.getDataCenterId($expr$)


## IdcardUtil

.getDayByIdCard : cn.hutool.core.util.IdcardUtil.getDayByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getDayByIdCard($expr$)

.isValidCard : cn.hutool.core.util.IdcardUtil.isValidCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidCard($expr$)

.convert15To18 : cn.hutool.core.util.IdcardUtil.convert15To18
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.convert15To18($expr$)

.getProvinceByIdCard : cn.hutool.core.util.IdcardUtil.getProvinceByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getProvinceByIdCard($expr$)

.getGenderByIdCard : cn.hutool.core.util.IdcardUtil.getGenderByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getGenderByIdCard($expr$)

.getYearByIdCard : cn.hutool.core.util.IdcardUtil.getYearByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getYearByIdCard($expr$)

.getBirthDate : cn.hutool.core.util.IdcardUtil.getBirthDate
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getBirthDate($expr$)

.getBirthByIdCard : cn.hutool.core.util.IdcardUtil.getBirthByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getBirthByIdCard($expr$)

.getAgeByIdCard : cn.hutool.core.util.IdcardUtil.getAgeByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getAgeByIdCard($expr$, $arg$)

.getProvinceCodeByIdCard : cn.hutool.core.util.IdcardUtil.getProvinceCodeByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getProvinceCodeByIdCard($expr$)

.isValidCard15 : cn.hutool.core.util.IdcardUtil.isValidCard15
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidCard15($expr$)

.hide : cn.hutool.core.util.IdcardUtil.hide
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.hide($expr$, $arg$)

.getBirth : cn.hutool.core.util.IdcardUtil.getBirth
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getBirth($expr$)

.isValidCard10 : cn.hutool.core.util.IdcardUtil.isValidCard10
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidCard10($expr$)

.isValidCard18 : cn.hutool.core.util.IdcardUtil.isValidCard18
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidCard18($expr$, $arg$)

.isValidTWCard : cn.hutool.core.util.IdcardUtil.isValidTWCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidTWCard($expr$)

.getCityCodeByIdCard : cn.hutool.core.util.IdcardUtil.getCityCodeByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getCityCodeByIdCard($expr$)

.isValidHKCard : cn.hutool.core.util.IdcardUtil.isValidHKCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidHKCard($expr$)

.getIdcardInfo : cn.hutool.core.util.IdcardUtil.getIdcardInfo
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getIdcardInfo($expr$)

.getMonthByIdCard : cn.hutool.core.util.IdcardUtil.getMonthByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getMonthByIdCard($expr$)


## JAXBUtil

.beanToXml : cn.hutool.core.util.JAXBUtil.beanToXml
	java.lang.Object [cn.hutool.core.util.JAXBUtil]  →  JAXBUtil.beanToXml($expr$, $arg$)

.xmlToBean : cn.hutool.core.util.JAXBUtil.xmlToBean
	java.lang.String [cn.hutool.core.util.JAXBUtil]  →  JAXBUtil.xmlToBean($expr$, $arg$)
	java.io.File [cn.hutool.core.util.JAXBUtil]  →  JAXBUtil.xmlToBean($expr$, $arg$)
	java.io.Reader [cn.hutool.core.util.JAXBUtil]  →  JAXBUtil.xmlToBean($expr$, $arg$)


## JNDIUtil

.getAttributes : cn.hutool.core.util.JNDIUtil.getAttributes
	java.lang.String [cn.hutool.core.util.JNDIUtil]  →  JNDIUtil.getAttributes($expr$, $arg$)

.createInitialDirContext : cn.hutool.core.util.JNDIUtil.createInitialDirContext
	java.util.Map [cn.hutool.core.util.JNDIUtil]  →  JNDIUtil.createInitialDirContext($expr$)

.createInitialContext : cn.hutool.core.util.JNDIUtil.createInitialContext
	java.util.Map [cn.hutool.core.util.JNDIUtil]  →  JNDIUtil.createInitialContext($expr$)


## ModifierUtil

.isSynthetic : cn.hutool.core.util.ModifierUtil.isSynthetic
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isSynthetic($expr$)
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isSynthetic($expr$)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isSynthetic($expr$)

.isPublic : cn.hutool.core.util.ModifierUtil.isPublic
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isPublic($expr$)
	java.lang.reflect.Constructor [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isPublic($expr$)
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isPublic($expr$)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isPublic($expr$)

.isStatic : cn.hutool.core.util.ModifierUtil.isStatic
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isStatic($expr$)
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isStatic($expr$)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isStatic($expr$)

.hasModifier : cn.hutool.core.util.ModifierUtil.hasModifier
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.hasModifier($expr$, $arg$)
	java.lang.reflect.Constructor [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.hasModifier($expr$, $arg$)
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.hasModifier($expr$, $arg$)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.hasModifier($expr$, $arg$)


## NumberUtil

.decimalFormatMoney : cn.hutool.core.util.NumberUtil.decimalFormatMoney
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.decimalFormatMoney($expr$)

.divisor : cn.hutool.core.util.NumberUtil.divisor
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.divisor($expr$, $arg$)

.count : cn.hutool.core.util.NumberUtil.count
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.count($expr$, $arg$)

.factorial : cn.hutool.core.util.NumberUtil.factorial
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.factorial($expr$, $arg$)
	java.math.BigInteger [cn.hutool.core.util.NumberUtil]  →  NumberUtil.factorial($expr$, $arg$)

.isGreater : cn.hutool.core.util.NumberUtil.isGreater
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isGreater($expr$, $arg$)

.isValid : cn.hutool.core.util.NumberUtil.isValid
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isValid($expr$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isValid($expr$)

.equals : cn.hutool.core.util.NumberUtil.equals
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)
	CHAR [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)

.isDouble : cn.hutool.core.util.NumberUtil.isDouble
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isDouble($expr$)

.generateRandomNumber : cn.hutool.core.util.NumberUtil.generateRandomNumber
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.generateRandomNumber($expr$, $arg$)

.div : cn.hutool.core.util.NumberUtil.div
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	java.lang.Double [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)

.min : cn.hutool.core.util.NumberUtil.min
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.min($expr$)

.isGreaterOrEqual : cn.hutool.core.util.NumberUtil.isGreaterOrEqual
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isGreaterOrEqual($expr$, $arg$)

.toStr : cn.hutool.core.util.NumberUtil.toStr
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toStr($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toStr($expr$, $arg$)

.isInteger : cn.hutool.core.util.NumberUtil.isInteger
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isInteger($expr$)

.roundStr : cn.hutool.core.util.NumberUtil.roundStr
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundStr($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundStr($expr$, $arg$)

.pow : cn.hutool.core.util.NumberUtil.pow
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.pow($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.pow($expr$, $arg$)

.isOdd : cn.hutool.core.util.NumberUtil.isOdd
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isOdd($expr$)

.binaryToInt : cn.hutool.core.util.NumberUtil.binaryToInt
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.binaryToInt($expr$)

.max : cn.hutool.core.util.NumberUtil.max
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.max($expr$)

.binaryToLong : cn.hutool.core.util.NumberUtil.binaryToLong
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.binaryToLong($expr$)

.calculate : cn.hutool.core.util.NumberUtil.calculate
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.calculate($expr$)

.sqrt : cn.hutool.core.util.NumberUtil.sqrt
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sqrt($expr$)

.generateBySet : cn.hutool.core.util.NumberUtil.generateBySet
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.generateBySet($expr$, $arg$)

.toInt : cn.hutool.core.util.NumberUtil.toInt
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toInt($expr$)

.toBigDecimal : cn.hutool.core.util.NumberUtil.toBigDecimal
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBigDecimal($expr$)
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBigDecimal($expr$)

.range : cn.hutool.core.util.NumberUtil.range
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.range($expr$, $arg$)

.mul : cn.hutool.core.util.NumberUtil.mul
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$)
	java.lang.Double [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)

.toBytes : cn.hutool.core.util.NumberUtil.toBytes
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBytes($expr$)

.partValue : cn.hutool.core.util.NumberUtil.partValue
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.partValue($expr$, $arg$)

.parseFloat : cn.hutool.core.util.NumberUtil.parseFloat
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseFloat($expr$)

.formatPercent : cn.hutool.core.util.NumberUtil.formatPercent
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.formatPercent($expr$, $arg$)

.decimalFormat : cn.hutool.core.util.NumberUtil.decimalFormat
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.decimalFormat($expr$, $arg$)

.parseDouble : cn.hutool.core.util.NumberUtil.parseDouble
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseDouble($expr$)

.isNumber : cn.hutool.core.util.NumberUtil.isNumber
	java.lang.CharSequence [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isNumber($expr$)

.isPowerOfTwo : cn.hutool.core.util.NumberUtil.isPowerOfTwo
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isPowerOfTwo($expr$)

.getBinaryStr : cn.hutool.core.util.NumberUtil.getBinaryStr
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.getBinaryStr($expr$)

.toDouble : cn.hutool.core.util.NumberUtil.toDouble
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toDouble($expr$)

.null2Zero : cn.hutool.core.util.NumberUtil.null2Zero
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.null2Zero($expr$)

.toUnsignedByteArray : cn.hutool.core.util.NumberUtil.toUnsignedByteArray
	java.math.BigInteger [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toUnsignedByteArray($expr$)
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toUnsignedByteArray($expr$, $arg$)

.isLessOrEqual : cn.hutool.core.util.NumberUtil.isLessOrEqual
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isLessOrEqual($expr$, $arg$)

.sub : cn.hutool.core.util.NumberUtil.sub
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$, $arg$)
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$)
	java.lang.Double [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$, $arg$)
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$, $arg$)

.round : cn.hutool.core.util.NumberUtil.round
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.round($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.round($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.round($expr$, $arg$)

.roundDown : cn.hutool.core.util.NumberUtil.roundDown
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundDown($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundDown($expr$, $arg$)

.newBigInteger : cn.hutool.core.util.NumberUtil.newBigInteger
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.newBigInteger($expr$)

.multiple : cn.hutool.core.util.NumberUtil.multiple
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.multiple($expr$, $arg$)

.isPrimes : cn.hutool.core.util.NumberUtil.isPrimes
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isPrimes($expr$)

.processMultiple : cn.hutool.core.util.NumberUtil.processMultiple
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.processMultiple($expr$, $arg$)

.parseInt : cn.hutool.core.util.NumberUtil.parseInt
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseInt($expr$)

.parseLong : cn.hutool.core.util.NumberUtil.parseLong
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseLong($expr$)

.zero2One : cn.hutool.core.util.NumberUtil.zero2One
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.zero2One($expr$)

.appendRange : cn.hutool.core.util.NumberUtil.appendRange
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.appendRange($expr$, $arg$)

.ceilDiv : cn.hutool.core.util.NumberUtil.ceilDiv
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.ceilDiv($expr$, $arg$)

.add : cn.hutool.core.util.NumberUtil.add
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$, $arg$)
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$)
	java.lang.Double [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$, $arg$)
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$, $arg$)

.isLess : cn.hutool.core.util.NumberUtil.isLess
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isLess($expr$, $arg$)

.isBeside : cn.hutool.core.util.NumberUtil.isBeside
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isBeside($expr$, $arg$)
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isBeside($expr$, $arg$)

.isLong : cn.hutool.core.util.NumberUtil.isLong
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isLong($expr$)

.parseNumber : cn.hutool.core.util.NumberUtil.parseNumber
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseNumber($expr$)

.fromUnsignedByteArray : cn.hutool.core.util.NumberUtil.fromUnsignedByteArray
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.fromUnsignedByteArray($expr$, $arg$)

.isValidNumber : cn.hutool.core.util.NumberUtil.isValidNumber
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isValidNumber($expr$)

.compare : cn.hutool.core.util.NumberUtil.compare
	SHORT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	CHAR [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	BYTE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)

.roundHalfEven : cn.hutool.core.util.NumberUtil.roundHalfEven
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundHalfEven($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundHalfEven($expr$, $arg$)

.toBigInteger : cn.hutool.core.util.NumberUtil.toBigInteger
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBigInteger($expr$)
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBigInteger($expr$)

.isEven : cn.hutool.core.util.NumberUtil.isEven
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isEven($expr$)


## ObjectUtil

.cloneByStream : cn.hutool.core.util.ObjectUtil.cloneByStream
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.cloneByStream($expr$)

.hasEmpty : cn.hutool.core.util.ObjectUtil.hasEmpty
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.hasEmpty($expr$)

.isValidIfNumber : cn.hutool.core.util.ObjectUtil.isValidIfNumber
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isValidIfNumber($expr$)

.isBasicType : cn.hutool.core.util.ObjectUtil.isBasicType
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isBasicType($expr$)

.equals : cn.hutool.core.util.ObjectUtil.equals
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.equals($expr$, $arg$)

.isNull : cn.hutool.core.util.ObjectUtil.isNull
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isNull($expr$)

.hasNull : cn.hutool.core.util.ObjectUtil.hasNull
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.hasNull($expr$)

.getTypeArgument : cn.hutool.core.util.ObjectUtil.getTypeArgument
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.getTypeArgument($expr$, $arg$)

.defaultIfEmpty : cn.hutool.core.util.ObjectUtil.defaultIfEmpty
	java.lang.String [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.defaultIfEmpty($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.defaultIfEmpty($expr$, $arg$)

.isAllNotEmpty : cn.hutool.core.util.ObjectUtil.isAllNotEmpty
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isAllNotEmpty($expr$)

.isNotEmpty : cn.hutool.core.util.ObjectUtil.isNotEmpty
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isNotEmpty($expr$)

.deserialize : cn.hutool.core.util.ObjectUtil.deserialize
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.deserialize($expr$)

.defaultIfNull : cn.hutool.core.util.ObjectUtil.defaultIfNull
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.defaultIfNull($expr$, $arg$)

.equal : cn.hutool.core.util.ObjectUtil.equal
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.equal($expr$, $arg$)

.clone : cn.hutool.core.util.ObjectUtil.clone
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.clone($expr$)

.defaultIfBlank : cn.hutool.core.util.ObjectUtil.defaultIfBlank
	java.lang.CharSequence [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.defaultIfBlank($expr$, $arg$)

.emptyCount : cn.hutool.core.util.ObjectUtil.emptyCount
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.emptyCount($expr$)

.toString : cn.hutool.core.util.ObjectUtil.toString
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.toString($expr$)

.length : cn.hutool.core.util.ObjectUtil.length
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.length($expr$)

.cloneIfPossible : cn.hutool.core.util.ObjectUtil.cloneIfPossible
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.cloneIfPossible($expr$)

.isNotNull : cn.hutool.core.util.ObjectUtil.isNotNull
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isNotNull($expr$)

.notEqual : cn.hutool.core.util.ObjectUtil.notEqual
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.notEqual($expr$, $arg$)

.contains : cn.hutool.core.util.ObjectUtil.contains
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.contains($expr$, $arg$)

.isEmpty : cn.hutool.core.util.ObjectUtil.isEmpty
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isEmpty($expr$)

.serialize : cn.hutool.core.util.ObjectUtil.serialize
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.serialize($expr$)

.isAllEmpty : cn.hutool.core.util.ObjectUtil.isAllEmpty
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isAllEmpty($expr$)

.compare : cn.hutool.core.util.ObjectUtil.compare
	java.lang.Comparable [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.compare($expr$, $arg$)


## PageUtil

.setFirstPageNo : cn.hutool.core.util.PageUtil.setFirstPageNo
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.setFirstPageNo($expr$)

.getStart : cn.hutool.core.util.PageUtil.getStart
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.getStart($expr$, $arg$)

.rainbow : cn.hutool.core.util.PageUtil.rainbow
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.rainbow($expr$, $arg$)

.getEnd : cn.hutool.core.util.PageUtil.getEnd
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.getEnd($expr$, $arg$)

.setOneAsFirstPageNo : cn.hutool.core.util.PageUtil.setOneAsFirstPageNo
	java.lang.Object [cn.hutool.core.util.PageUtil]  →  PageUtil.setOneAsFirstPageNo()

.getFirstPageNo : cn.hutool.core.util.PageUtil.getFirstPageNo
	java.lang.Object [cn.hutool.core.util.PageUtil]  →  PageUtil.getFirstPageNo()

.toSegment : cn.hutool.core.util.PageUtil.toSegment
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.toSegment($expr$, $arg$)

.totalPage : cn.hutool.core.util.PageUtil.totalPage
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.totalPage($expr$, $arg$)

.transToStartEnd : cn.hutool.core.util.PageUtil.transToStartEnd
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.transToStartEnd($expr$, $arg$)


## PhoneUtil

.isMobile : cn.hutool.core.util.PhoneUtil.isMobile
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isMobile($expr$)

.isMobileMo : cn.hutool.core.util.PhoneUtil.isMobileMo
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isMobileMo($expr$)

.isTel400800 : cn.hutool.core.util.PhoneUtil.isTel400800
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isTel400800($expr$)

.hideAfter : cn.hutool.core.util.PhoneUtil.hideAfter
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.hideAfter($expr$)

.subAfter : cn.hutool.core.util.PhoneUtil.subAfter
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.subAfter($expr$)

.subTelAfter : cn.hutool.core.util.PhoneUtil.subTelAfter
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.subTelAfter($expr$)

.hideBetween : cn.hutool.core.util.PhoneUtil.hideBetween
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.hideBetween($expr$)

.isMobileTw : cn.hutool.core.util.PhoneUtil.isMobileTw
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isMobileTw($expr$)

.hideBefore : cn.hutool.core.util.PhoneUtil.hideBefore
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.hideBefore($expr$)

.subBefore : cn.hutool.core.util.PhoneUtil.subBefore
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.subBefore($expr$)

.subBetween : cn.hutool.core.util.PhoneUtil.subBetween
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.subBetween($expr$)

.isPhone : cn.hutool.core.util.PhoneUtil.isPhone
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isPhone($expr$)

.isMobileHk : cn.hutool.core.util.PhoneUtil.isMobileHk
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isMobileHk($expr$)

.subTelBefore : cn.hutool.core.util.PhoneUtil.subTelBefore
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.subTelBefore($expr$)

.isTel : cn.hutool.core.util.PhoneUtil.isTel
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isTel($expr$)


## PrimitiveArrayUtil

.unWrap : cn.hutool.core.util.PrimitiveArrayUtil.unWrap
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.unWrap($expr$)

.removeEle : cn.hutool.core.util.PrimitiveArrayUtil.removeEle
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.removeEle($expr$, $arg$)

.isSorted : cn.hutool.core.util.PrimitiveArrayUtil.isSorted
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isSorted($expr$)

.isSortedASC : cn.hutool.core.util.PrimitiveArrayUtil.isSortedASC
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isSortedASC($expr$)

.lastIndexOf : cn.hutool.core.util.PrimitiveArrayUtil.lastIndexOf
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.lastIndexOf($expr$, $arg$)

.addAll : cn.hutool.core.util.PrimitiveArrayUtil.addAll
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.addAll($expr$)

.isNotEmpty : cn.hutool.core.util.PrimitiveArrayUtil.isNotEmpty
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isNotEmpty($expr$)

.min : cn.hutool.core.util.PrimitiveArrayUtil.min
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.min($expr$)

.isSortedDESC : cn.hutool.core.util.PrimitiveArrayUtil.isSortedDESC
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isSortedDESC($expr$)

.reverse : cn.hutool.core.util.PrimitiveArrayUtil.reverse
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.reverse($expr$, $arg$)

.resize : cn.hutool.core.util.PrimitiveArrayUtil.resize
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.resize($expr$, $arg$)

.wrap : cn.hutool.core.util.PrimitiveArrayUtil.wrap
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.wrap($expr$)

.max : cn.hutool.core.util.PrimitiveArrayUtil.max
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.max($expr$)

.remove : cn.hutool.core.util.PrimitiveArrayUtil.remove
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.remove($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.remove($expr$, $arg$)

.range : cn.hutool.core.util.PrimitiveArrayUtil.range
	INT [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.range($expr$, $arg$)

.split : cn.hutool.core.util.PrimitiveArrayUtil.split
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.split($expr$, $arg$)

.shuffle : cn.hutool.core.util.PrimitiveArrayUtil.shuffle
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.shuffle($expr$, $arg$)

.swap : cn.hutool.core.util.PrimitiveArrayUtil.swap
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.swap($expr$, $arg$)

.sub : cn.hutool.core.util.PrimitiveArrayUtil.sub
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.sub($expr$, $arg$)

.contains : cn.hutool.core.util.PrimitiveArrayUtil.contains
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.contains($expr$, $arg$)

.isEmpty : cn.hutool.core.util.PrimitiveArrayUtil.isEmpty
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isEmpty($expr$)

.indexOf : cn.hutool.core.util.PrimitiveArrayUtil.indexOf
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.indexOf($expr$, $arg$)


## RadixUtil

.decodeToInt : cn.hutool.core.util.RadixUtil.decodeToInt
	java.lang.String [cn.hutool.core.util.RadixUtil]  →  RadixUtil.decodeToInt($expr$, $arg$)

.encode : cn.hutool.core.util.RadixUtil.encode
	java.lang.String [cn.hutool.core.util.RadixUtil]  →  RadixUtil.encode($expr$, $arg$)

.decode : cn.hutool.core.util.RadixUtil.decode
	java.lang.String [cn.hutool.core.util.RadixUtil]  →  RadixUtil.decode($expr$, $arg$)


## RandomUtil

.randomEleList : cn.hutool.core.util.RandomUtil.randomEleList
	java.util.List [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEleList($expr$, $arg$)

.randomBoolean : cn.hutool.core.util.RandomUtil.randomBoolean
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomBoolean()

.getSecureRandomStrong : cn.hutool.core.util.RandomUtil.getSecureRandomStrong
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getSecureRandomStrong()

.randomDouble : cn.hutool.core.util.RandomUtil.randomDouble
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDouble($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDouble($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDouble()

.randomStringWithoutStr : cn.hutool.core.util.RandomUtil.randomStringWithoutStr
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomStringWithoutStr($expr$, $arg$)

.randomNumber : cn.hutool.core.util.RandomUtil.randomNumber
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomNumber()

.randomNumbers : cn.hutool.core.util.RandomUtil.randomNumbers
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomNumbers($expr$)

.randomEleSet : cn.hutool.core.util.RandomUtil.randomEleSet
	java.util.Collection [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEleSet($expr$, $arg$)

.randomString : cn.hutool.core.util.RandomUtil.randomString
	java.lang.String [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomString($expr$, $arg$)
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomString($expr$)

.getSecureRandom : cn.hutool.core.util.RandomUtil.getSecureRandom
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getSecureRandom($expr$)
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getSecureRandom()

.randomEle : cn.hutool.core.util.RandomUtil.randomEle
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEle($expr$, $arg$)
	java.util.List [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEle($expr$, $arg$)

.createSecureRandom : cn.hutool.core.util.RandomUtil.createSecureRandom
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.createSecureRandom($expr$)

.randomDate : cn.hutool.core.util.RandomUtil.randomDate
	java.util.Date [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDate($expr$, $arg$)

.randomBytes : cn.hutool.core.util.RandomUtil.randomBytes
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomBytes($expr$)

.randomStringUpper : cn.hutool.core.util.RandomUtil.randomStringUpper
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomStringUpper($expr$)

.weightRandom : cn.hutool.core.util.RandomUtil.weightRandom
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.weightRandom($expr$)
	java.lang.Iterable [cn.hutool.core.util.RandomUtil]  →  RandomUtil.weightRandom($expr$)

.getRandom : cn.hutool.core.util.RandomUtil.getRandom
	BOOLEAN [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getRandom($expr$)
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getRandom()

.randomChar : cn.hutool.core.util.RandomUtil.randomChar
	java.lang.String [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomChar($expr$)
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomChar()

.randomEles : cn.hutool.core.util.RandomUtil.randomEles
	java.util.List [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEles($expr$, $arg$)

.randomChinese : cn.hutool.core.util.RandomUtil.randomChinese
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomChinese()

.getSHA1PRNGRandom : cn.hutool.core.util.RandomUtil.getSHA1PRNGRandom
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getSHA1PRNGRandom($expr$)

.randomDay : cn.hutool.core.util.RandomUtil.randomDay
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDay($expr$, $arg$)

.randomLong : cn.hutool.core.util.RandomUtil.randomLong
	LONG [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomLong($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomLong()

.randomInt : cn.hutool.core.util.RandomUtil.randomInt
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomInt($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomInt()

.randomInts : cn.hutool.core.util.RandomUtil.randomInts
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomInts($expr$)

.randomBigDecimal : cn.hutool.core.util.RandomUtil.randomBigDecimal
	java.math.BigDecimal [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomBigDecimal($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomBigDecimal()


## ReUtil

.count : cn.hutool.core.util.ReUtil.count
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.count($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.count($expr$, $arg$)

.getGroup0 : cn.hutool.core.util.ReUtil.getGroup0
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.getGroup0($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.getGroup0($expr$, $arg$)

.getAllGroupNames : cn.hutool.core.util.ReUtil.getAllGroupNames
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.getAllGroupNames($expr$, $arg$)

.getAllGroups : cn.hutool.core.util.ReUtil.getAllGroups
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.getAllGroups($expr$, $arg$)

.replaceFirst : cn.hutool.core.util.ReUtil.replaceFirst
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.replaceFirst($expr$, $arg$)

.delLast : cn.hutool.core.util.ReUtil.delLast
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.delLast($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.delLast($expr$, $arg$)

.lastIndexOf : cn.hutool.core.util.ReUtil.lastIndexOf
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.lastIndexOf($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.lastIndexOf($expr$, $arg$)

.delPre : cn.hutool.core.util.ReUtil.delPre
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.delPre($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.delPre($expr$, $arg$)

.findAll : cn.hutool.core.util.ReUtil.findAll
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.findAll($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.findAll($expr$, $arg$)

.delAll : cn.hutool.core.util.ReUtil.delAll
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.delAll($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.delAll($expr$, $arg$)

.findAllGroup1 : cn.hutool.core.util.ReUtil.findAllGroup1
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.findAllGroup1($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.findAllGroup1($expr$, $arg$)

.extractMulti : cn.hutool.core.util.ReUtil.extractMulti
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.extractMulti($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.extractMulti($expr$, $arg$)

.isMatch : cn.hutool.core.util.ReUtil.isMatch
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.isMatch($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.isMatch($expr$, $arg$)

.escape : cn.hutool.core.util.ReUtil.escape
	CHAR [cn.hutool.core.util.ReUtil]  →  ReUtil.escape($expr$)
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  ReUtil.escape($expr$)

.getFirstNumber : cn.hutool.core.util.ReUtil.getFirstNumber
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  ReUtil.getFirstNumber($expr$)

.extractMultiAndDelPre : cn.hutool.core.util.ReUtil.extractMultiAndDelPre
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.extractMultiAndDelPre($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.extractMultiAndDelPre($expr$, $arg$)

.findAllGroup0 : cn.hutool.core.util.ReUtil.findAllGroup0
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.findAllGroup0($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.findAllGroup0($expr$, $arg$)

.get : cn.hutool.core.util.ReUtil.get
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.get($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.get($expr$, $arg$)

.getGroup1 : cn.hutool.core.util.ReUtil.getGroup1
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.getGroup1($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.getGroup1($expr$, $arg$)

.contains : cn.hutool.core.util.ReUtil.contains
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.contains($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.contains($expr$, $arg$)

.replaceAll : cn.hutool.core.util.ReUtil.replaceAll
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  ReUtil.replaceAll($expr$, $arg$)

.delFirst : cn.hutool.core.util.ReUtil.delFirst
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.delFirst($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.delFirst($expr$, $arg$)

.indexOf : cn.hutool.core.util.ReUtil.indexOf
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.indexOf($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.indexOf($expr$, $arg$)


## ReferenceUtil

.create : cn.hutool.core.util.ReferenceUtil.create
	cn.hutool.core.util.ReferenceUtil.ReferenceType [cn.hutool.core.util.ReferenceUtil]  →  ReferenceUtil.create($expr$, $arg$)


## ReflectUtil

.getMethod : cn.hutool.core.util.ReflectUtil.getMethod
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethod($expr$, $arg$)

.getFieldValue : cn.hutool.core.util.ReflectUtil.getFieldValue
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldValue($expr$, $arg$)

.getPublicMethod : cn.hutool.core.util.ReflectUtil.getPublicMethod
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getPublicMethod($expr$, $arg$)

.getFieldsValue : cn.hutool.core.util.ReflectUtil.getFieldsValue
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldsValue($expr$)

.isGetterOrSetter : cn.hutool.core.util.ReflectUtil.isGetterOrSetter
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isGetterOrSetter($expr$, $arg$)

.getMethodsDirectly : cn.hutool.core.util.ReflectUtil.getMethodsDirectly
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodsDirectly($expr$, $arg$)

.isEmptyParam : cn.hutool.core.util.ReflectUtil.isEmptyParam
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isEmptyParam($expr$)

.newInstanceIfPossible : cn.hutool.core.util.ReflectUtil.newInstanceIfPossible
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.newInstanceIfPossible($expr$)

.isOuterClassField : cn.hutool.core.util.ReflectUtil.isOuterClassField
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isOuterClassField($expr$)

.getMethodIgnoreCase : cn.hutool.core.util.ReflectUtil.getMethodIgnoreCase
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodIgnoreCase($expr$, $arg$)

.setAccessible : cn.hutool.core.util.ReflectUtil.setAccessible
	java.lang.reflect.AccessibleObject [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.setAccessible($expr$)

.getConstructorsDirectly : cn.hutool.core.util.ReflectUtil.getConstructorsDirectly
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getConstructorsDirectly($expr$)

.invokeWithCheck : cn.hutool.core.util.ReflectUtil.invokeWithCheck
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.invokeWithCheck($expr$, $arg$)

.getPublicMethods : cn.hutool.core.util.ReflectUtil.getPublicMethods
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getPublicMethods($expr$, $arg$)

.getFieldMap : cn.hutool.core.util.ReflectUtil.getFieldMap
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldMap($expr$)

.getField : cn.hutool.core.util.ReflectUtil.getField
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getField($expr$, $arg$)

.invoke : cn.hutool.core.util.ReflectUtil.invoke
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.invoke($expr$, $arg$)

.isToStringMethod : cn.hutool.core.util.ReflectUtil.isToStringMethod
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isToStringMethod($expr$)

.getMethodByNameIgnoreCase : cn.hutool.core.util.ReflectUtil.getMethodByNameIgnoreCase
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodByNameIgnoreCase($expr$, $arg$)

.hasField : cn.hutool.core.util.ReflectUtil.hasField
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.hasField($expr$, $arg$)

.getStaticFieldValue : cn.hutool.core.util.ReflectUtil.getStaticFieldValue
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getStaticFieldValue($expr$)

.getMethods : cn.hutool.core.util.ReflectUtil.getMethods
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethods($expr$, $arg$)

.newInstance : cn.hutool.core.util.ReflectUtil.newInstance
	java.lang.String [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.newInstance($expr$)
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.newInstance($expr$, $arg$)

.isGetterOrSetterIgnoreCase : cn.hutool.core.util.ReflectUtil.isGetterOrSetterIgnoreCase
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isGetterOrSetterIgnoreCase($expr$)

.getMethodOfObj : cn.hutool.core.util.ReflectUtil.getMethodOfObj
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodOfObj($expr$, $arg$)

.isEqualsMethod : cn.hutool.core.util.ReflectUtil.isEqualsMethod
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isEqualsMethod($expr$)

.getFieldsDirectly : cn.hutool.core.util.ReflectUtil.getFieldsDirectly
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldsDirectly($expr$, $arg$)

.getMethodNames : cn.hutool.core.util.ReflectUtil.getMethodNames
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodNames($expr$)

.getMethodByName : cn.hutool.core.util.ReflectUtil.getMethodByName
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodByName($expr$, $arg$)

.getFields : cn.hutool.core.util.ReflectUtil.getFields
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFields($expr$, $arg$)

.setFieldValue : cn.hutool.core.util.ReflectUtil.setFieldValue
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.setFieldValue($expr$, $arg$)

.getPublicMethodNames : cn.hutool.core.util.ReflectUtil.getPublicMethodNames
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getPublicMethodNames($expr$)

.getConstructors : cn.hutool.core.util.ReflectUtil.getConstructors
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getConstructors($expr$)

.invokeStatic : cn.hutool.core.util.ReflectUtil.invokeStatic
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.invokeStatic($expr$, $arg$)

.isHashCodeMethod : cn.hutool.core.util.ReflectUtil.isHashCodeMethod
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isHashCodeMethod($expr$)

.getConstructor : cn.hutool.core.util.ReflectUtil.getConstructor
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getConstructor($expr$, $arg$)

.getFieldName : cn.hutool.core.util.ReflectUtil.getFieldName
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldName($expr$)


## RuntimeUtil

.getPid : cn.hutool.core.util.RuntimeUtil.getPid
	java.lang.Object [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getPid()

.getResultLines : cn.hutool.core.util.RuntimeUtil.getResultLines
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getResultLines($expr$, $arg$)

.getResult : cn.hutool.core.util.RuntimeUtil.getResult
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getResult($expr$, $arg$)

.getErrorResult : cn.hutool.core.util.RuntimeUtil.getErrorResult
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getErrorResult($expr$, $arg$)

.getProcessorCount : cn.hutool.core.util.RuntimeUtil.getProcessorCount
	java.lang.Object [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getProcessorCount()

.execForStr : cn.hutool.core.util.RuntimeUtil.execForStr
	scala.Array [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.execForStr($expr$)
	java.nio.charset.Charset [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.execForStr($expr$, $arg$)

.getTotalMemory : cn.hutool.core.util.RuntimeUtil.getTotalMemory
	java.lang.Object [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getTotalMemory()

.getUsableMemory : cn.hutool.core.util.RuntimeUtil.getUsableMemory
	java.lang.Object [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getUsableMemory()

.getFreeMemory : cn.hutool.core.util.RuntimeUtil.getFreeMemory
	java.lang.Object [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getFreeMemory()

.destroy : cn.hutool.core.util.RuntimeUtil.destroy
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.destroy($expr$)

.addShutdownHook : cn.hutool.core.util.RuntimeUtil.addShutdownHook
	java.lang.Runnable [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.addShutdownHook($expr$)

.getMaxMemory : cn.hutool.core.util.RuntimeUtil.getMaxMemory
	java.lang.Object [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getMaxMemory()

.exec : cn.hutool.core.util.RuntimeUtil.exec
	scala.Array [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.exec($expr$, $arg$)

.execForLines : cn.hutool.core.util.RuntimeUtil.execForLines
	scala.Array [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.execForLines($expr$)
	java.nio.charset.Charset [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.execForLines($expr$, $arg$)


## SerializeUtil

.clone : cn.hutool.core.util.SerializeUtil.clone
	java.lang.Object [cn.hutool.core.util.SerializeUtil]  →  SerializeUtil.clone($expr$)

.serialize : cn.hutool.core.util.SerializeUtil.serialize
	java.lang.Object [cn.hutool.core.util.SerializeUtil]  →  SerializeUtil.serialize($expr$)

.deserialize : cn.hutool.core.util.SerializeUtil.deserialize
	scala.Array [cn.hutool.core.util.SerializeUtil]  →  SerializeUtil.deserialize($expr$)


## ServiceLoaderUtil

.loadFirstAvailable : cn.hutool.core.util.ServiceLoaderUtil.loadFirstAvailable
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  ServiceLoaderUtil.loadFirstAvailable($expr$)

.loadList : cn.hutool.core.util.ServiceLoaderUtil.loadList
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  ServiceLoaderUtil.loadList($expr$, $arg$)

.load : cn.hutool.core.util.ServiceLoaderUtil.load
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  ServiceLoaderUtil.load($expr$, $arg$)

.loadFirst : cn.hutool.core.util.ServiceLoaderUtil.loadFirst
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  ServiceLoaderUtil.loadFirst($expr$)


## StrUtil

.subSufByLength : cn.hutool.core.util.StrUtil.subSufByLength
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subSufByLength($expr$, $arg$)

.unWrap : cn.hutool.core.util.StrUtil.unWrap
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.unWrap($expr$, $arg$)

.removeSuffixIgnoreCase : cn.hutool.core.util.StrUtil.removeSuffixIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeSuffixIgnoreCase($expr$, $arg$)

.equalsIgnoreCase : cn.hutool.core.util.StrUtil.equalsIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equalsIgnoreCase($expr$, $arg$)

.format : cn.hutool.core.util.StrUtil.format
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.format($expr$, $arg$)

.isNullOrUndefined : cn.hutool.core.util.StrUtil.isNullOrUndefined
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isNullOrUndefined($expr$)

.isAllBlank : cn.hutool.core.util.StrUtil.isAllBlank
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllBlank($expr$)

.indexedFormat : cn.hutool.core.util.StrUtil.indexedFormat
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.indexedFormat($expr$, $arg$)

.emptyToDefault : cn.hutool.core.util.StrUtil.emptyToDefault
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.emptyToDefault($expr$, $arg$)

.hasEmpty : cn.hutool.core.util.StrUtil.hasEmpty
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.hasEmpty($expr$)

.count : cn.hutool.core.util.StrUtil.count
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.count($expr$, $arg$)

.move : cn.hutool.core.util.StrUtil.move
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.move($expr$, $arg$)

.replaceIgnoreCase : cn.hutool.core.util.StrUtil.replaceIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.replaceIgnoreCase($expr$, $arg$)

.isNumeric : cn.hutool.core.util.StrUtil.isNumeric
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isNumeric($expr$)

.isEmptyOrUndefined : cn.hutool.core.util.StrUtil.isEmptyOrUndefined
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isEmptyOrUndefined($expr$)

.removePreAndLowerFirst : cn.hutool.core.util.StrUtil.removePreAndLowerFirst
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removePreAndLowerFirst($expr$, $arg$)

.removeSuffix : cn.hutool.core.util.StrUtil.removeSuffix
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeSuffix($expr$, $arg$)

.replace : cn.hutool.core.util.StrUtil.replace
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.replace($expr$, $arg$)

.removePrefix : cn.hutool.core.util.StrUtil.removePrefix
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removePrefix($expr$, $arg$)

.repeatAndJoin : cn.hutool.core.util.StrUtil.repeatAndJoin
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.repeatAndJoin($expr$, $arg$)

.startWith : cn.hutool.core.util.StrUtil.startWith
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.startWith($expr$, $arg$)

.isAllCharMatch : cn.hutool.core.util.StrUtil.isAllCharMatch
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllCharMatch($expr$, $arg$)

.prependIfMissing : cn.hutool.core.util.StrUtil.prependIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.prependIfMissing($expr$, $arg$)

.join : cn.hutool.core.util.StrUtil.join
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.join($expr$, $arg$)

.isSurround : cn.hutool.core.util.StrUtil.isSurround
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isSurround($expr$, $arg$)

.similar : cn.hutool.core.util.StrUtil.similar
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.similar($expr$, $arg$)

.subSuf : cn.hutool.core.util.StrUtil.subSuf
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subSuf($expr$, $arg$)

.equals : cn.hutool.core.util.StrUtil.equals
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equals($expr$, $arg$)

.equalsCharAt : cn.hutool.core.util.StrUtil.equalsCharAt
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equalsCharAt($expr$, $arg$)

.appendIfMissing : cn.hutool.core.util.StrUtil.appendIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.appendIfMissing($expr$, $arg$)

.nullToDefault : cn.hutool.core.util.StrUtil.nullToDefault
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.nullToDefault($expr$, $arg$)

.center : cn.hutool.core.util.StrUtil.center
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.center($expr$, $arg$)

.normalize : cn.hutool.core.util.StrUtil.normalize
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.normalize($expr$)

.lastIndexOf : cn.hutool.core.util.StrUtil.lastIndexOf
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.lastIndexOf($expr$, $arg$)

.toStringOrNull : cn.hutool.core.util.StrUtil.toStringOrNull
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.toStringOrNull($expr$)

.isNotBlank : cn.hutool.core.util.StrUtil.isNotBlank
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isNotBlank($expr$)

.splitToArray : cn.hutool.core.util.StrUtil.splitToArray
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.splitToArray($expr$, $arg$)

.addSuffixIfNot : cn.hutool.core.util.StrUtil.addSuffixIfNot
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.addSuffixIfNot($expr$, $arg$)

.uuid : cn.hutool.core.util.StrUtil.uuid
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.uuid()

.compareIgnoreCase : cn.hutool.core.util.StrUtil.compareIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.compareIgnoreCase($expr$, $arg$)

.cut : cn.hutool.core.util.StrUtil.cut
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.cut($expr$, $arg$)

.padPre : cn.hutool.core.util.StrUtil.padPre
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.padPre($expr$, $arg$)

.indexOfIgnoreCase : cn.hutool.core.util.StrUtil.indexOfIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.indexOfIgnoreCase($expr$, $arg$)

.containsIgnoreCase : cn.hutool.core.util.StrUtil.containsIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsIgnoreCase($expr$, $arg$)

.isAllNotEmpty : cn.hutool.core.util.StrUtil.isAllNotEmpty
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllNotEmpty($expr$)

.concat : cn.hutool.core.util.StrUtil.concat
	BOOLEAN [cn.hutool.core.util.StrUtil]  →  StrUtil.concat($expr$, $arg$)

.isNotEmpty : cn.hutool.core.util.StrUtil.isNotEmpty
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isNotEmpty($expr$)

.lastIndexOfIgnoreCase : cn.hutool.core.util.StrUtil.lastIndexOfIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.lastIndexOfIgnoreCase($expr$, $arg$)

.trimEnd : cn.hutool.core.util.StrUtil.trimEnd
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trimEnd($expr$)

.totalLength : cn.hutool.core.util.StrUtil.totalLength
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.totalLength($expr$)

.removeSufAndLowerFirst : cn.hutool.core.util.StrUtil.removeSufAndLowerFirst
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeSufAndLowerFirst($expr$, $arg$)

.builder : cn.hutool.core.util.StrUtil.builder
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.builder($expr$)
	INT [cn.hutool.core.util.StrUtil]  →  StrUtil.builder($expr$)
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.builder()

.equalsAnyIgnoreCase : cn.hutool.core.util.StrUtil.equalsAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equalsAnyIgnoreCase($expr$, $arg$)

.subWithLength : cn.hutool.core.util.StrUtil.subWithLength
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.subWithLength($expr$, $arg$)

.subAfter : cn.hutool.core.util.StrUtil.subAfter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subAfter($expr$, $arg$)

.blankToDefault : cn.hutool.core.util.StrUtil.blankToDefault
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.blankToDefault($expr$, $arg$)

.strip : cn.hutool.core.util.StrUtil.strip
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.strip($expr$, $arg$)

.toCamelCase : cn.hutool.core.util.StrUtil.toCamelCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.toCamelCase($expr$, $arg$)

.utf8Str : cn.hutool.core.util.StrUtil.utf8Str
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.utf8Str($expr$)

.wrapAllWithPairIfMissing : cn.hutool.core.util.StrUtil.wrapAllWithPairIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapAllWithPairIfMissing($expr$, $arg$)

.startWithIgnoreCase : cn.hutool.core.util.StrUtil.startWithIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.startWithIgnoreCase($expr$, $arg$)

.isEmptyIfStr : cn.hutool.core.util.StrUtil.isEmptyIfStr
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.isEmptyIfStr($expr$)

.endWithAnyIgnoreCase : cn.hutool.core.util.StrUtil.endWithAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.endWithAnyIgnoreCase($expr$, $arg$)

.addPrefixIfNot : cn.hutool.core.util.StrUtil.addPrefixIfNot
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.addPrefixIfNot($expr$, $arg$)

.isBlankIfStr : cn.hutool.core.util.StrUtil.isBlankIfStr
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.isBlankIfStr($expr$)

.isBlank : cn.hutool.core.util.StrUtil.isBlank
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isBlank($expr$)

.containsAnyIgnoreCase : cn.hutool.core.util.StrUtil.containsAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsAnyIgnoreCase($expr$, $arg$)

.compareVersion : cn.hutool.core.util.StrUtil.compareVersion
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.compareVersion($expr$, $arg$)

.removeAllLineBreaks : cn.hutool.core.util.StrUtil.removeAllLineBreaks
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeAllLineBreaks($expr$)

.reverse : cn.hutool.core.util.StrUtil.reverse
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.reverse($expr$)

.wrapIfMissing : cn.hutool.core.util.StrUtil.wrapIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapIfMissing($expr$, $arg$)

.filter : cn.hutool.core.util.StrUtil.filter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.filter($expr$, $arg$)

.getContainsStrIgnoreCase : cn.hutool.core.util.StrUtil.getContainsStrIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.getContainsStrIgnoreCase($expr$, $arg$)

.endWithIgnoreCase : cn.hutool.core.util.StrUtil.endWithIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.endWithIgnoreCase($expr$, $arg$)

.str : cn.hutool.core.util.StrUtil.str
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.str($expr$, $arg$)
	java.nio.ByteBuffer [cn.hutool.core.util.StrUtil]  →  StrUtil.str($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.str($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.str($expr$)

.ordinalIndexOf : cn.hutool.core.util.StrUtil.ordinalIndexOf
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.ordinalIndexOf($expr$, $arg$)

.bytes : cn.hutool.core.util.StrUtil.bytes
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.bytes($expr$, $arg$)

.utf8Bytes : cn.hutool.core.util.StrUtil.utf8Bytes
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.utf8Bytes($expr$)

.subBefore : cn.hutool.core.util.StrUtil.subBefore
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subBefore($expr$, $arg$)

.hasBlank : cn.hutool.core.util.StrUtil.hasBlank
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.hasBlank($expr$)

.wrap : cn.hutool.core.util.StrUtil.wrap
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrap($expr$, $arg$)

.isLowerCase : cn.hutool.core.util.StrUtil.isLowerCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isLowerCase($expr$)

.splitToLong : cn.hutool.core.util.StrUtil.splitToLong
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.splitToLong($expr$, $arg$)

.splitTrim : cn.hutool.core.util.StrUtil.splitTrim
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.splitTrim($expr$, $arg$)

.desensitized : cn.hutool.core.util.StrUtil.desensitized
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.desensitized($expr$, $arg$)

.subBetween : cn.hutool.core.util.StrUtil.subBetween
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subBetween($expr$, $arg$)

.upperFirst : cn.hutool.core.util.StrUtil.upperFirst
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.upperFirst($expr$)

.subByCodePoint : cn.hutool.core.util.StrUtil.subByCodePoint
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subByCodePoint($expr$, $arg$)

.isCharEquals : cn.hutool.core.util.StrUtil.isCharEquals
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isCharEquals($expr$)

.isBlankOrUndefined : cn.hutool.core.util.StrUtil.isBlankOrUndefined
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isBlankOrUndefined($expr$)

.trimStart : cn.hutool.core.util.StrUtil.trimStart
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trimStart($expr$)

.hide : cn.hutool.core.util.StrUtil.hide
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.hide($expr$, $arg$)

.emptyIfNull : cn.hutool.core.util.StrUtil.emptyIfNull
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.emptyIfNull($expr$)

.fill : cn.hutool.core.util.StrUtil.fill
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.fill($expr$, $arg$)

.cleanBlank : cn.hutool.core.util.StrUtil.cleanBlank
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.cleanBlank($expr$)

.split : cn.hutool.core.util.StrUtil.split
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.split($expr$, $arg$)

.byteLength : cn.hutool.core.util.StrUtil.byteLength
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.byteLength($expr$, $arg$)

.getWriter : cn.hutool.core.util.StrUtil.getWriter
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.getWriter()

.byteBuffer : cn.hutool.core.util.StrUtil.byteBuffer
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.byteBuffer($expr$, $arg$)

.subPre : cn.hutool.core.util.StrUtil.subPre
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subPre($expr$, $arg$)

.isUpperCase : cn.hutool.core.util.StrUtil.isUpperCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isUpperCase($expr$)

.genSetter : cn.hutool.core.util.StrUtil.genSetter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.genSetter($expr$)

.wrapAllIfMissing : cn.hutool.core.util.StrUtil.wrapAllIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapAllIfMissing($expr$, $arg$)

.equalsAny : cn.hutool.core.util.StrUtil.equalsAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equalsAny($expr$, $arg$)

.fillBefore : cn.hutool.core.util.StrUtil.fillBefore
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.fillBefore($expr$, $arg$)

.containsOnly : cn.hutool.core.util.StrUtil.containsOnly
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsOnly($expr$, $arg$)

.brief : cn.hutool.core.util.StrUtil.brief
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.brief($expr$, $arg$)

.lowerFirst : cn.hutool.core.util.StrUtil.lowerFirst
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.lowerFirst($expr$)

.toString : cn.hutool.core.util.StrUtil.toString
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.toString($expr$)

.repeatByLength : cn.hutool.core.util.StrUtil.repeatByLength
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.repeatByLength($expr$, $arg$)

.sub : cn.hutool.core.util.StrUtil.sub
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.sub($expr$, $arg$)

.length : cn.hutool.core.util.StrUtil.length
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.length($expr$)

.getContainsStr : cn.hutool.core.util.StrUtil.getContainsStr
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.getContainsStr($expr$, $arg$)

.containsBlank : cn.hutool.core.util.StrUtil.containsBlank
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsBlank($expr$)

.startWithAny : cn.hutool.core.util.StrUtil.startWithAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.startWithAny($expr$, $arg$)

.wrapAllWithPair : cn.hutool.core.util.StrUtil.wrapAllWithPair
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapAllWithPair($expr$, $arg$)

.strBuilder : cn.hutool.core.util.StrUtil.strBuilder
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.strBuilder($expr$)
	INT [cn.hutool.core.util.StrUtil]  →  StrUtil.strBuilder($expr$)
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.strBuilder()

.isWrap : cn.hutool.core.util.StrUtil.isWrap
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isWrap($expr$, $arg$)

.splitToInt : cn.hutool.core.util.StrUtil.splitToInt
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.splitToInt($expr$, $arg$)

.repeat : cn.hutool.core.util.StrUtil.repeat
	CHAR [cn.hutool.core.util.StrUtil]  →  StrUtil.repeat($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.repeat($expr$, $arg$)

.prependIfMissingIgnoreCase : cn.hutool.core.util.StrUtil.prependIfMissingIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.prependIfMissingIgnoreCase($expr$, $arg$)

.getReader : cn.hutool.core.util.StrUtil.getReader
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.getReader($expr$)

.nullToEmpty : cn.hutool.core.util.StrUtil.nullToEmpty
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.nullToEmpty($expr$)

.isSubEquals : cn.hutool.core.util.StrUtil.isSubEquals
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isSubEquals($expr$, $arg$)

.trim : cn.hutool.core.util.StrUtil.trim
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.trim($expr$)
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trim($expr$, $arg$)

.removeAll : cn.hutool.core.util.StrUtil.removeAll
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeAll($expr$, $arg$)

.removePrefixIgnoreCase : cn.hutool.core.util.StrUtil.removePrefixIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removePrefixIgnoreCase($expr$, $arg$)

.endWith : cn.hutool.core.util.StrUtil.endWith
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.endWith($expr$, $arg$)

.endWithAny : cn.hutool.core.util.StrUtil.endWithAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.endWithAny($expr$, $arg$)

.contains : cn.hutool.core.util.StrUtil.contains
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.contains($expr$, $arg$)

.isEmpty : cn.hutool.core.util.StrUtil.isEmpty
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isEmpty($expr$)

.appendIfMissingIgnoreCase : cn.hutool.core.util.StrUtil.appendIfMissingIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.appendIfMissingIgnoreCase($expr$, $arg$)

.fillAfter : cn.hutool.core.util.StrUtil.fillAfter
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.fillAfter($expr$, $arg$)

.isAllNotBlank : cn.hutool.core.util.StrUtil.isAllNotBlank
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllNotBlank($expr$)

.replaceChars : cn.hutool.core.util.StrUtil.replaceChars
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.replaceChars($expr$, $arg$)

.toUnderlineCase : cn.hutool.core.util.StrUtil.toUnderlineCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.toUnderlineCase($expr$)

.removeAny : cn.hutool.core.util.StrUtil.removeAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeAny($expr$, $arg$)

.indexOf : cn.hutool.core.util.StrUtil.indexOf
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.indexOf($expr$, $arg$)

.upperFirstAndAddPre : cn.hutool.core.util.StrUtil.upperFirstAndAddPre
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.upperFirstAndAddPre($expr$, $arg$)

.isAllEmpty : cn.hutool.core.util.StrUtil.isAllEmpty
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllEmpty($expr$)

.maxLength : cn.hutool.core.util.StrUtil.maxLength
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.maxLength($expr$, $arg$)

.emptyToNull : cn.hutool.core.util.StrUtil.emptyToNull
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.emptyToNull($expr$)

.swapCase : cn.hutool.core.util.StrUtil.swapCase
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.swapCase($expr$)

.trimToEmpty : cn.hutool.core.util.StrUtil.trimToEmpty
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trimToEmpty($expr$)

.subPreGbk : cn.hutool.core.util.StrUtil.subPreGbk
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subPreGbk($expr$, $arg$)

.compare : cn.hutool.core.util.StrUtil.compare
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.compare($expr$, $arg$)

.getGeneralField : cn.hutool.core.util.StrUtil.getGeneralField
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.getGeneralField($expr$)

.genGetter : cn.hutool.core.util.StrUtil.genGetter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.genGetter($expr$)

.padAfter : cn.hutool.core.util.StrUtil.padAfter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.padAfter($expr$, $arg$)

.containsAny : cn.hutool.core.util.StrUtil.containsAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsAny($expr$, $arg$)

.trimToNull : cn.hutool.core.util.StrUtil.trimToNull
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trimToNull($expr$)

.startWithIgnoreEquals : cn.hutool.core.util.StrUtil.startWithIgnoreEquals
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.startWithIgnoreEquals($expr$, $arg$)

.subBetweenAll : cn.hutool.core.util.StrUtil.subBetweenAll
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subBetweenAll($expr$, $arg$)

.wrapAll : cn.hutool.core.util.StrUtil.wrapAll
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapAll($expr$, $arg$)

.toSymbolCase : cn.hutool.core.util.StrUtil.toSymbolCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.toSymbolCase($expr$, $arg$)

.stripIgnoreCase : cn.hutool.core.util.StrUtil.stripIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.stripIgnoreCase($expr$, $arg$)


## SystemPropsUtil

.set : cn.hutool.core.util.SystemPropsUtil.set
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  SystemPropsUtil.set($expr$, $arg$)

.getInt : cn.hutool.core.util.SystemPropsUtil.getInt
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  SystemPropsUtil.getInt($expr$, $arg$)

.getBoolean : cn.hutool.core.util.SystemPropsUtil.getBoolean
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  SystemPropsUtil.getBoolean($expr$, $arg$)

.get : cn.hutool.core.util.SystemPropsUtil.get
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  SystemPropsUtil.get($expr$, $arg$)

.getProps : cn.hutool.core.util.SystemPropsUtil.getProps
	java.lang.Object [cn.hutool.core.util.SystemPropsUtil]  →  SystemPropsUtil.getProps()

.getLong : cn.hutool.core.util.SystemPropsUtil.getLong
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  SystemPropsUtil.getLong($expr$, $arg$)


## TypeUtil

.toParameterizedType : cn.hutool.core.util.TypeUtil.toParameterizedType
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.toParameterizedType($expr$)

.getFirstParamType : cn.hutool.core.util.TypeUtil.getFirstParamType
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getFirstParamType($expr$)

.getActualType : cn.hutool.core.util.TypeUtil.getActualType
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getActualType($expr$, $arg$)

.getParamClasses : cn.hutool.core.util.TypeUtil.getParamClasses
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getParamClasses($expr$)

.hasTypeVariable : cn.hutool.core.util.TypeUtil.hasTypeVariable
	scala.Array [cn.hutool.core.util.TypeUtil]  →  TypeUtil.hasTypeVariable($expr$)

.getFieldType : cn.hutool.core.util.TypeUtil.getFieldType
	java.lang.Class [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getFieldType($expr$, $arg$)

.getParamType : cn.hutool.core.util.TypeUtil.getParamType
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getParamType($expr$, $arg$)

.getTypeArgument : cn.hutool.core.util.TypeUtil.getTypeArgument
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getTypeArgument($expr$, $arg$)

.getFirstParamClass : cn.hutool.core.util.TypeUtil.getFirstParamClass
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getFirstParamClass($expr$)

.isUnknown : cn.hutool.core.util.TypeUtil.isUnknown
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.isUnknown($expr$)

.getReturnClass : cn.hutool.core.util.TypeUtil.getReturnClass
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getReturnClass($expr$)

.getType : cn.hutool.core.util.TypeUtil.getType
	java.lang.reflect.Field [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getType($expr$)

.getActualTypes : cn.hutool.core.util.TypeUtil.getActualTypes
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getActualTypes($expr$, $arg$)

.getClass : cn.hutool.core.util.TypeUtil.getClass
	java.lang.reflect.Field [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getClass($expr$)
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getClass($expr$)

.getParamTypes : cn.hutool.core.util.TypeUtil.getParamTypes
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getParamTypes($expr$)

.getTypeArguments : cn.hutool.core.util.TypeUtil.getTypeArguments
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getTypeArguments($expr$)

.getParamClass : cn.hutool.core.util.TypeUtil.getParamClass
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getParamClass($expr$, $arg$)

.getReturnType : cn.hutool.core.util.TypeUtil.getReturnType
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getReturnType($expr$)

.getTypeMap : cn.hutool.core.util.TypeUtil.getTypeMap
	java.lang.Class [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getTypeMap($expr$)


## URLUtil

.encode : cn.hutool.core.util.URLUtil.encode
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encode($expr$, $arg$)

.encodeBlank : cn.hutool.core.util.URLUtil.encodeBlank
	java.lang.CharSequence [cn.hutool.core.util.URLUtil]  →  URLUtil.encodeBlank($expr$)

.getContentLength : cn.hutool.core.util.URLUtil.getContentLength
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getContentLength($expr$)

.getURLs : cn.hutool.core.util.URLUtil.getURLs
	scala.Array [cn.hutool.core.util.URLUtil]  →  URLUtil.getURLs($expr$)

.url : cn.hutool.core.util.URLUtil.url
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.url($expr$, $arg$)
	java.net.URI [cn.hutool.core.util.URLUtil]  →  URLUtil.url($expr$)

.normalize : cn.hutool.core.util.URLUtil.normalize
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.normalize($expr$, $arg$)

.getURL : cn.hutool.core.util.URLUtil.getURL
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.getURL($expr$, $arg$)
	java.io.File [cn.hutool.core.util.URLUtil]  →  URLUtil.getURL($expr$)

.completeUrl : cn.hutool.core.util.URLUtil.completeUrl
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.completeUrl($expr$, $arg$)

.getHost : cn.hutool.core.util.URLUtil.getHost
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getHost($expr$)

.getPath : cn.hutool.core.util.URLUtil.getPath
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.getPath($expr$)

.buildQuery : cn.hutool.core.util.URLUtil.buildQuery
	java.util.Map [cn.hutool.core.util.URLUtil]  →  URLUtil.buildQuery($expr$, $arg$)

.decode : cn.hutool.core.util.URLUtil.decode
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.decode($expr$, $arg$)

.getDecodedPath : cn.hutool.core.util.URLUtil.getDecodedPath
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getDecodedPath($expr$)

.toURI : cn.hutool.core.util.URLUtil.toURI
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.toURI($expr$, $arg$)
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.toURI($expr$, $arg$)

.isJarFileURL : cn.hutool.core.util.URLUtil.isJarFileURL
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.isJarFileURL($expr$)

.encodeQuery : cn.hutool.core.util.URLUtil.encodeQuery
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encodeQuery($expr$, $arg$)

.encodePathSegment : cn.hutool.core.util.URLUtil.encodePathSegment
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encodePathSegment($expr$, $arg$)

.getDataUri : cn.hutool.core.util.URLUtil.getDataUri
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.getDataUri($expr$, $arg$)

.getStringURI : cn.hutool.core.util.URLUtil.getStringURI
	java.lang.CharSequence [cn.hutool.core.util.URLUtil]  →  URLUtil.getStringURI($expr$)

.getJarFile : cn.hutool.core.util.URLUtil.getJarFile
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getJarFile($expr$)

.getDataUriBase64 : cn.hutool.core.util.URLUtil.getDataUriBase64
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.getDataUriBase64($expr$, $arg$)

.toUrlForHttp : cn.hutool.core.util.URLUtil.toUrlForHttp
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.toUrlForHttp($expr$, $arg$)

.getReader : cn.hutool.core.util.URLUtil.getReader
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getReader($expr$, $arg$)

.getStream : cn.hutool.core.util.URLUtil.getStream
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getStream($expr$)

.encodeFragment : cn.hutool.core.util.URLUtil.encodeFragment
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encodeFragment($expr$, $arg$)

.isJarURL : cn.hutool.core.util.URLUtil.isJarURL
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.isJarURL($expr$)

.isFileURL : cn.hutool.core.util.URLUtil.isFileURL
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.isFileURL($expr$)

.encodeAll : cn.hutool.core.util.URLUtil.encodeAll
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encodeAll($expr$, $arg$)


## XmlUtil

.format : cn.hutool.core.util.XmlUtil.format
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.format($expr$)
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  XmlUtil.format($expr$)

.getElement : cn.hutool.core.util.XmlUtil.getElement
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getElement($expr$, $arg$)

.xmlToMap : cn.hutool.core.util.XmlUtil.xmlToMap
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.xmlToMap($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.xmlToMap($expr$, $arg$)

.getElements : cn.hutool.core.util.XmlUtil.getElements
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getElements($expr$, $arg$)

.appendChild : cn.hutool.core.util.XmlUtil.appendChild
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.appendChild($expr$, $arg$)

.writeObjectAsXml : cn.hutool.core.util.XmlUtil.writeObjectAsXml
	java.io.File [cn.hutool.core.util.XmlUtil]  →  XmlUtil.writeObjectAsXml($expr$, $arg$)

.readObjectFromXml : cn.hutool.core.util.XmlUtil.readObjectFromXml
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readObjectFromXml($expr$)
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readObjectFromXml($expr$)
	java.io.File [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readObjectFromXml($expr$)

.parseXml : cn.hutool.core.util.XmlUtil.parseXml
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.parseXml($expr$)

.getRootElement : cn.hutool.core.util.XmlUtil.getRootElement
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getRootElement($expr$)

.createDocumentBuilderFactory : cn.hutool.core.util.XmlUtil.createDocumentBuilderFactory
	java.lang.Object [cn.hutool.core.util.XmlUtil]  →  XmlUtil.createDocumentBuilderFactory()

.getElementByXPath : cn.hutool.core.util.XmlUtil.getElementByXPath
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getElementByXPath($expr$, $arg$)

.appendText : cn.hutool.core.util.XmlUtil.appendText
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.appendText($expr$, $arg$)

.elementText : cn.hutool.core.util.XmlUtil.elementText
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  XmlUtil.elementText($expr$, $arg$)

.disableDefaultDocumentBuilderFactory : cn.hutool.core.util.XmlUtil.disableDefaultDocumentBuilderFactory
	java.lang.Object [cn.hutool.core.util.XmlUtil]  →  XmlUtil.disableDefaultDocumentBuilderFactory()

.getOwnerDocument : cn.hutool.core.util.XmlUtil.getOwnerDocument
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getOwnerDocument($expr$)

.toStr : cn.hutool.core.util.XmlUtil.toStr
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.toStr($expr$, $arg$)
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  XmlUtil.toStr($expr$, $arg$)

.readBySax : cn.hutool.core.util.XmlUtil.readBySax
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readBySax($expr$, $arg$)
	java.io.File [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readBySax($expr$, $arg$)
	java.io.Reader [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readBySax($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readBySax($expr$, $arg$)

.readXML : cn.hutool.core.util.XmlUtil.readXML
	java.io.File [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)
	java.io.InputStream [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)
	java.io.Reader [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)

.getNodeByXPath : cn.hutool.core.util.XmlUtil.getNodeByXPath
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getNodeByXPath($expr$, $arg$)

.mapToXmlStr : cn.hutool.core.util.XmlUtil.mapToXmlStr
	java.util.Map [cn.hutool.core.util.XmlUtil]  →  XmlUtil.mapToXmlStr($expr$, $arg$)

.escape : cn.hutool.core.util.XmlUtil.escape
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.escape($expr$)

.createDocumentBuilder : cn.hutool.core.util.XmlUtil.createDocumentBuilder
	java.lang.Object [cn.hutool.core.util.XmlUtil]  →  XmlUtil.createDocumentBuilder()

.mapToXml : cn.hutool.core.util.XmlUtil.mapToXml
	java.util.Map [cn.hutool.core.util.XmlUtil]  →  XmlUtil.mapToXml($expr$, $arg$)

.createXPath : cn.hutool.core.util.XmlUtil.createXPath
	java.lang.Object [cn.hutool.core.util.XmlUtil]  →  XmlUtil.createXPath()

.beanToXml : cn.hutool.core.util.XmlUtil.beanToXml
	java.lang.Object [cn.hutool.core.util.XmlUtil]  →  XmlUtil.beanToXml($expr$, $arg$)

.setNamespaceAware : cn.hutool.core.util.XmlUtil.setNamespaceAware
	BOOLEAN [cn.hutool.core.util.XmlUtil]  →  XmlUtil.setNamespaceAware($expr$)

.transform : cn.hutool.core.util.XmlUtil.transform
	javax.xml.transform.Source [cn.hutool.core.util.XmlUtil]  →  XmlUtil.transform($expr$, $arg$)

.getNodeListByXPath : cn.hutool.core.util.XmlUtil.getNodeListByXPath
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getNodeListByXPath($expr$, $arg$)

.isElement : cn.hutool.core.util.XmlUtil.isElement
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.isElement($expr$)

.unescape : cn.hutool.core.util.XmlUtil.unescape
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.unescape($expr$)

.cleanComment : cn.hutool.core.util.XmlUtil.cleanComment
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.cleanComment($expr$)

.cleanInvalid : cn.hutool.core.util.XmlUtil.cleanInvalid
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.cleanInvalid($expr$)

.xmlToBean : cn.hutool.core.util.XmlUtil.xmlToBean
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.xmlToBean($expr$, $arg$)

.write : cn.hutool.core.util.XmlUtil.write
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.write($expr$, $arg$)

.getByXPath : cn.hutool.core.util.XmlUtil.getByXPath
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getByXPath($expr$, $arg$)

.toFile : cn.hutool.core.util.XmlUtil.toFile
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  XmlUtil.toFile($expr$, $arg$)

.transElements : cn.hutool.core.util.XmlUtil.transElements
	org.w3c.dom.NodeList [cn.hutool.core.util.XmlUtil]  →  XmlUtil.transElements($expr$)
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  XmlUtil.transElements($expr$, $arg$)

.createXml : cn.hutool.core.util.XmlUtil.createXml
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.createXml($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.XmlUtil]  →  XmlUtil.createXml()

.append : cn.hutool.core.util.XmlUtil.append
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.append($expr$, $arg$)


## ZipUtil

.read : cn.hutool.core.util.ZipUtil.read
	java.util.zip.ZipInputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.read($expr$, $arg$)
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.read($expr$, $arg$)

.zip : cn.hutool.core.util.ZipUtil.zip
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zip($expr$, $arg$)
	java.util.zip.ZipOutputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zip($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zip($expr$, $arg$)
	java.io.OutputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zip($expr$, $arg$)

.unZlib : cn.hutool.core.util.ZipUtil.unZlib
	scala.Array [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unZlib($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unZlib($expr$, $arg$)

.unzip : cn.hutool.core.util.ZipUtil.unzip
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)
	java.util.zip.ZipInputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)

.toZipFile : cn.hutool.core.util.ZipUtil.toZipFile
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.toZipFile($expr$, $arg$)

.listFileNames : cn.hutool.core.util.ZipUtil.listFileNames
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.listFileNames($expr$, $arg$)

.gzip : cn.hutool.core.util.ZipUtil.gzip
	scala.Array [cn.hutool.core.util.ZipUtil]  →  ZipUtil.gzip($expr$)
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.gzip($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.gzip($expr$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.gzip($expr$, $arg$)

.unzipFileBytes : cn.hutool.core.util.ZipUtil.unzipFileBytes
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzipFileBytes($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzipFileBytes($expr$, $arg$)

.unGzip : cn.hutool.core.util.ZipUtil.unGzip
	scala.Array [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unGzip($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unGzip($expr$, $arg$)

.get : cn.hutool.core.util.ZipUtil.get
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.get($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.get($expr$, $arg$)

.zlib : cn.hutool.core.util.ZipUtil.zlib
	scala.Array [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zlib($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zlib($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zlib($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zlib($expr$, $arg$)

.getStream : cn.hutool.core.util.ZipUtil.getStream
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.getStream($expr$, $arg$)

.append : cn.hutool.core.util.ZipUtil.append
	java.nio.file.Path [cn.hutool.core.util.ZipUtil]  →  ZipUtil.append($expr$, $arg$)


## CronTimer

.interrupted : cn.hutool.cron.CronTimer.interrupted
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.interrupted()

.sleep : cn.hutool.cron.CronTimer.sleep
	LONG [cn.hutool.cron.CronTimer]  →  CronTimer.sleep($expr$, $arg$)

.yield : cn.hutool.cron.CronTimer.yield
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.yield()

.enumerate : cn.hutool.cron.CronTimer.enumerate
	scala.Array [cn.hutool.cron.CronTimer]  →  CronTimer.enumerate($expr$)

.onSpinWait : cn.hutool.cron.CronTimer.onSpinWait
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.onSpinWait()

.setDefaultUncaughtExceptionHandler : cn.hutool.cron.CronTimer.setDefaultUncaughtExceptionHandler
	java.lang.Thread.UncaughtExceptionHandler [cn.hutool.cron.CronTimer]  →  CronTimer.setDefaultUncaughtExceptionHandler($expr$)

.getDefaultUncaughtExceptionHandler : cn.hutool.cron.CronTimer.getDefaultUncaughtExceptionHandler
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.getDefaultUncaughtExceptionHandler()

.currentThread : cn.hutool.cron.CronTimer.currentThread
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.currentThread()

.dumpStack : cn.hutool.cron.CronTimer.dumpStack
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.dumpStack()

.activeCount : cn.hutool.cron.CronTimer.activeCount
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.activeCount()

.getAllStackTraces : cn.hutool.cron.CronTimer.getAllStackTraces
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.getAllStackTraces()

.holdsLock : cn.hutool.cron.CronTimer.holdsLock
	java.lang.Object [cn.hutool.cron.CronTimer]  →  CronTimer.holdsLock($expr$)


## CronUtil

.stop : cn.hutool.cron.CronUtil.stop
	java.lang.Object [cn.hutool.cron.CronUtil]  →  CronUtil.stop()

.setCronSetting : cn.hutool.cron.CronUtil.setCronSetting
	java.lang.String [cn.hutool.cron.CronUtil]  →  CronUtil.setCronSetting($expr$)
	cn.hutool.setting.Setting [cn.hutool.cron.CronUtil]  →  CronUtil.setCronSetting($expr$)

.getScheduler : cn.hutool.cron.CronUtil.getScheduler
	java.lang.Object [cn.hutool.cron.CronUtil]  →  CronUtil.getScheduler()

.setMatchSecond : cn.hutool.cron.CronUtil.setMatchSecond
	BOOLEAN [cn.hutool.cron.CronUtil]  →  CronUtil.setMatchSecond($expr$)

.remove : cn.hutool.cron.CronUtil.remove
	java.lang.String [cn.hutool.cron.CronUtil]  →  CronUtil.remove($expr$)

.schedule : cn.hutool.cron.CronUtil.schedule
	java.lang.String [cn.hutool.cron.CronUtil]  →  CronUtil.schedule($expr$, $arg$)
	cn.hutool.setting.Setting [cn.hutool.cron.CronUtil]  →  CronUtil.schedule($expr$)

.restart : cn.hutool.cron.CronUtil.restart
	java.lang.Object [cn.hutool.cron.CronUtil]  →  CronUtil.restart()

.start : cn.hutool.cron.CronUtil.start
	BOOLEAN [cn.hutool.cron.CronUtil]  →  CronUtil.start($expr$)
	java.lang.Object [cn.hutool.cron.CronUtil]  →  CronUtil.start()

.updatePattern : cn.hutool.cron.CronUtil.updatePattern
	java.lang.String [cn.hutool.cron.CronUtil]  →  CronUtil.updatePattern($expr$, $arg$)


## CronPatternUtil

.nextDateAfter : cn.hutool.cron.pattern.CronPatternUtil.nextDateAfter
	cn.hutool.cron.pattern.CronPattern [cn.hutool.cron.pattern.CronPatternUtil]  →  CronPatternUtil.nextDateAfter($expr$, $arg$)

.matchedDates : cn.hutool.cron.pattern.CronPatternUtil.matchedDates
	java.lang.String [cn.hutool.cron.pattern.CronPatternUtil]  →  CronPatternUtil.matchedDates($expr$, $arg$)
	cn.hutool.cron.pattern.CronPattern [cn.hutool.cron.pattern.CronPatternUtil]  →  CronPatternUtil.matchedDates($expr$, $arg$)


## ValueMatcherBuilder

.build : cn.hutool.cron.pattern.matcher.ValueMatcherBuilder.build
	java.lang.String [cn.hutool.cron.pattern.matcher.ValueMatcherBuilder]  →  ValueMatcherBuilder.build($expr$, $arg$)


## ASN1Util

.encode : cn.hutool.crypto.ASN1Util.encode
	java.lang.String [cn.hutool.crypto.ASN1Util]  →  ASN1Util.encode($expr$, $arg$)

.decode : cn.hutool.crypto.ASN1Util.decode
	java.io.InputStream [cn.hutool.crypto.ASN1Util]  →  ASN1Util.decode($expr$)

.encodeTo : cn.hutool.crypto.ASN1Util.encodeTo
	java.lang.String [cn.hutool.crypto.ASN1Util]  →  ASN1Util.encodeTo($expr$, $arg$)

.encodeDer : cn.hutool.crypto.ASN1Util.encodeDer
	scala.Array [cn.hutool.crypto.ASN1Util]  →  ASN1Util.encodeDer($expr$)

.getDumpStr : cn.hutool.crypto.ASN1Util.getDumpStr
	java.io.InputStream [cn.hutool.crypto.ASN1Util]  →  ASN1Util.getDumpStr($expr$)


## BCUtil

.toDomainParams : cn.hutool.crypto.BCUtil.toDomainParams
	java.lang.String [cn.hutool.crypto.BCUtil]  →  BCUtil.toDomainParams($expr$)
	org.bouncycastle.jce.spec.ECParameterSpec [cn.hutool.crypto.BCUtil]  →  BCUtil.toDomainParams($expr$)
	org.bouncycastle.asn1.x9.X9ECParameters [cn.hutool.crypto.BCUtil]  →  BCUtil.toDomainParams($expr$)

.decodeECPoint : cn.hutool.crypto.BCUtil.decodeECPoint
	scala.Array [cn.hutool.crypto.BCUtil]  →  BCUtil.decodeECPoint($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.BCUtil]  →  BCUtil.decodeECPoint($expr$, $arg$)

.readPemPublicKey : cn.hutool.crypto.BCUtil.readPemPublicKey
	java.io.InputStream [cn.hutool.crypto.BCUtil]  →  BCUtil.readPemPublicKey($expr$)

.toParams : cn.hutool.crypto.BCUtil.toParams
	scala.Array [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$, $arg$)
	java.security.Key [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$)
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$)
	java.math.BigInteger [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$, $arg$)
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$)
	java.lang.String [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$, $arg$)

.encodeECPrivateKey : cn.hutool.crypto.BCUtil.encodeECPrivateKey
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  BCUtil.encodeECPrivateKey($expr$)

.toSm2Params : cn.hutool.crypto.BCUtil.toSm2Params
	scala.Array [cn.hutool.crypto.BCUtil]  →  BCUtil.toSm2Params($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.BCUtil]  →  BCUtil.toSm2Params($expr$, $arg$)
	java.math.BigInteger [cn.hutool.crypto.BCUtil]  →  BCUtil.toSm2Params($expr$)

.encodeECPublicKey : cn.hutool.crypto.BCUtil.encodeECPublicKey
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  BCUtil.encodeECPublicKey($expr$, $arg$)

.toPkcs1 : cn.hutool.crypto.BCUtil.toPkcs1
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  BCUtil.toPkcs1($expr$)
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  BCUtil.toPkcs1($expr$)

.readPemPrivateKey : cn.hutool.crypto.BCUtil.readPemPrivateKey
	java.io.InputStream [cn.hutool.crypto.BCUtil]  →  BCUtil.readPemPrivateKey($expr$)


## ECKeyUtil

.createOpenSSHPublicKeySpec : cn.hutool.crypto.ECKeyUtil.createOpenSSHPublicKeySpec
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.createOpenSSHPublicKeySpec($expr$)

.decodePrivateKeyParams : cn.hutool.crypto.ECKeyUtil.decodePrivateKeyParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.decodePrivateKeyParams($expr$)

.toPublicParams : cn.hutool.crypto.ECKeyUtil.toPublicParams
	org.bouncycastle.math.ec.ECPoint [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$, $arg$)
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$, $arg$)
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$, $arg$)
	java.security.PublicKey [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$)
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$, $arg$)

.toPrivateParams : cn.hutool.crypto.ECKeyUtil.toPrivateParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPrivateParams($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPrivateParams($expr$, $arg$)
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPrivateParams($expr$, $arg$)
	java.security.PrivateKey [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPrivateParams($expr$)

.toSm2PublicParams : cn.hutool.crypto.ECKeyUtil.toSm2PublicParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PublicParams($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PublicParams($expr$, $arg$)

.toParams : cn.hutool.crypto.ECKeyUtil.toParams
	java.security.Key [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toParams($expr$)

.getPublicParams : cn.hutool.crypto.ECKeyUtil.getPublicParams
	org.bouncycastle.crypto.params.ECPrivateKeyParameters [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.getPublicParams($expr$)

.toSm2PrivateKey : cn.hutool.crypto.ECKeyUtil.toSm2PrivateKey
	org.bouncycastle.asn1.sec.ECPrivateKey [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PrivateKey($expr$)

.decodePublicKeyParams : cn.hutool.crypto.ECKeyUtil.decodePublicKeyParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.decodePublicKeyParams($expr$)

.toSm2PrivateParams : cn.hutool.crypto.ECKeyUtil.toSm2PrivateParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PrivateParams($expr$)
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PrivateParams($expr$)
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PrivateParams($expr$)

.createOpenSSHPrivateKeySpec : cn.hutool.crypto.ECKeyUtil.createOpenSSHPrivateKeySpec
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.createOpenSSHPrivateKeySpec($expr$)


## KeyUtil

.readJKSKeyStore : cn.hutool.crypto.KeyUtil.readJKSKeyStore
	java.io.File [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readJKSKeyStore($expr$, $arg$)
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readJKSKeyStore($expr$, $arg$)

.getKeyGenerator : cn.hutool.crypto.KeyUtil.getKeyGenerator
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyGenerator($expr$)

.generateKeyPair : cn.hutool.crypto.KeyUtil.generateKeyPair
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateKeyPair($expr$, $arg$)

.generateKey : cn.hutool.crypto.KeyUtil.generateKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateKey($expr$, $arg$)

.getKeyPair : cn.hutool.crypto.KeyUtil.getKeyPair
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyPair($expr$, $arg$)
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyPair($expr$, $arg$)

.decodeECPoint : cn.hutool.crypto.KeyUtil.decodeECPoint
	scala.Array [cn.hutool.crypto.KeyUtil]  →  KeyUtil.decodeECPoint($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.decodeECPoint($expr$, $arg$)

.getMainAlgorithm : cn.hutool.crypto.KeyUtil.getMainAlgorithm
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getMainAlgorithm($expr$)

.readKeyStore : cn.hutool.crypto.KeyUtil.readKeyStore
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readKeyStore($expr$, $arg$)

.generatePublicKey : cn.hutool.crypto.KeyUtil.generatePublicKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generatePublicKey($expr$, $arg$)

.readX509Certificate : cn.hutool.crypto.KeyUtil.readX509Certificate
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readX509Certificate($expr$, $arg$)

.generatePBEKey : cn.hutool.crypto.KeyUtil.generatePBEKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generatePBEKey($expr$, $arg$)

.readPublicKeyFromCert : cn.hutool.crypto.KeyUtil.readPublicKeyFromCert
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readPublicKeyFromCert($expr$)

.getRSAPublicKey : cn.hutool.crypto.KeyUtil.getRSAPublicKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getRSAPublicKey($expr$, $arg$)
	java.math.BigInteger [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getRSAPublicKey($expr$, $arg$)
	java.security.PrivateKey [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getRSAPublicKey($expr$)

.getKeyPairGenerator : cn.hutool.crypto.KeyUtil.getKeyPairGenerator
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyPairGenerator($expr$)

.generateRSAPublicKey : cn.hutool.crypto.KeyUtil.generateRSAPublicKey
	scala.Array [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateRSAPublicKey($expr$)

.getSecretKeyFactory : cn.hutool.crypto.KeyUtil.getSecretKeyFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getSecretKeyFactory($expr$)

.generatePrivateKey : cn.hutool.crypto.KeyUtil.generatePrivateKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generatePrivateKey($expr$, $arg$)
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generatePrivateKey($expr$, $arg$)

.generateRSAPrivateKey : cn.hutool.crypto.KeyUtil.generateRSAPrivateKey
	scala.Array [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateRSAPrivateKey($expr$)

.readCertificate : cn.hutool.crypto.KeyUtil.readCertificate
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readCertificate($expr$, $arg$)

.encodeECPublicKey : cn.hutool.crypto.KeyUtil.encodeECPublicKey
	java.security.PublicKey [cn.hutool.crypto.KeyUtil]  →  KeyUtil.encodeECPublicKey($expr$)

.getAlgorithmAfterWith : cn.hutool.crypto.KeyUtil.getAlgorithmAfterWith
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getAlgorithmAfterWith($expr$)

.getCertificateFactory : cn.hutool.crypto.KeyUtil.getCertificateFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getCertificateFactory($expr$)

.readPKCS12KeyStore : cn.hutool.crypto.KeyUtil.readPKCS12KeyStore
	java.io.File [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readPKCS12KeyStore($expr$, $arg$)
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readPKCS12KeyStore($expr$, $arg$)

.generateDESKey : cn.hutool.crypto.KeyUtil.generateDESKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateDESKey($expr$, $arg$)

.getCertificate : cn.hutool.crypto.KeyUtil.getCertificate
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getCertificate($expr$, $arg$)

.getKeyFactory : cn.hutool.crypto.KeyUtil.getKeyFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyFactory($expr$)


## PemUtil

.readPemPublicKey : cn.hutool.crypto.PemUtil.readPemPublicKey
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemPublicKey($expr$)

.readPemKey : cn.hutool.crypto.PemUtil.readPemKey
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemKey($expr$)

.readPemObject : cn.hutool.crypto.PemUtil.readPemObject
	java.io.Reader [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemObject($expr$)
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemObject($expr$)

.writePemObject : cn.hutool.crypto.PemUtil.writePemObject
	java.lang.String [cn.hutool.crypto.PemUtil]  →  PemUtil.writePemObject($expr$, $arg$)
	org.bouncycastle.util.io.pem.PemObjectGenerator [cn.hutool.crypto.PemUtil]  →  PemUtil.writePemObject($expr$, $arg$)

.readSm2PemPrivateKey : cn.hutool.crypto.PemUtil.readSm2PemPrivateKey
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readSm2PemPrivateKey($expr$)

.readPemPrivateKey : cn.hutool.crypto.PemUtil.readPemPrivateKey
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemPrivateKey($expr$)

.toPem : cn.hutool.crypto.PemUtil.toPem
	java.lang.String [cn.hutool.crypto.PemUtil]  →  PemUtil.toPem($expr$, $arg$)

.readPem : cn.hutool.crypto.PemUtil.readPem
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPem($expr$)


## ProviderFactory

.createBouncyCastleProvider : cn.hutool.crypto.ProviderFactory.createBouncyCastleProvider
	java.lang.Object [cn.hutool.crypto.ProviderFactory]  →  ProviderFactory.createBouncyCastleProvider()


## SecureUtil

.readJKSKeyStore : cn.hutool.crypto.SecureUtil.readJKSKeyStore
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.readJKSKeyStore($expr$, $arg$)

.sha1 : cn.hutool.crypto.SecureUtil.sha1
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha1($expr$)
	java.io.File [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha1($expr$)
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha1($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha1()

.des : cn.hutool.crypto.SecureUtil.des
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.des($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.des()

.generateKeyPair : cn.hutool.crypto.SecureUtil.generateKeyPair
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateKeyPair($expr$, $arg$)

.zuc128 : cn.hutool.crypto.SecureUtil.zuc128
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.zuc128($expr$, $arg$)

.createMessageDigest : cn.hutool.crypto.SecureUtil.createMessageDigest
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.createMessageDigest($expr$)

.generateKey : cn.hutool.crypto.SecureUtil.generateKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateKey($expr$, $arg$)

.createCipher : cn.hutool.crypto.SecureUtil.createCipher
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.createCipher($expr$)

.aes : cn.hutool.crypto.SecureUtil.aes
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.aes($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.aes()

.signParamsMd5 : cn.hutool.crypto.SecureUtil.signParamsMd5
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParamsMd5($expr$, $arg$)

.createMac : cn.hutool.crypto.SecureUtil.createMac
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.createMac($expr$)

.readKeyStore : cn.hutool.crypto.SecureUtil.readKeyStore
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.readKeyStore($expr$, $arg$)

.addProvider : cn.hutool.crypto.SecureUtil.addProvider
	java.security.Provider [cn.hutool.crypto.SecureUtil]  →  SecureUtil.addProvider($expr$)

.hmac : cn.hutool.crypto.SecureUtil.hmac
	cn.hutool.crypto.digest.HmacAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmac($expr$, $arg$)

.generatePublicKey : cn.hutool.crypto.SecureUtil.generatePublicKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generatePublicKey($expr$, $arg$)

.rsa : cn.hutool.crypto.SecureUtil.rsa
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.rsa($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.rsa($expr$, $arg$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.rsa()

.hmacMd5 : cn.hutool.crypto.SecureUtil.hmacMd5
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacMd5($expr$)
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacMd5($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacMd5()

.readX509Certificate : cn.hutool.crypto.SecureUtil.readX509Certificate
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.readX509Certificate($expr$, $arg$)

.fpe : cn.hutool.crypto.SecureUtil.fpe
	cn.hutool.crypto.symmetric.fpe.FPE.FPEMode [cn.hutool.crypto.SecureUtil]  →  SecureUtil.fpe($expr$, $arg$)

.pbkdf2 : cn.hutool.crypto.SecureUtil.pbkdf2
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.pbkdf2($expr$, $arg$)

.generatePBEKey : cn.hutool.crypto.SecureUtil.generatePBEKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generatePBEKey($expr$, $arg$)

.createSignature : cn.hutool.crypto.SecureUtil.createSignature
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.createSignature($expr$)

.decode : cn.hutool.crypto.SecureUtil.decode
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.decode($expr$)

.signParams : cn.hutool.crypto.SecureUtil.signParams
	cn.hutool.crypto.symmetric.SymmetricCrypto [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParams($expr$, $arg$)
	cn.hutool.crypto.digest.DigestAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParams($expr$, $arg$)

.sha256 : cn.hutool.crypto.SecureUtil.sha256
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha256($expr$)
	java.io.File [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha256($expr$)
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha256($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha256()

.desede : cn.hutool.crypto.SecureUtil.desede
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.desede($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.desede()

.signParamsSha1 : cn.hutool.crypto.SecureUtil.signParamsSha1
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParamsSha1($expr$, $arg$)

.sign : cn.hutool.crypto.SecureUtil.sign
	cn.hutool.crypto.asymmetric.SignAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sign($expr$, $arg$)

.hmacSha256 : cn.hutool.crypto.SecureUtil.hmacSha256
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha256($expr$)
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha256($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha256()

.md5 : cn.hutool.crypto.SecureUtil.md5
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.md5($expr$)
	java.io.File [cn.hutool.crypto.SecureUtil]  →  SecureUtil.md5($expr$)
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.md5($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.md5()

.generatePrivateKey : cn.hutool.crypto.SecureUtil.generatePrivateKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generatePrivateKey($expr$, $arg$)
	java.security.KeyStore [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generatePrivateKey($expr$, $arg$)

.readCertificate : cn.hutool.crypto.SecureUtil.readCertificate
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.readCertificate($expr$, $arg$)

.rc4 : cn.hutool.crypto.SecureUtil.rc4
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.rc4($expr$)

.generateAlgorithm : cn.hutool.crypto.SecureUtil.generateAlgorithm
	cn.hutool.crypto.asymmetric.AsymmetricAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateAlgorithm($expr$, $arg$)

.getAlgorithmAfterWith : cn.hutool.crypto.SecureUtil.getAlgorithmAfterWith
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.getAlgorithmAfterWith($expr$)

.signParamsSha256 : cn.hutool.crypto.SecureUtil.signParamsSha256
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParamsSha256($expr$, $arg$)

.generateDESKey : cn.hutool.crypto.SecureUtil.generateDESKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateDESKey($expr$, $arg$)

.zuc256 : cn.hutool.crypto.SecureUtil.zuc256
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.zuc256($expr$, $arg$)

.getCertificate : cn.hutool.crypto.SecureUtil.getCertificate
	java.security.KeyStore [cn.hutool.crypto.SecureUtil]  →  SecureUtil.getCertificate($expr$, $arg$)

.disableBouncyCastle : cn.hutool.crypto.SecureUtil.disableBouncyCastle
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.disableBouncyCastle()

.generateSignature : cn.hutool.crypto.SecureUtil.generateSignature
	cn.hutool.crypto.asymmetric.AsymmetricAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateSignature($expr$, $arg$)

.hmacSha1 : cn.hutool.crypto.SecureUtil.hmacSha1
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha1($expr$)
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha1($expr$)
	java.lang.Object [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha1()


## SignUtil

.signParamsMd5 : cn.hutool.crypto.SignUtil.signParamsMd5
	java.util.Map [cn.hutool.crypto.SignUtil]  →  SignUtil.signParamsMd5($expr$, $arg$)

.signParams : cn.hutool.crypto.SignUtil.signParams
	cn.hutool.crypto.symmetric.SymmetricCrypto [cn.hutool.crypto.SignUtil]  →  SignUtil.signParams($expr$, $arg$)
	cn.hutool.crypto.digest.DigestAlgorithm [cn.hutool.crypto.SignUtil]  →  SignUtil.signParams($expr$, $arg$)

.signParamsSha1 : cn.hutool.crypto.SignUtil.signParamsSha1
	java.util.Map [cn.hutool.crypto.SignUtil]  →  SignUtil.signParamsSha1($expr$, $arg$)

.sign : cn.hutool.crypto.SignUtil.sign
	cn.hutool.crypto.asymmetric.SignAlgorithm [cn.hutool.crypto.SignUtil]  →  SignUtil.sign($expr$, $arg$)

.signParamsSha256 : cn.hutool.crypto.SignUtil.signParamsSha256
	java.util.Map [cn.hutool.crypto.SignUtil]  →  SignUtil.signParamsSha256($expr$, $arg$)


## SmUtil

.changeC1C2C3ToC1C3C2 : cn.hutool.crypto.SmUtil.changeC1C2C3ToC1C3C2
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.changeC1C2C3ToC1C3C2($expr$, $arg$)

.changeC1C3C2ToC1C2C3 : cn.hutool.crypto.SmUtil.changeC1C3C2ToC1C2C3
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.changeC1C3C2ToC1C2C3($expr$, $arg$)

.sm2 : cn.hutool.crypto.SmUtil.sm2
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2($expr$, $arg$)
	org.bouncycastle.crypto.params.ECPrivateKeyParameters [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2($expr$, $arg$)
	java.security.PrivateKey [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2($expr$, $arg$)
	java.lang.Object [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2()

.sm3 : cn.hutool.crypto.SmUtil.sm3
	java.lang.String [cn.hutool.crypto.SmUtil]  →  SmUtil.sm3($expr$)
	java.io.File [cn.hutool.crypto.SmUtil]  →  SmUtil.sm3($expr$)
	java.io.InputStream [cn.hutool.crypto.SmUtil]  →  SmUtil.sm3($expr$)
	java.lang.Object [cn.hutool.crypto.SmUtil]  →  SmUtil.sm3()

.rsPlainToAsn1 : cn.hutool.crypto.SmUtil.rsPlainToAsn1
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.rsPlainToAsn1($expr$)

.sm3WithSalt : cn.hutool.crypto.SmUtil.sm3WithSalt
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.sm3WithSalt($expr$)

.rsAsn1ToPlain : cn.hutool.crypto.SmUtil.rsAsn1ToPlain
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.rsAsn1ToPlain($expr$)

.createHmacSm3Engine : cn.hutool.crypto.SmUtil.createHmacSm3Engine
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.createHmacSm3Engine($expr$)

.sm4 : cn.hutool.crypto.SmUtil.sm4
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.sm4($expr$)
	java.lang.Object [cn.hutool.crypto.SmUtil]  →  SmUtil.sm4()

.hmacSm3 : cn.hutool.crypto.SmUtil.hmacSm3
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.hmacSm3($expr$)


## RSA

.generatePublicKey : cn.hutool.crypto.asymmetric.RSA.generatePublicKey
	java.math.BigInteger [cn.hutool.crypto.asymmetric.RSA]  →  RSA.generatePublicKey($expr$, $arg$)

.generatePrivateKey : cn.hutool.crypto.asymmetric.RSA.generatePrivateKey
	java.math.BigInteger [cn.hutool.crypto.asymmetric.RSA]  →  RSA.generatePrivateKey($expr$, $arg$)


## BCrypt

.gensalt : cn.hutool.crypto.digest.BCrypt.gensalt
	INT [cn.hutool.crypto.digest.BCrypt]  →  BCrypt.gensalt($expr$, $arg$)
	java.lang.Object [cn.hutool.crypto.digest.BCrypt]  →  BCrypt.gensalt()

.hashpw : cn.hutool.crypto.digest.BCrypt.hashpw
	java.lang.String [cn.hutool.crypto.digest.BCrypt]  →  BCrypt.hashpw($expr$, $arg$)

.checkpw : cn.hutool.crypto.digest.BCrypt.checkpw
	java.lang.String [cn.hutool.crypto.digest.BCrypt]  →  BCrypt.checkpw($expr$, $arg$)


## DigestUtil

.sha1 : cn.hutool.crypto.digest.DigestUtil.sha1
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1($expr$)

.bcryptCheck : cn.hutool.crypto.digest.DigestUtil.bcryptCheck
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.bcryptCheck($expr$, $arg$)

.digester : cn.hutool.crypto.digest.DigestUtil.digester
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.digester($expr$)
	cn.hutool.crypto.digest.DigestAlgorithm [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.digester($expr$)

.sha1Hex : cn.hutool.crypto.digest.DigestUtil.sha1Hex
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1Hex($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1Hex($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1Hex($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1Hex($expr$)

.hmac : cn.hutool.crypto.digest.DigestUtil.hmac
	cn.hutool.crypto.digest.HmacAlgorithm [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.hmac($expr$, $arg$)

.md5Hex16 : cn.hutool.crypto.digest.DigestUtil.md5Hex16
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex16($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex16($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex16($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex16($expr$)

.sha256 : cn.hutool.crypto.digest.DigestUtil.sha256
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256($expr$)

.sha256Hex : cn.hutool.crypto.digest.DigestUtil.sha256Hex
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256Hex($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256Hex($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256Hex($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256Hex($expr$)

.md5 : cn.hutool.crypto.digest.DigestUtil.md5
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5($expr$)

.bcrypt : cn.hutool.crypto.digest.DigestUtil.bcrypt
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.bcrypt($expr$)

.md5HexTo16 : cn.hutool.crypto.digest.DigestUtil.md5HexTo16
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5HexTo16($expr$)

.md5Hex : cn.hutool.crypto.digest.DigestUtil.md5Hex
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex($expr$)


## MD5

.create : cn.hutool.crypto.digest.MD5.create
	java.lang.Object [cn.hutool.crypto.digest.MD5]  →  MD5.create()


## SM3

.create : cn.hutool.crypto.digest.SM3.create
	java.lang.Object [cn.hutool.crypto.digest.SM3]  →  SM3.create()


## MacEngineFactory

.createEngine : cn.hutool.crypto.digest.mac.MacEngineFactory.createEngine
	java.lang.String [cn.hutool.crypto.digest.mac.MacEngineFactory]  →  MacEngineFactory.createEngine($expr$, $arg$)


## HOTP

.generateSecretKey : cn.hutool.crypto.digest.otp.HOTP.generateSecretKey
	INT [cn.hutool.crypto.digest.otp.HOTP]  →  HOTP.generateSecretKey($expr$)


## TOTP

.generateGoogleSecretKey : cn.hutool.crypto.digest.otp.TOTP.generateGoogleSecretKey
	java.lang.String [cn.hutool.crypto.digest.otp.TOTP]  →  TOTP.generateGoogleSecretKey($expr$, $arg$)

.generateSecretKey : cn.hutool.crypto.digest.otp.TOTP.generateSecretKey
	INT [cn.hutool.crypto.digest.otp.TOTP]  →  TOTP.generateSecretKey($expr$)


## Vigenere

.decrypt : cn.hutool.crypto.symmetric.Vigenere.decrypt
	java.lang.CharSequence [cn.hutool.crypto.symmetric.Vigenere]  →  Vigenere.decrypt($expr$, $arg$)

.encrypt : cn.hutool.crypto.symmetric.Vigenere.encrypt
	java.lang.CharSequence [cn.hutool.crypto.symmetric.Vigenere]  →  Vigenere.encrypt($expr$, $arg$)


## ZUC

.generateKey : cn.hutool.crypto.symmetric.ZUC.generateKey
	cn.hutool.crypto.symmetric.ZUC.ZUCAlgorithm [cn.hutool.crypto.symmetric.ZUC]  →  ZUC.generateKey($expr$)


## ActiveEntity

.of : cn.hutool.db.ActiveEntity.of
	scala.Array [cn.hutool.db.ActiveEntity]  →  ActiveEntity.of($expr$)

.parseWithUnderlineCase : cn.hutool.db.ActiveEntity.parseWithUnderlineCase
	java.lang.Object [cn.hutool.db.ActiveEntity]  →  ActiveEntity.parseWithUnderlineCase($expr$)

.parse : cn.hutool.db.ActiveEntity.parse
	java.lang.Object [cn.hutool.db.ActiveEntity]  →  ActiveEntity.parse($expr$, $arg$)

.create : cn.hutool.db.ActiveEntity.create
	java.lang.String [cn.hutool.db.ActiveEntity]  →  ActiveEntity.create($expr$)
	java.lang.Object [cn.hutool.db.ActiveEntity]  →  ActiveEntity.create()


## Db

.use : cn.hutool.db.Db.use
	java.lang.String [cn.hutool.db.Db]  →  Db.use($expr$)
	javax.sql.DataSource [cn.hutool.db.Db]  →  Db.use($expr$, $arg$)
	java.lang.Object [cn.hutool.db.Db]  →  Db.use()


## DbUtil

.setCaseInsensitiveGlobal : cn.hutool.db.DbUtil.setCaseInsensitiveGlobal
	BOOLEAN [cn.hutool.db.DbUtil]  →  DbUtil.setCaseInsensitiveGlobal($expr$)

.getJndiDs : cn.hutool.db.DbUtil.getJndiDs
	java.lang.String [cn.hutool.db.DbUtil]  →  DbUtil.getJndiDs($expr$)

.setShowSqlGlobal : cn.hutool.db.DbUtil.setShowSqlGlobal
	BOOLEAN [cn.hutool.db.DbUtil]  →  DbUtil.setShowSqlGlobal($expr$, $arg$)
	cn.hutool.setting.Setting [cn.hutool.db.DbUtil]  →  DbUtil.setShowSqlGlobal($expr$)

.newSession : cn.hutool.db.DbUtil.newSession
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  DbUtil.newSession($expr$)
	java.lang.Object [cn.hutool.db.DbUtil]  →  DbUtil.newSession()

.newSqlConnRunner : cn.hutool.db.DbUtil.newSqlConnRunner
	java.sql.Connection [cn.hutool.db.DbUtil]  →  DbUtil.newSqlConnRunner($expr$)
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  DbUtil.newSqlConnRunner($expr$)
	cn.hutool.db.dialect.Dialect [cn.hutool.db.DbUtil]  →  DbUtil.newSqlConnRunner($expr$)

.setReturnGeneratedKeyGlobal : cn.hutool.db.DbUtil.setReturnGeneratedKeyGlobal
	BOOLEAN [cn.hutool.db.DbUtil]  →  DbUtil.setReturnGeneratedKeyGlobal($expr$)

.use : cn.hutool.db.DbUtil.use
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  DbUtil.use($expr$, $arg$)
	java.lang.Object [cn.hutool.db.DbUtil]  →  DbUtil.use()

.removeShowSqlParams : cn.hutool.db.DbUtil.removeShowSqlParams
	cn.hutool.setting.Setting [cn.hutool.db.DbUtil]  →  DbUtil.removeShowSqlParams($expr$)

.close : cn.hutool.db.DbUtil.close
	scala.Array [cn.hutool.db.DbUtil]  →  DbUtil.close($expr$)

.getDs : cn.hutool.db.DbUtil.getDs
	java.lang.String [cn.hutool.db.DbUtil]  →  DbUtil.getDs($expr$)
	java.lang.Object [cn.hutool.db.DbUtil]  →  DbUtil.getDs()

.getJndiDsWithLog : cn.hutool.db.DbUtil.getJndiDsWithLog
	java.lang.String [cn.hutool.db.DbUtil]  →  DbUtil.getJndiDsWithLog($expr$)


## Entity

.of : cn.hutool.db.Entity.of
	scala.Array [cn.hutool.db.Entity]  →  Entity.of($expr$)

.parseWithUnderlineCase : cn.hutool.db.Entity.parseWithUnderlineCase
	java.lang.Object [cn.hutool.db.Entity]  →  Entity.parseWithUnderlineCase($expr$)

.parse : cn.hutool.db.Entity.parse
	java.lang.Object [cn.hutool.db.Entity]  →  Entity.parse($expr$, $arg$)

.create : cn.hutool.db.Entity.create
	java.lang.String [cn.hutool.db.Entity]  →  Entity.create($expr$)
	java.lang.Object [cn.hutool.db.Entity]  →  Entity.create()


## GlobalDbConfig

.setCaseInsensitive : cn.hutool.db.GlobalDbConfig.setCaseInsensitive
	BOOLEAN [cn.hutool.db.GlobalDbConfig]  →  GlobalDbConfig.setCaseInsensitive($expr$)

.setReturnGeneratedKey : cn.hutool.db.GlobalDbConfig.setReturnGeneratedKey
	BOOLEAN [cn.hutool.db.GlobalDbConfig]  →  GlobalDbConfig.setReturnGeneratedKey($expr$)

.setShowSql : cn.hutool.db.GlobalDbConfig.setShowSql
	BOOLEAN [cn.hutool.db.GlobalDbConfig]  →  GlobalDbConfig.setShowSql($expr$, $arg$)


## Page

.of : cn.hutool.db.Page.of
	INT [cn.hutool.db.Page]  →  Page.of($expr$, $arg$)


## Session

.create : cn.hutool.db.Session.create
	java.lang.String [cn.hutool.db.Session]  →  Session.create($expr$)
	javax.sql.DataSource [cn.hutool.db.Session]  →  Session.create($expr$)
	java.lang.Object [cn.hutool.db.Session]  →  Session.create()


## SqlConnRunner

.create : cn.hutool.db.SqlConnRunner.create
	java.lang.String [cn.hutool.db.SqlConnRunner]  →  SqlConnRunner.create($expr$)
	javax.sql.DataSource [cn.hutool.db.SqlConnRunner]  →  SqlConnRunner.create($expr$)
	cn.hutool.db.dialect.Dialect [cn.hutool.db.SqlConnRunner]  →  SqlConnRunner.create($expr$)


## StatementUtil

.prepareStatementForBatch : cn.hutool.db.StatementUtil.prepareStatementForBatch
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  StatementUtil.prepareStatementForBatch($expr$, $arg$)

.prepareCall : cn.hutool.db.StatementUtil.prepareCall
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  StatementUtil.prepareCall($expr$, $arg$)

.getGeneratedKeys : cn.hutool.db.StatementUtil.getGeneratedKeys
	java.sql.Statement [cn.hutool.db.StatementUtil]  →  StatementUtil.getGeneratedKeys($expr$, $arg$)

.fillParams : cn.hutool.db.StatementUtil.fillParams
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  StatementUtil.fillParams($expr$, $arg$)

.getTypeOfNull : cn.hutool.db.StatementUtil.getTypeOfNull
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  StatementUtil.getTypeOfNull($expr$, $arg$)

.setParam : cn.hutool.db.StatementUtil.setParam
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  StatementUtil.setParam($expr$, $arg$)

.getGeneratedKeyOfLong : cn.hutool.db.StatementUtil.getGeneratedKeyOfLong
	java.sql.Statement [cn.hutool.db.StatementUtil]  →  StatementUtil.getGeneratedKeyOfLong($expr$)

.prepareStatement : cn.hutool.db.StatementUtil.prepareStatement
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  StatementUtil.prepareStatement($expr$, $arg$)


## DialectFactory

.identifyDriver : cn.hutool.db.dialect.DialectFactory.identifyDriver
	java.lang.String [cn.hutool.db.dialect.DialectFactory]  →  DialectFactory.identifyDriver($expr$)

.getDialect : cn.hutool.db.dialect.DialectFactory.getDialect
	javax.sql.DataSource [cn.hutool.db.dialect.DialectFactory]  →  DialectFactory.getDialect($expr$)

.newDialect : cn.hutool.db.dialect.DialectFactory.newDialect
	java.sql.Connection [cn.hutool.db.dialect.DialectFactory]  →  DialectFactory.newDialect($expr$)
	java.lang.String [cn.hutool.db.dialect.DialectFactory]  →  DialectFactory.newDialect($expr$)
	javax.sql.DataSource [cn.hutool.db.dialect.DialectFactory]  →  DialectFactory.newDialect($expr$)


## DriverUtil

.identifyDriver : cn.hutool.db.dialect.DriverUtil.identifyDriver
	java.sql.Connection [cn.hutool.db.dialect.DriverUtil]  →  DriverUtil.identifyDriver($expr$)
	java.lang.String [cn.hutool.db.dialect.DriverUtil]  →  DriverUtil.identifyDriver($expr$)
	javax.sql.DataSource [cn.hutool.db.dialect.DriverUtil]  →  DriverUtil.identifyDriver($expr$)


## OracleDialect

.isNextVal : cn.hutool.db.dialect.impl.OracleDialect.isNextVal
	java.lang.Object [cn.hutool.db.dialect.impl.OracleDialect]  →  OracleDialect.isNextVal($expr$)


## AbstractDSFactory

.get : cn.hutool.db.ds.AbstractDSFactory.get
	java.lang.String [cn.hutool.db.ds.AbstractDSFactory]  →  AbstractDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.AbstractDSFactory]  →  AbstractDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.AbstractDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.AbstractDSFactory]  →  AbstractDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.AbstractDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.AbstractDSFactory]  →  AbstractDSFactory.create($expr$)


## DSFactory

.get : cn.hutool.db.ds.DSFactory.get
	java.lang.String [cn.hutool.db.ds.DSFactory]  →  DSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.DSFactory]  →  DSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.DSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.DSFactory]  →  DSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.DSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.DSFactory]  →  DSFactory.create($expr$)


## DataSourceWrapper

.wrap : cn.hutool.db.ds.DataSourceWrapper.wrap
	javax.sql.DataSource [cn.hutool.db.ds.DataSourceWrapper]  →  DataSourceWrapper.wrap($expr$, $arg$)


## GlobalDSFactory

.set : cn.hutool.db.ds.GlobalDSFactory.set
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.GlobalDSFactory]  →  GlobalDSFactory.set($expr$)

.get : cn.hutool.db.ds.GlobalDSFactory.get
	java.lang.Object [cn.hutool.db.ds.GlobalDSFactory]  →  GlobalDSFactory.get()


## BeeDSFactory

.get : cn.hutool.db.ds.bee.BeeDSFactory.get
	java.lang.String [cn.hutool.db.ds.bee.BeeDSFactory]  →  BeeDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.bee.BeeDSFactory]  →  BeeDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.bee.BeeDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.bee.BeeDSFactory]  →  BeeDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.bee.BeeDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.bee.BeeDSFactory]  →  BeeDSFactory.create($expr$)


## C3p0DSFactory

.get : cn.hutool.db.ds.c3p0.C3p0DSFactory.get
	java.lang.String [cn.hutool.db.ds.c3p0.C3p0DSFactory]  →  C3p0DSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.c3p0.C3p0DSFactory]  →  C3p0DSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.c3p0.C3p0DSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.c3p0.C3p0DSFactory]  →  C3p0DSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.c3p0.C3p0DSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.c3p0.C3p0DSFactory]  →  C3p0DSFactory.create($expr$)


## DbcpDSFactory

.get : cn.hutool.db.ds.dbcp.DbcpDSFactory.get
	java.lang.String [cn.hutool.db.ds.dbcp.DbcpDSFactory]  →  DbcpDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.dbcp.DbcpDSFactory]  →  DbcpDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.dbcp.DbcpDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.dbcp.DbcpDSFactory]  →  DbcpDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.dbcp.DbcpDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.dbcp.DbcpDSFactory]  →  DbcpDSFactory.create($expr$)


## DruidDSFactory

.get : cn.hutool.db.ds.druid.DruidDSFactory.get
	java.lang.String [cn.hutool.db.ds.druid.DruidDSFactory]  →  DruidDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.druid.DruidDSFactory]  →  DruidDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.druid.DruidDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.druid.DruidDSFactory]  →  DruidDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.druid.DruidDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.druid.DruidDSFactory]  →  DruidDSFactory.create($expr$)


## HikariDSFactory

.get : cn.hutool.db.ds.hikari.HikariDSFactory.get
	java.lang.String [cn.hutool.db.ds.hikari.HikariDSFactory]  →  HikariDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.hikari.HikariDSFactory]  →  HikariDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.hikari.HikariDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.hikari.HikariDSFactory]  →  HikariDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.hikari.HikariDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.hikari.HikariDSFactory]  →  HikariDSFactory.create($expr$)


## JndiDSFactory

.get : cn.hutool.db.ds.jndi.JndiDSFactory.get
	java.lang.String [cn.hutool.db.ds.jndi.JndiDSFactory]  →  JndiDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.jndi.JndiDSFactory]  →  JndiDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.jndi.JndiDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.jndi.JndiDSFactory]  →  JndiDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.jndi.JndiDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.jndi.JndiDSFactory]  →  JndiDSFactory.create($expr$)


## PooledDSFactory

.get : cn.hutool.db.ds.pooled.PooledDSFactory.get
	java.lang.String [cn.hutool.db.ds.pooled.PooledDSFactory]  →  PooledDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.pooled.PooledDSFactory]  →  PooledDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.pooled.PooledDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.pooled.PooledDSFactory]  →  PooledDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.pooled.PooledDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.pooled.PooledDSFactory]  →  PooledDSFactory.create($expr$)


## PooledDataSource

.getDataSource : cn.hutool.db.ds.pooled.PooledDataSource.getDataSource
	java.lang.String [cn.hutool.db.ds.pooled.PooledDataSource]  →  PooledDataSource.getDataSource($expr$)
	java.lang.Object [cn.hutool.db.ds.pooled.PooledDataSource]  →  PooledDataSource.getDataSource()


## SimpleDSFactory

.get : cn.hutool.db.ds.simple.SimpleDSFactory.get
	java.lang.String [cn.hutool.db.ds.simple.SimpleDSFactory]  →  SimpleDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.simple.SimpleDSFactory]  →  SimpleDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.simple.SimpleDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.simple.SimpleDSFactory]  →  SimpleDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.simple.SimpleDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.simple.SimpleDSFactory]  →  SimpleDSFactory.create($expr$)


## SimpleDataSource

.getDataSource : cn.hutool.db.ds.simple.SimpleDataSource.getDataSource
	java.lang.String [cn.hutool.db.ds.simple.SimpleDataSource]  →  SimpleDataSource.getDataSource($expr$)
	java.lang.Object [cn.hutool.db.ds.simple.SimpleDataSource]  →  SimpleDataSource.getDataSource()


## TomcatDSFactory

.get : cn.hutool.db.ds.tomcat.TomcatDSFactory.get
	java.lang.String [cn.hutool.db.ds.tomcat.TomcatDSFactory]  →  TomcatDSFactory.get($expr$)
	java.lang.Object [cn.hutool.db.ds.tomcat.TomcatDSFactory]  →  TomcatDSFactory.get()

.setCurrentDSFactory : cn.hutool.db.ds.tomcat.TomcatDSFactory.setCurrentDSFactory
	cn.hutool.db.ds.DSFactory [cn.hutool.db.ds.tomcat.TomcatDSFactory]  →  TomcatDSFactory.setCurrentDSFactory($expr$)

.create : cn.hutool.db.ds.tomcat.TomcatDSFactory.create
	cn.hutool.setting.Setting [cn.hutool.db.ds.tomcat.TomcatDSFactory]  →  TomcatDSFactory.create($expr$)


## BeanHandler

.create : cn.hutool.db.handler.BeanHandler.create
	java.lang.Class [cn.hutool.db.handler.BeanHandler]  →  BeanHandler.create($expr$)


## BeanListHandler

.create : cn.hutool.db.handler.BeanListHandler.create
	java.lang.Class [cn.hutool.db.handler.BeanListHandler]  →  BeanListHandler.create($expr$)


## EntityHandler

.create : cn.hutool.db.handler.EntityHandler.create
	java.lang.Object [cn.hutool.db.handler.EntityHandler]  →  EntityHandler.create()


## EntityListHandler

.create : cn.hutool.db.handler.EntityListHandler.create
	java.lang.Object [cn.hutool.db.handler.EntityListHandler]  →  EntityListHandler.create()


## EntitySetHandler

.create : cn.hutool.db.handler.EntitySetHandler.create
	java.lang.Object [cn.hutool.db.handler.EntitySetHandler]  →  EntitySetHandler.create()


## HandleHelper

.handleRow : cn.hutool.db.handler.HandleHelper.handleRow
	cn.hutool.db.Entity [cn.hutool.db.handler.HandleHelper]  →  HandleHelper.handleRow($expr$, $arg$)
	INT [cn.hutool.db.handler.HandleHelper]  →  HandleHelper.handleRow($expr$, $arg$)
	java.sql.ResultSet [cn.hutool.db.handler.HandleHelper]  →  HandleHelper.handleRow($expr$)

.handleRsToBeanList : cn.hutool.db.handler.HandleHelper.handleRsToBeanList
	java.sql.ResultSet [cn.hutool.db.handler.HandleHelper]  →  HandleHelper.handleRsToBeanList($expr$, $arg$)

.handleRs : cn.hutool.db.handler.HandleHelper.handleRs
	java.sql.ResultSet [cn.hutool.db.handler.HandleHelper]  →  HandleHelper.handleRs($expr$, $arg$)

.handleRowToList : cn.hutool.db.handler.HandleHelper.handleRowToList
	java.sql.ResultSet [cn.hutool.db.handler.HandleHelper]  →  HandleHelper.handleRowToList($expr$)


## NumberHandler

.create : cn.hutool.db.handler.NumberHandler.create
	java.lang.Object [cn.hutool.db.handler.NumberHandler]  →  NumberHandler.create()


## PageResultHandler

.create : cn.hutool.db.handler.PageResultHandler.create
	cn.hutool.db.PageResult [cn.hutool.db.handler.PageResultHandler]  →  PageResultHandler.create($expr$)


## StringHandler

.create : cn.hutool.db.handler.StringHandler.create
	java.lang.Object [cn.hutool.db.handler.StringHandler]  →  StringHandler.create()


## ValueListHandler

.create : cn.hutool.db.handler.ValueListHandler.create
	java.lang.Object [cn.hutool.db.handler.ValueListHandler]  →  ValueListHandler.create()


## Column

.create : cn.hutool.db.meta.Column.create
	cn.hutool.db.meta.Table [cn.hutool.db.meta.Column]  →  Column.create($expr$, $arg$)


## MetaUtil

.getColumnNames : cn.hutool.db.meta.MetaUtil.getColumnNames
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getColumnNames($expr$, $arg$)
	java.sql.ResultSet [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getColumnNames($expr$)

.getSchema : cn.hutool.db.meta.MetaUtil.getSchema
	java.sql.Connection [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getSchema($expr$)

.getCataLog : cn.hutool.db.meta.MetaUtil.getCataLog
	java.sql.Connection [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getCataLog($expr$)

.createLimitedEntity : cn.hutool.db.meta.MetaUtil.createLimitedEntity
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.createLimitedEntity($expr$, $arg$)

.getTableMeta : cn.hutool.db.meta.MetaUtil.getTableMeta
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getTableMeta($expr$, $arg$)

.getTables : cn.hutool.db.meta.MetaUtil.getTables
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getTables($expr$, $arg$)


## Table

.create : cn.hutool.db.meta.Table.create
	java.lang.String [cn.hutool.db.meta.Table]  →  Table.create($expr$)


## MongoFactory

.closeAll : cn.hutool.db.nosql.mongo.MongoFactory.closeAll
	java.lang.Object [cn.hutool.db.nosql.mongo.MongoFactory]  →  MongoFactory.closeAll()

.getDS : cn.hutool.db.nosql.mongo.MongoFactory.getDS
	scala.Array [cn.hutool.db.nosql.mongo.MongoFactory]  →  MongoFactory.getDS($expr$)
	java.util.Collection [cn.hutool.db.nosql.mongo.MongoFactory]  →  MongoFactory.getDS($expr$)
	java.lang.String [cn.hutool.db.nosql.mongo.MongoFactory]  →  MongoFactory.getDS($expr$, $arg$)
	cn.hutool.setting.Setting [cn.hutool.db.nosql.mongo.MongoFactory]  →  MongoFactory.getDS($expr$, $arg$)


## RedisDS

.create : cn.hutool.db.nosql.redis.RedisDS.create
	java.lang.String [cn.hutool.db.nosql.redis.RedisDS]  →  RedisDS.create($expr$)
	cn.hutool.setting.Setting [cn.hutool.db.nosql.redis.RedisDS]  →  RedisDS.create($expr$, $arg$)
	java.lang.Object [cn.hutool.db.nosql.redis.RedisDS]  →  RedisDS.create()


## Condition

.parse : cn.hutool.db.sql.Condition.parse
	java.lang.String [cn.hutool.db.sql.Condition]  →  Condition.parse($expr$, $arg$)


## ConditionBuilder

.of : cn.hutool.db.sql.ConditionBuilder.of
	scala.Array [cn.hutool.db.sql.ConditionBuilder]  →  ConditionBuilder.of($expr$)


## ConditionGroup

.parse : cn.hutool.db.sql.ConditionGroup.parse
	java.lang.String [cn.hutool.db.sql.ConditionGroup]  →  ConditionGroup.parse($expr$, $arg$)


## Query

.of : cn.hutool.db.sql.Query.of
	cn.hutool.db.Entity [cn.hutool.db.sql.Query]  →  Query.of($expr$)


## SqlBuilder

.of : cn.hutool.db.sql.SqlBuilder.of
	java.lang.CharSequence [cn.hutool.db.sql.SqlBuilder]  →  SqlBuilder.of($expr$)

.validateEntity : cn.hutool.db.sql.SqlBuilder.validateEntity
	cn.hutool.db.Entity [cn.hutool.db.sql.SqlBuilder]  →  SqlBuilder.validateEntity($expr$)

.create : cn.hutool.db.sql.SqlBuilder.create
	cn.hutool.db.sql.Wrapper [cn.hutool.db.sql.SqlBuilder]  →  SqlBuilder.create($expr$)
	java.lang.Object [cn.hutool.db.sql.SqlBuilder]  →  SqlBuilder.create()


## SqlExecutor

.queryAndClosePs : cn.hutool.db.sql.SqlExecutor.queryAndClosePs
	java.sql.PreparedStatement [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.queryAndClosePs($expr$, $arg$)

.execute : cn.hutool.db.sql.SqlExecutor.execute
	java.sql.Connection [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.execute($expr$, $arg$)
	java.sql.PreparedStatement [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.execute($expr$, $arg$)

.executeForGeneratedKey : cn.hutool.db.sql.SqlExecutor.executeForGeneratedKey
	java.sql.Connection [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.executeForGeneratedKey($expr$, $arg$)

.executeBatch : cn.hutool.db.sql.SqlExecutor.executeBatch
	java.sql.Connection [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.executeBatch($expr$, $arg$)

.query : cn.hutool.db.sql.SqlExecutor.query
	java.sql.Connection [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.query($expr$, $arg$)
	java.sql.PreparedStatement [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.query($expr$, $arg$)

.executeUpdate : cn.hutool.db.sql.SqlExecutor.executeUpdate
	java.sql.PreparedStatement [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.executeUpdate($expr$, $arg$)

.callQuery : cn.hutool.db.sql.SqlExecutor.callQuery
	java.sql.Connection [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.callQuery($expr$, $arg$)

.call : cn.hutool.db.sql.SqlExecutor.call
	java.sql.Connection [cn.hutool.db.sql.SqlExecutor]  →  SqlExecutor.call($expr$, $arg$)


## SqlFormatter

.format : cn.hutool.db.sql.SqlFormatter.format
	java.lang.String [cn.hutool.db.sql.SqlFormatter]  →  SqlFormatter.format($expr$)


## SqlUtil

.toSqlTimestamp : cn.hutool.db.sql.SqlUtil.toSqlTimestamp
	java.util.Date [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.toSqlTimestamp($expr$)

.blobToStr : cn.hutool.db.sql.SqlUtil.blobToStr
	java.sql.Blob [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.blobToStr($expr$, $arg$)

.createBlob : cn.hutool.db.sql.SqlUtil.createBlob
	java.sql.Connection [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.createBlob($expr$, $arg$)

.buildEqualsWhere : cn.hutool.db.sql.SqlUtil.buildEqualsWhere
	cn.hutool.db.Entity [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.buildEqualsWhere($expr$, $arg$)

.buildConditions : cn.hutool.db.sql.SqlUtil.buildConditions
	cn.hutool.db.Entity [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.buildConditions($expr$)

.formatSql : cn.hutool.db.sql.SqlUtil.formatSql
	java.lang.String [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.formatSql($expr$)

.clobToStr : cn.hutool.db.sql.SqlUtil.clobToStr
	java.sql.Clob [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.clobToStr($expr$)

.rowIdToString : cn.hutool.db.sql.SqlUtil.rowIdToString
	java.sql.RowId [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.rowIdToString($expr$)

.toSqlDate : cn.hutool.db.sql.SqlUtil.toSqlDate
	java.util.Date [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.toSqlDate($expr$)

.buildLikeValue : cn.hutool.db.sql.SqlUtil.buildLikeValue
	java.lang.String [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.buildLikeValue($expr$, $arg$)


## SensitiveUtil

.setCharFilter : cn.hutool.dfa.SensitiveUtil.setCharFilter
	cn.hutool.core.lang.Filter [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.setCharFilter($expr$)

.getFoundFirstSensitive : cn.hutool.dfa.SensitiveUtil.getFoundFirstSensitive
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.getFoundFirstSensitive($expr$)
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.getFoundFirstSensitive($expr$)

.isInited : cn.hutool.dfa.SensitiveUtil.isInited
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.isInited()

.containsSensitive : cn.hutool.dfa.SensitiveUtil.containsSensitive
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.containsSensitive($expr$)
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.containsSensitive($expr$)

.getFoundAllSensitive : cn.hutool.dfa.SensitiveUtil.getFoundAllSensitive
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.getFoundAllSensitive($expr$, $arg$)
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.getFoundAllSensitive($expr$, $arg$)

.sensitiveFilter : cn.hutool.dfa.SensitiveUtil.sensitiveFilter
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.sensitiveFilter($expr$, $arg$)
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.sensitiveFilter($expr$, $arg$)

.init : cn.hutool.dfa.SensitiveUtil.init
	java.util.Collection [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.init($expr$, $arg$)
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.init($expr$, $arg$)


## StopChar

.isNotStopChar : cn.hutool.dfa.StopChar.isNotStopChar
	CHAR [cn.hutool.dfa.StopChar]  →  StopChar.isNotStopChar($expr$)

.isStopChar : cn.hutool.dfa.StopChar.isStopChar
	CHAR [cn.hutool.dfa.StopChar]  →  StopChar.isStopChar($expr$)


## CglibUtil

.fillBean : cn.hutool.extra.cglib.CglibUtil.fillBean
	java.util.Map [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.fillBean($expr$, $arg$)

.toMap : cn.hutool.extra.cglib.CglibUtil.toMap
	java.lang.Object [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.toMap($expr$)

.copy : cn.hutool.extra.cglib.CglibUtil.copy
	java.lang.Object [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.copy($expr$, $arg$)

.copyList : cn.hutool.extra.cglib.CglibUtil.copyList
	java.util.Collection [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.copyList($expr$, $arg$)

.toBean : cn.hutool.extra.cglib.CglibUtil.toBean
	java.util.Map [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.toBean($expr$, $arg$)


## CompressUtil

.getOut : cn.hutool.extra.compress.CompressUtil.getOut
	java.lang.String [cn.hutool.extra.compress.CompressUtil]  →  CompressUtil.getOut($expr$, $arg$)

.createArchiver : cn.hutool.extra.compress.CompressUtil.createArchiver
	java.nio.charset.Charset [cn.hutool.extra.compress.CompressUtil]  →  CompressUtil.createArchiver($expr$, $arg$)

.createExtractor : cn.hutool.extra.compress.CompressUtil.createExtractor
	java.nio.charset.Charset [cn.hutool.extra.compress.CompressUtil]  →  CompressUtil.createExtractor($expr$, $arg$)

.getIn : cn.hutool.extra.compress.CompressUtil.getIn
	java.lang.String [cn.hutool.extra.compress.CompressUtil]  →  CompressUtil.getIn($expr$, $arg$)


## StreamArchiver

.create : cn.hutool.extra.compress.archiver.StreamArchiver.create
	java.nio.charset.Charset [cn.hutool.extra.compress.archiver.StreamArchiver]  →  StreamArchiver.create($expr$, $arg$)


## Seven7EntryInputStream

.nullInputStream : cn.hutool.extra.compress.extractor.Seven7EntryInputStream.nullInputStream
	java.lang.Object [cn.hutool.extra.compress.extractor.Seven7EntryInputStream]  →  Seven7EntryInputStream.nullInputStream()


## EmojiUtil

.containsEmoji : cn.hutool.extra.emoji.EmojiUtil.containsEmoji
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.containsEmoji($expr$)

.getByTag : cn.hutool.extra.emoji.EmojiUtil.getByTag
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.getByTag($expr$)

.removeAllEmojis : cn.hutool.extra.emoji.EmojiUtil.removeAllEmojis
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.removeAllEmojis($expr$)

.toAlias : cn.hutool.extra.emoji.EmojiUtil.toAlias
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.toAlias($expr$, $arg$)

.isEmoji : cn.hutool.extra.emoji.EmojiUtil.isEmoji
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.isEmoji($expr$)

.toUnicode : cn.hutool.extra.emoji.EmojiUtil.toUnicode
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.toUnicode($expr$)

.extractEmojis : cn.hutool.extra.emoji.EmojiUtil.extractEmojis
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.extractEmojis($expr$)

.get : cn.hutool.extra.emoji.EmojiUtil.get
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.get($expr$)

.toHtml : cn.hutool.extra.emoji.EmojiUtil.toHtml
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.toHtml($expr$, $arg$)

.toHtmlHex : cn.hutool.extra.emoji.EmojiUtil.toHtmlHex
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.toHtmlHex($expr$)


## ExpressionUtil

.eval : cn.hutool.extra.expression.ExpressionUtil.eval
	java.lang.String [cn.hutool.extra.expression.ExpressionUtil]  →  ExpressionUtil.eval($expr$, $arg$)

.getEngine : cn.hutool.extra.expression.ExpressionUtil.getEngine
	java.lang.Object [cn.hutool.extra.expression.ExpressionUtil]  →  ExpressionUtil.getEngine()


## ExpressionFactory

.get : cn.hutool.extra.expression.engine.ExpressionFactory.get
	java.lang.Object [cn.hutool.extra.expression.engine.ExpressionFactory]  →  ExpressionFactory.get()

.create : cn.hutool.extra.expression.engine.ExpressionFactory.create
	java.lang.Object [cn.hutool.extra.expression.engine.ExpressionFactory]  →  ExpressionFactory.create()


## FtpConfig

.create : cn.hutool.extra.ftp.FtpConfig.create
	java.lang.Object [cn.hutool.extra.ftp.FtpConfig]  →  FtpConfig.create()


## SimpleFtpServer

.create : cn.hutool.extra.ftp.SimpleFtpServer.create
	java.lang.Object [cn.hutool.extra.ftp.SimpleFtpServer]  →  SimpleFtpServer.create()


## InternalMailUtil

.parseFirstAddress : cn.hutool.extra.mail.InternalMailUtil.parseFirstAddress
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  InternalMailUtil.parseFirstAddress($expr$, $arg$)

.parseAddress : cn.hutool.extra.mail.InternalMailUtil.parseAddress
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  InternalMailUtil.parseAddress($expr$, $arg$)

.encodeText : cn.hutool.extra.mail.InternalMailUtil.encodeText
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  InternalMailUtil.encodeText($expr$, $arg$)

.parseAddressFromStrs : cn.hutool.extra.mail.InternalMailUtil.parseAddressFromStrs
	scala.Array [cn.hutool.extra.mail.InternalMailUtil]  →  InternalMailUtil.parseAddressFromStrs($expr$, $arg$)


## Mail

.create : cn.hutool.extra.mail.Mail.create
	cn.hutool.extra.mail.MailAccount [cn.hutool.extra.mail.Mail]  →  Mail.create($expr$)
	java.lang.Object [cn.hutool.extra.mail.Mail]  →  Mail.create()


## MailUtil

.sendHtml : cn.hutool.extra.mail.MailUtil.sendHtml
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  MailUtil.sendHtml($expr$, $arg$)
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  MailUtil.sendHtml($expr$, $arg$)

.sendText : cn.hutool.extra.mail.MailUtil.sendText
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  MailUtil.sendText($expr$, $arg$)
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  MailUtil.sendText($expr$, $arg$)

.send : cn.hutool.extra.mail.MailUtil.send
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  MailUtil.send($expr$, $arg$)
	cn.hutool.extra.mail.MailAccount [cn.hutool.extra.mail.MailUtil]  →  MailUtil.send($expr$, $arg$)
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  MailUtil.send($expr$, $arg$)

.getSession : cn.hutool.extra.mail.MailUtil.getSession
	cn.hutool.extra.mail.MailAccount [cn.hutool.extra.mail.MailUtil]  →  MailUtil.getSession($expr$, $arg$)


## PinyinUtil

.getEngine : cn.hutool.extra.pinyin.PinyinUtil.getEngine
	java.lang.Object [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getEngine()

.getFirstLetter : cn.hutool.extra.pinyin.PinyinUtil.getFirstLetter
	java.lang.String [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getFirstLetter($expr$, $arg$)
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getFirstLetter($expr$)

.getPinyin : cn.hutool.extra.pinyin.PinyinUtil.getPinyin
	java.lang.String [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getPinyin($expr$, $arg$)
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getPinyin($expr$)

.isChinese : cn.hutool.extra.pinyin.PinyinUtil.isChinese
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.isChinese($expr$)


## PinyinFactory

.get : cn.hutool.extra.pinyin.engine.PinyinFactory.get
	java.lang.Object [cn.hutool.extra.pinyin.engine.PinyinFactory]  →  PinyinFactory.get()

.create : cn.hutool.extra.pinyin.engine.PinyinFactory.create
	java.lang.Object [cn.hutool.extra.pinyin.engine.PinyinFactory]  →  PinyinFactory.create()


## QrCodeUtil

.encode : cn.hutool.extra.qrcode.QrCodeUtil.encode
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.encode($expr$, $arg$)

.generate : cn.hutool.extra.qrcode.QrCodeUtil.generate
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.generate($expr$, $arg$)

.toImage : cn.hutool.extra.qrcode.QrCodeUtil.toImage
	com.google.zxing.common.BitMatrix [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.toImage($expr$, $arg$)

.decode : cn.hutool.extra.qrcode.QrCodeUtil.decode
	java.io.File [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.decode($expr$)
	java.awt.Image [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.decode($expr$, $arg$)
	java.io.InputStream [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.decode($expr$)

.generateAsBase64 : cn.hutool.extra.qrcode.QrCodeUtil.generateAsBase64
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.generateAsBase64($expr$, $arg$)

.generatePng : cn.hutool.extra.qrcode.QrCodeUtil.generatePng
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.generatePng($expr$, $arg$)


## QrConfig

.create : cn.hutool.extra.qrcode.QrConfig.create
	java.lang.Object [cn.hutool.extra.qrcode.QrConfig]  →  QrConfig.create()


## ServletUtil

.isGetMethod : cn.hutool.extra.servlet.ServletUtil.isGetMethod
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.isGetMethod($expr$)

.addCookie : cn.hutool.extra.servlet.ServletUtil.addCookie
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.addCookie($expr$, $arg$)

.getHeader : cn.hutool.extra.servlet.ServletUtil.getHeader
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getHeader($expr$, $arg$)

.fillBean : cn.hutool.extra.servlet.ServletUtil.fillBean
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.fillBean($expr$, $arg$)

.isMultipart : cn.hutool.extra.servlet.ServletUtil.isMultipart
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.isMultipart($expr$)

.getMultipart : cn.hutool.extra.servlet.ServletUtil.getMultipart
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getMultipart($expr$, $arg$)

.getBodyBytes : cn.hutool.extra.servlet.ServletUtil.getBodyBytes
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getBodyBytes($expr$)

.getHeaderMap : cn.hutool.extra.servlet.ServletUtil.getHeaderMap
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getHeaderMap($expr$)

.getClientIP : cn.hutool.extra.servlet.ServletUtil.getClientIP
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getClientIP($expr$, $arg$)

.getClientIPByHeader : cn.hutool.extra.servlet.ServletUtil.getClientIPByHeader
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getClientIPByHeader($expr$, $arg$)

.isIE : cn.hutool.extra.servlet.ServletUtil.isIE
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.isIE($expr$)

.getHeaderIgnoreCase : cn.hutool.extra.servlet.ServletUtil.getHeaderIgnoreCase
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getHeaderIgnoreCase($expr$, $arg$)

.getWriter : cn.hutool.extra.servlet.ServletUtil.getWriter
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getWriter($expr$)

.getParamMap : cn.hutool.extra.servlet.ServletUtil.getParamMap
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getParamMap($expr$)

.isPostMethod : cn.hutool.extra.servlet.ServletUtil.isPostMethod
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.isPostMethod($expr$)

.getParams : cn.hutool.extra.servlet.ServletUtil.getParams
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getParams($expr$)

.getBody : cn.hutool.extra.servlet.ServletUtil.getBody
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getBody($expr$)

.toBean : cn.hutool.extra.servlet.ServletUtil.toBean
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.toBean($expr$, $arg$)

.setHeader : cn.hutool.extra.servlet.ServletUtil.setHeader
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.setHeader($expr$, $arg$)

.readCookieMap : cn.hutool.extra.servlet.ServletUtil.readCookieMap
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.readCookieMap($expr$)

.write : cn.hutool.extra.servlet.ServletUtil.write
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.write($expr$, $arg$)

.getCookie : cn.hutool.extra.servlet.ServletUtil.getCookie
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getCookie($expr$, $arg$)


## GanymedUtil

.openSession : cn.hutool.extra.ssh.GanymedUtil.openSession
	java.lang.String [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.openSession($expr$, $arg$)

.connect : cn.hutool.extra.ssh.GanymedUtil.connect
	java.lang.String [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.connect($expr$, $arg$)

.close : cn.hutool.extra.ssh.GanymedUtil.close
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.close($expr$)

.exec : cn.hutool.extra.ssh.GanymedUtil.exec
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.exec($expr$, $arg$)

.execByShell : cn.hutool.extra.ssh.GanymedUtil.execByShell
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.execByShell($expr$, $arg$)


## JschUtil

.openSession : cn.hutool.extra.ssh.JschUtil.openSession
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openSession($expr$, $arg$)

.getSession : cn.hutool.extra.ssh.JschUtil.getSession
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.getSession($expr$, $arg$)

.bindRemotePort : cn.hutool.extra.ssh.JschUtil.bindRemotePort
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.bindRemotePort($expr$, $arg$)

.unBindPort : cn.hutool.extra.ssh.JschUtil.unBindPort
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.unBindPort($expr$, $arg$)

.createChannel : cn.hutool.extra.ssh.JschUtil.createChannel
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createChannel($expr$, $arg$)

.openAndBindPortToLocal : cn.hutool.extra.ssh.JschUtil.openAndBindPortToLocal
	cn.hutool.extra.ssh.Connector [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openAndBindPortToLocal($expr$, $arg$)

.openSftp : cn.hutool.extra.ssh.JschUtil.openSftp
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openSftp($expr$, $arg$)

.createSession : cn.hutool.extra.ssh.JschUtil.createSession
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createSession($expr$, $arg$)
	com.jcraft.jsch.JSch [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createSession($expr$, $arg$)

.bindPort : cn.hutool.extra.ssh.JschUtil.bindPort
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.bindPort($expr$, $arg$)

.generateLocalPort : cn.hutool.extra.ssh.JschUtil.generateLocalPort
	java.lang.Object [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.generateLocalPort()

.openShell : cn.hutool.extra.ssh.JschUtil.openShell
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openShell($expr$)

.close : cn.hutool.extra.ssh.JschUtil.close
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.close($expr$)
	com.jcraft.jsch.Channel [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.close($expr$)
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.close($expr$)

.exec : cn.hutool.extra.ssh.JschUtil.exec
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.exec($expr$, $arg$)

.execByShell : cn.hutool.extra.ssh.JschUtil.execByShell
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.execByShell($expr$, $arg$)

.createSftp : cn.hutool.extra.ssh.JschUtil.createSftp
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createSftp($expr$, $arg$)
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createSftp($expr$)

.closeAll : cn.hutool.extra.ssh.JschUtil.closeAll
	java.lang.Object [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.closeAll()

.openChannel : cn.hutool.extra.ssh.JschUtil.openChannel
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openChannel($expr$, $arg$)


## TemplateUtil

.createEngine : cn.hutool.extra.template.TemplateUtil.createEngine
	cn.hutool.extra.template.TemplateConfig [cn.hutool.extra.template.TemplateUtil]  →  TemplateUtil.createEngine($expr$)
	java.lang.Object [cn.hutool.extra.template.TemplateUtil]  →  TemplateUtil.createEngine()


## TemplateFactory

.get : cn.hutool.extra.template.engine.TemplateFactory.get
	java.lang.Object [cn.hutool.extra.template.engine.TemplateFactory]  →  TemplateFactory.get()

.create : cn.hutool.extra.template.engine.TemplateFactory.create
	cn.hutool.extra.template.TemplateConfig [cn.hutool.extra.template.engine.TemplateFactory]  →  TemplateFactory.create($expr$)
	java.lang.Object [cn.hutool.extra.template.engine.TemplateFactory]  →  TemplateFactory.create()


## BeetlTemplate

.wrap : cn.hutool.extra.template.engine.beetl.BeetlTemplate.wrap
	org.beetl.core.Template [cn.hutool.extra.template.engine.beetl.BeetlTemplate]  →  BeetlTemplate.wrap($expr$)


## EnjoyTemplate

.wrap : cn.hutool.extra.template.engine.enjoy.EnjoyTemplate.wrap
	com.jfinal.template.Template [cn.hutool.extra.template.engine.enjoy.EnjoyTemplate]  →  EnjoyTemplate.wrap($expr$)


## FreemarkerTemplate

.wrap : cn.hutool.extra.template.engine.freemarker.FreemarkerTemplate.wrap
	freemarker.template.Template [cn.hutool.extra.template.engine.freemarker.FreemarkerTemplate]  →  FreemarkerTemplate.wrap($expr$)


## JetbrickTemplate

.wrap : cn.hutool.extra.template.engine.jetbrick.JetbrickTemplate.wrap
	jetbrick.template.JetTemplate [cn.hutool.extra.template.engine.jetbrick.JetbrickTemplate]  →  JetbrickTemplate.wrap($expr$)


## RythmTemplate

.wrap : cn.hutool.extra.template.engine.rythm.RythmTemplate.wrap
	org.rythmengine.template.ITemplate [cn.hutool.extra.template.engine.rythm.RythmTemplate]  →  RythmTemplate.wrap($expr$)


## ThymeleafTemplate

.wrap : cn.hutool.extra.template.engine.thymeleaf.ThymeleafTemplate.wrap
	org.thymeleaf.TemplateEngine [cn.hutool.extra.template.engine.thymeleaf.ThymeleafTemplate]  →  ThymeleafTemplate.wrap($expr$, $arg$)


## VelocityTemplate

.wrap : cn.hutool.extra.template.engine.velocity.VelocityTemplate.wrap
	org.apache.velocity.Template [cn.hutool.extra.template.engine.velocity.VelocityTemplate]  →  VelocityTemplate.wrap($expr$)


## WitTemplate

.wrap : cn.hutool.extra.template.engine.wit.WitTemplate.wrap
	org.febit.wit.Template [cn.hutool.extra.template.engine.wit.WitTemplate]  →  WitTemplate.wrap($expr$)


## TokenizerUtil

.createEngine : cn.hutool.extra.tokenizer.TokenizerUtil.createEngine
	java.lang.Object [cn.hutool.extra.tokenizer.TokenizerUtil]  →  TokenizerUtil.createEngine()


## TokenizerFactory

.get : cn.hutool.extra.tokenizer.engine.TokenizerFactory.get
	java.lang.Object [cn.hutool.extra.tokenizer.engine.TokenizerFactory]  →  TokenizerFactory.get()

.create : cn.hutool.extra.tokenizer.engine.TokenizerFactory.create
	java.lang.Object [cn.hutool.extra.tokenizer.engine.TokenizerFactory]  →  TokenizerFactory.create()


## ValidationUtil

.validateProperty : cn.hutool.extra.validation.ValidationUtil.validateProperty
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.validateProperty($expr$, $arg$)

.warpValidate : cn.hutool.extra.validation.ValidationUtil.warpValidate
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.warpValidate($expr$, $arg$)

.validate : cn.hutool.extra.validation.ValidationUtil.validate
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.validate($expr$, $arg$)

.warpValidateProperty : cn.hutool.extra.validation.ValidationUtil.warpValidateProperty
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.warpValidateProperty($expr$, $arg$)

.getValidator : cn.hutool.extra.validation.ValidationUtil.getValidator
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.getValidator()


## HTMLFilter

.chr : cn.hutool.http.HTMLFilter.chr
	INT [cn.hutool.http.HTMLFilter]  →  HTMLFilter.chr($expr$)

.htmlSpecialChars : cn.hutool.http.HTMLFilter.htmlSpecialChars
	java.lang.String [cn.hutool.http.HTMLFilter]  →  HTMLFilter.htmlSpecialChars($expr$)


## HtmlUtil

.removeAllHtmlAttr : cn.hutool.http.HtmlUtil.removeAllHtmlAttr
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.removeAllHtmlAttr($expr$, $arg$)

.filter : cn.hutool.http.HtmlUtil.filter
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.filter($expr$)

.escape : cn.hutool.http.HtmlUtil.escape
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.escape($expr$)

.removeHtmlAttr : cn.hutool.http.HtmlUtil.removeHtmlAttr
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.removeHtmlAttr($expr$, $arg$)

.unwrapHtmlTag : cn.hutool.http.HtmlUtil.unwrapHtmlTag
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.unwrapHtmlTag($expr$, $arg$)

.cleanHtmlTag : cn.hutool.http.HtmlUtil.cleanHtmlTag
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.cleanHtmlTag($expr$)

.unescape : cn.hutool.http.HtmlUtil.unescape
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.unescape($expr$)

.removeHtmlTag : cn.hutool.http.HtmlUtil.removeHtmlTag
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.removeHtmlTag($expr$, $arg$)


## HttpConnection

.create : cn.hutool.http.HttpConnection.create
	java.lang.String [cn.hutool.http.HttpConnection]  →  HttpConnection.create($expr$, $arg$)
	java.net.URL [cn.hutool.http.HttpConnection]  →  HttpConnection.create($expr$, $arg$)


## HttpDownloader

.downloadString : cn.hutool.http.HttpDownloader.downloadString
	java.lang.String [cn.hutool.http.HttpDownloader]  →  HttpDownloader.downloadString($expr$, $arg$)

.downloadForFile : cn.hutool.http.HttpDownloader.downloadForFile
	java.lang.String [cn.hutool.http.HttpDownloader]  →  HttpDownloader.downloadForFile($expr$, $arg$)

.downloadFile : cn.hutool.http.HttpDownloader.downloadFile
	java.lang.String [cn.hutool.http.HttpDownloader]  →  HttpDownloader.downloadFile($expr$, $arg$)

.downloadBytes : cn.hutool.http.HttpDownloader.downloadBytes
	java.lang.String [cn.hutool.http.HttpDownloader]  →  HttpDownloader.downloadBytes($expr$)

.download : cn.hutool.http.HttpDownloader.download
	java.lang.String [cn.hutool.http.HttpDownloader]  →  HttpDownloader.download($expr$, $arg$)


## HttpGlobalConfig

.setIgnoreEOFError : cn.hutool.http.HttpGlobalConfig.setIgnoreEOFError
	BOOLEAN [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.setIgnoreEOFError($expr$)

.getMaxRedirectCount : cn.hutool.http.HttpGlobalConfig.getMaxRedirectCount
	java.lang.Object [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.getMaxRedirectCount()

.getTimeout : cn.hutool.http.HttpGlobalConfig.getTimeout
	java.lang.Object [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.getTimeout()

.setMaxRedirectCount : cn.hutool.http.HttpGlobalConfig.setMaxRedirectCount
	INT [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.setMaxRedirectCount($expr$)

.setCookieManager : cn.hutool.http.HttpGlobalConfig.setCookieManager
	java.net.CookieManager [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.setCookieManager($expr$)

.setTimeout : cn.hutool.http.HttpGlobalConfig.setTimeout
	INT [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.setTimeout($expr$)

.isIgnoreEOFError : cn.hutool.http.HttpGlobalConfig.isIgnoreEOFError
	java.lang.Object [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.isIgnoreEOFError()

.closeCookie : cn.hutool.http.HttpGlobalConfig.closeCookie
	java.lang.Object [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.closeCookie()

.getCookieManager : cn.hutool.http.HttpGlobalConfig.getCookieManager
	java.lang.Object [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.getCookieManager()

.getBoundary : cn.hutool.http.HttpGlobalConfig.getBoundary
	java.lang.Object [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.getBoundary()

.allowPatch : cn.hutool.http.HttpGlobalConfig.allowPatch
	java.lang.Object [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.allowPatch()

.setBoundary : cn.hutool.http.HttpGlobalConfig.setBoundary
	java.lang.String [cn.hutool.http.HttpGlobalConfig]  →  HttpGlobalConfig.setBoundary($expr$)


## HttpInputStream

.nullInputStream : cn.hutool.http.HttpInputStream.nullInputStream
	java.lang.Object [cn.hutool.http.HttpInputStream]  →  HttpInputStream.nullInputStream()


## HttpRequest

.post : cn.hutool.http.HttpRequest.post
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.post($expr$)

.trace : cn.hutool.http.HttpRequest.trace
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.trace($expr$)

.setCookieManager : cn.hutool.http.HttpRequest.setCookieManager
	java.net.CookieManager [cn.hutool.http.HttpRequest]  →  HttpRequest.setCookieManager($expr$)

.head : cn.hutool.http.HttpRequest.head
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.head($expr$)

.options : cn.hutool.http.HttpRequest.options
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.options($expr$)

.closeCookie : cn.hutool.http.HttpRequest.closeCookie
	java.lang.Object [cn.hutool.http.HttpRequest]  →  HttpRequest.closeCookie()

.getCookieManager : cn.hutool.http.HttpRequest.getCookieManager
	java.lang.Object [cn.hutool.http.HttpRequest]  →  HttpRequest.getCookieManager()

.setGlobalTimeout : cn.hutool.http.HttpRequest.setGlobalTimeout
	INT [cn.hutool.http.HttpRequest]  →  HttpRequest.setGlobalTimeout($expr$)

.delete : cn.hutool.http.HttpRequest.delete
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.delete($expr$)

.put : cn.hutool.http.HttpRequest.put
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.put($expr$)

.get : cn.hutool.http.HttpRequest.get
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.get($expr$)

.patch : cn.hutool.http.HttpRequest.patch
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.patch($expr$)

.of : cn.hutool.http.HttpRequest.of
	java.lang.String [cn.hutool.http.HttpRequest]  →  HttpRequest.of($expr$, $arg$)


## HttpStatus

.isRedirected : cn.hutool.http.HttpStatus.isRedirected
	INT [cn.hutool.http.HttpStatus]  →  HttpStatus.isRedirected($expr$)


## HttpUtil

.getContentTypeByRequestBody : cn.hutool.http.HttpUtil.getContentTypeByRequestBody
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.getContentTypeByRequestBody($expr$)

.post : cn.hutool.http.HttpUtil.post
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.post($expr$, $arg$)

.downloadFileFromUrl : cn.hutool.http.HttpUtil.downloadFileFromUrl
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.downloadFileFromUrl($expr$, $arg$)

.getCharset : cn.hutool.http.HttpUtil.getCharset
	java.net.HttpURLConnection [cn.hutool.http.HttpUtil]  →  HttpUtil.getCharset($expr$)
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.getCharset($expr$)

.normalizeParams : cn.hutool.http.HttpUtil.normalizeParams
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.normalizeParams($expr$, $arg$)

.toParams : cn.hutool.http.HttpUtil.toParams
	java.util.Map [cn.hutool.http.HttpUtil]  →  HttpUtil.toParams($expr$, $arg$)

.getString : cn.hutool.http.HttpUtil.getString
	scala.Array [cn.hutool.http.HttpUtil]  →  HttpUtil.getString($expr$, $arg$)
	java.io.InputStream [cn.hutool.http.HttpUtil]  →  HttpUtil.getString($expr$, $arg$)

.downloadString : cn.hutool.http.HttpUtil.downloadString
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.downloadString($expr$, $arg$)

.createServer : cn.hutool.http.HttpUtil.createServer
	INT [cn.hutool.http.HttpUtil]  →  HttpUtil.createServer($expr$)

.buildBasicAuth : cn.hutool.http.HttpUtil.buildBasicAuth
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.buildBasicAuth($expr$, $arg$)

.isHttps : cn.hutool.http.HttpUtil.isHttps
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.isHttps($expr$)

.createGet : cn.hutool.http.HttpUtil.createGet
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.createGet($expr$, $arg$)

.urlWithForm : cn.hutool.http.HttpUtil.urlWithForm
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.urlWithForm($expr$, $arg$)

.closeCookie : cn.hutool.http.HttpUtil.closeCookie
	java.lang.Object [cn.hutool.http.HttpUtil]  →  HttpUtil.closeCookie()

.decodeParams : cn.hutool.http.HttpUtil.decodeParams
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.decodeParams($expr$, $arg$)

.decodeParamMap : cn.hutool.http.HttpUtil.decodeParamMap
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.decodeParamMap($expr$, $arg$)

.downloadFile : cn.hutool.http.HttpUtil.downloadFile
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.downloadFile($expr$, $arg$)

.encodeParams : cn.hutool.http.HttpUtil.encodeParams
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.encodeParams($expr$, $arg$)

.downloadBytes : cn.hutool.http.HttpUtil.downloadBytes
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.downloadBytes($expr$)

.isHttp : cn.hutool.http.HttpUtil.isHttp
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.isHttp($expr$)

.createPost : cn.hutool.http.HttpUtil.createPost
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.createPost($expr$)

.get : cn.hutool.http.HttpUtil.get
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.get($expr$, $arg$)

.createRequest : cn.hutool.http.HttpUtil.createRequest
	cn.hutool.http.Method [cn.hutool.http.HttpUtil]  →  HttpUtil.createRequest($expr$, $arg$)

.download : cn.hutool.http.HttpUtil.download
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.download($expr$, $arg$)

.getMimeType : cn.hutool.http.HttpUtil.getMimeType
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.getMimeType($expr$, $arg$)


## MultipartOutputStream

.nullOutputStream : cn.hutool.http.MultipartOutputStream.nullOutputStream
	java.lang.Object [cn.hutool.http.MultipartOutputStream]  →  MultipartOutputStream.nullOutputStream()


## BytesBody

.create : cn.hutool.http.body.BytesBody.create
	scala.Array [cn.hutool.http.body.BytesBody]  →  BytesBody.create($expr$)


## FormUrlEncodedBody

.create : cn.hutool.http.body.FormUrlEncodedBody.create
	scala.Array [cn.hutool.http.body.FormUrlEncodedBody]  →  FormUrlEncodedBody.create($expr$)
	java.util.Map [cn.hutool.http.body.FormUrlEncodedBody]  →  FormUrlEncodedBody.create($expr$, $arg$)


## MultipartBody

.create : cn.hutool.http.body.MultipartBody.create
	java.util.Map [cn.hutool.http.body.MultipartBody]  →  MultipartBody.create($expr$, $arg$)


## GlobalCookieManager

.setCookieManager : cn.hutool.http.cookie.GlobalCookieManager.setCookieManager
	java.net.CookieManager [cn.hutool.http.cookie.GlobalCookieManager]  →  GlobalCookieManager.setCookieManager($expr$)

.store : cn.hutool.http.cookie.GlobalCookieManager.store
	cn.hutool.http.HttpConnection [cn.hutool.http.cookie.GlobalCookieManager]  →  GlobalCookieManager.store($expr$)

.getCookieManager : cn.hutool.http.cookie.GlobalCookieManager.getCookieManager
	java.lang.Object [cn.hutool.http.cookie.GlobalCookieManager]  →  GlobalCookieManager.getCookieManager()

.getCookies : cn.hutool.http.cookie.GlobalCookieManager.getCookies
	cn.hutool.http.HttpConnection [cn.hutool.http.cookie.GlobalCookieManager]  →  GlobalCookieManager.getCookies($expr$)

.add : cn.hutool.http.cookie.GlobalCookieManager.add
	cn.hutool.http.HttpConnection [cn.hutool.http.cookie.GlobalCookieManager]  →  GlobalCookieManager.add($expr$)


## SimpleFilter

.beforeHandler : cn.hutool.http.server.filter.SimpleFilter.beforeHandler
	java.lang.String [cn.hutool.http.server.filter.SimpleFilter]  →  SimpleFilter.beforeHandler($expr$, $arg$)

.afterHandler : cn.hutool.http.server.filter.SimpleFilter.afterHandler
	java.lang.String [cn.hutool.http.server.filter.SimpleFilter]  →  SimpleFilter.afterHandler($expr$, $arg$)


## AndroidSupportSSLFactory

.getDefault : cn.hutool.http.ssl.AndroidSupportSSLFactory.getDefault
	java.lang.Object [cn.hutool.http.ssl.AndroidSupportSSLFactory]  →  AndroidSupportSSLFactory.getDefault()


## CustomProtocolsSSLFactory

.getDefault : cn.hutool.http.ssl.CustomProtocolsSSLFactory.getDefault
	java.lang.Object [cn.hutool.http.ssl.CustomProtocolsSSLFactory]  →  CustomProtocolsSSLFactory.getDefault()


## DefaultSSLFactory

.getDefault : cn.hutool.http.ssl.DefaultSSLFactory.getDefault
	java.lang.Object [cn.hutool.http.ssl.DefaultSSLFactory]  →  DefaultSSLFactory.getDefault()


## Browser

.addCustomBrowser : cn.hutool.http.useragent.Browser.addCustomBrowser
	java.lang.String [cn.hutool.http.useragent.Browser]  →  Browser.addCustomBrowser($expr$, $arg$)


## OS

.addCustomOs : cn.hutool.http.useragent.OS.addCustomOs
	java.lang.String [cn.hutool.http.useragent.OS]  →  OS.addCustomOs($expr$, $arg$)


## UserAgentParser

.parse : cn.hutool.http.useragent.UserAgentParser.parse
	java.lang.String [cn.hutool.http.useragent.UserAgentParser]  →  UserAgentParser.parse($expr$)


## UserAgentUtil

.parse : cn.hutool.http.useragent.UserAgentUtil.parse
	java.lang.String [cn.hutool.http.useragent.UserAgentUtil]  →  UserAgentUtil.parse($expr$)


## SoapClient

.create : cn.hutool.http.webservice.SoapClient.create
	java.lang.String [cn.hutool.http.webservice.SoapClient]  →  SoapClient.create($expr$, $arg$)


## SoapUtil

.createClient : cn.hutool.http.webservice.SoapUtil.createClient
	java.lang.String [cn.hutool.http.webservice.SoapUtil]  →  SoapUtil.createClient($expr$, $arg$)

.toString : cn.hutool.http.webservice.SoapUtil.toString
	javax.xml.soap.SOAPMessage [cn.hutool.http.webservice.SoapUtil]  →  SoapUtil.toString($expr$, $arg$)


## InternalJSONUtil

.stringToValue : cn.hutool.json.InternalJSONUtil.stringToValue
	java.lang.String [cn.hutool.json.InternalJSONUtil]  →  InternalJSONUtil.stringToValue($expr$)


## JSONConfig

.create : cn.hutool.json.JSONConfig.create
	java.lang.Object [cn.hutool.json.JSONConfig]  →  JSONConfig.create()


## JSONStrFormatter

.format : cn.hutool.json.JSONStrFormatter.format
	java.lang.String [cn.hutool.json.JSONStrFormatter]  →  JSONStrFormatter.format($expr$)


## JSONUtil

.toXmlStr : cn.hutool.json.JSONUtil.toXmlStr
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.toXmlStr($expr$)

.createObj : cn.hutool.json.JSONUtil.createObj
	cn.hutool.json.JSONConfig [cn.hutool.json.JSONUtil]  →  JSONUtil.createObj($expr$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.createObj()

.createArray : cn.hutool.json.JSONUtil.createArray
	cn.hutool.json.JSONConfig [cn.hutool.json.JSONUtil]  →  JSONUtil.createArray($expr$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.createArray()

.isNull : cn.hutool.json.JSONUtil.isNull
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.isNull($expr$)

.toList : cn.hutool.json.JSONUtil.toList
	cn.hutool.json.JSONArray [cn.hutool.json.JSONUtil]  →  JSONUtil.toList($expr$, $arg$)
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.toList($expr$, $arg$)

.isJson : cn.hutool.json.JSONUtil.isJson
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.isJson($expr$)

.readJSONObject : cn.hutool.json.JSONUtil.readJSONObject
	java.io.File [cn.hutool.json.JSONUtil]  →  JSONUtil.readJSONObject($expr$, $arg$)

.getByPath : cn.hutool.json.JSONUtil.getByPath
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.getByPath($expr$, $arg$)

.isJsonObj : cn.hutool.json.JSONUtil.isJsonObj
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.isJsonObj($expr$)

.formatJsonStr : cn.hutool.json.JSONUtil.formatJsonStr
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.formatJsonStr($expr$)

.putByPath : cn.hutool.json.JSONUtil.putByPath
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.putByPath($expr$, $arg$)

.readJSONArray : cn.hutool.json.JSONUtil.readJSONArray
	java.io.File [cn.hutool.json.JSONUtil]  →  JSONUtil.readJSONArray($expr$, $arg$)

.toJsonPrettyStr : cn.hutool.json.JSONUtil.toJsonPrettyStr
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.toJsonPrettyStr($expr$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.toJsonPrettyStr($expr$)

.xmlToJson : cn.hutool.json.JSONUtil.xmlToJson
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.xmlToJson($expr$)

.quote : cn.hutool.json.JSONUtil.quote
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.quote($expr$, $arg$)

.wrap : cn.hutool.json.JSONUtil.wrap
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.wrap($expr$, $arg$)

.escape : cn.hutool.json.JSONUtil.escape
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.escape($expr$)

.parse : cn.hutool.json.JSONUtil.parse
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.parse($expr$, $arg$)

.parseObj : cn.hutool.json.JSONUtil.parseObj
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.parseObj($expr$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.parseObj($expr$, $arg$)

.toJsonStr : cn.hutool.json.JSONUtil.toJsonStr
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.toJsonStr($expr$, $arg$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.toJsonStr($expr$, $arg$)

.parseArray : cn.hutool.json.JSONUtil.parseArray
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.parseArray($expr$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.parseArray($expr$, $arg$)

.readJSON : cn.hutool.json.JSONUtil.readJSON
	java.io.File [cn.hutool.json.JSONUtil]  →  JSONUtil.readJSON($expr$, $arg$)

.isJsonArray : cn.hutool.json.JSONUtil.isJsonArray
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.isJsonArray($expr$)

.toBean : cn.hutool.json.JSONUtil.toBean
	cn.hutool.json.JSONObject [cn.hutool.json.JSONUtil]  →  JSONUtil.toBean($expr$, $arg$)
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.toBean($expr$, $arg$)
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.toBean($expr$, $arg$)

.parseFromXml : cn.hutool.json.JSONUtil.parseFromXml
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.parseFromXml($expr$)

.putSerializer : cn.hutool.json.JSONUtil.putSerializer
	java.lang.reflect.Type [cn.hutool.json.JSONUtil]  →  JSONUtil.putSerializer($expr$, $arg$)

.putDeserializer : cn.hutool.json.JSONUtil.putDeserializer
	java.lang.reflect.Type [cn.hutool.json.JSONUtil]  →  JSONUtil.putDeserializer($expr$, $arg$)


## XML

.toXml : cn.hutool.json.XML.toXml
	java.lang.Object [cn.hutool.json.XML]  →  XML.toXml($expr$, $arg$)

.toJSONObject : cn.hutool.json.XML.toJSONObject
	cn.hutool.json.JSONObject [cn.hutool.json.XML]  →  XML.toJSONObject($expr$, $arg$)
	java.lang.String [cn.hutool.json.XML]  →  XML.toJSONObject($expr$, $arg$)


## GlobalSerializeMapping

.getDeserializer : cn.hutool.json.serialize.GlobalSerializeMapping.getDeserializer
	java.lang.reflect.Type [cn.hutool.json.serialize.GlobalSerializeMapping]  →  GlobalSerializeMapping.getDeserializer($expr$)

.put : cn.hutool.json.serialize.GlobalSerializeMapping.put
	java.lang.reflect.Type [cn.hutool.json.serialize.GlobalSerializeMapping]  →  GlobalSerializeMapping.put($expr$, $arg$)

.getSerializer : cn.hutool.json.serialize.GlobalSerializeMapping.getSerializer
	java.lang.reflect.Type [cn.hutool.json.serialize.GlobalSerializeMapping]  →  GlobalSerializeMapping.getSerializer($expr$)


## JSONWriter

.of : cn.hutool.json.serialize.JSONWriter.of
	java.io.Writer [cn.hutool.json.serialize.JSONWriter]  →  JSONWriter.of($expr$, $arg$)

.nullWriter : cn.hutool.json.serialize.JSONWriter.nullWriter
	java.lang.Object [cn.hutool.json.serialize.JSONWriter]  →  JSONWriter.nullWriter()


## JSONXMLParser

.parseJSONObject : cn.hutool.json.xml.JSONXMLParser.parseJSONObject
	cn.hutool.json.JSONObject [cn.hutool.json.xml.JSONXMLParser]  →  JSONXMLParser.parseJSONObject($expr$, $arg$)


## JSONXMLSerializer

.toXml : cn.hutool.json.xml.JSONXMLSerializer.toXml
	java.lang.Object [cn.hutool.json.xml.JSONXMLSerializer]  →  JSONXMLSerializer.toXml($expr$, $arg$)


## JWT

.of : cn.hutool.jwt.JWT.of
	java.lang.String [cn.hutool.jwt.JWT]  →  JWT.of($expr$)

.create : cn.hutool.jwt.JWT.create
	java.lang.Object [cn.hutool.jwt.JWT]  →  JWT.create()


## JWTUtil

.verify : cn.hutool.jwt.JWTUtil.verify
	java.lang.String [cn.hutool.jwt.JWTUtil]  →  JWTUtil.verify($expr$, $arg$)

.createToken : cn.hutool.jwt.JWTUtil.createToken
	java.util.Map [cn.hutool.jwt.JWTUtil]  →  JWTUtil.createToken($expr$, $arg$)

.parseToken : cn.hutool.jwt.JWTUtil.parseToken
	java.lang.String [cn.hutool.jwt.JWTUtil]  →  JWTUtil.parseToken($expr$)


## JWTValidator

.of : cn.hutool.jwt.JWTValidator.of
	java.lang.String [cn.hutool.jwt.JWTValidator]  →  JWTValidator.of($expr$)
	cn.hutool.jwt.JWT [cn.hutool.jwt.JWTValidator]  →  JWTValidator.of($expr$)


## AlgorithmUtil

.getId : cn.hutool.jwt.signers.AlgorithmUtil.getId
	java.lang.String [cn.hutool.jwt.signers.AlgorithmUtil]  →  AlgorithmUtil.getId($expr$)

.getAlgorithm : cn.hutool.jwt.signers.AlgorithmUtil.getAlgorithm
	java.lang.String [cn.hutool.jwt.signers.AlgorithmUtil]  →  AlgorithmUtil.getAlgorithm($expr$)


## JWTSignerUtil

.es256 : cn.hutool.jwt.signers.JWTSignerUtil.es256
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.es256($expr$)

.es512 : cn.hutool.jwt.signers.JWTSignerUtil.es512
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.es512($expr$)

.rs256 : cn.hutool.jwt.signers.JWTSignerUtil.rs256
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.rs256($expr$)

.hs384 : cn.hutool.jwt.signers.JWTSignerUtil.hs384
	scala.Array [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.hs384($expr$)

.createSigner : cn.hutool.jwt.signers.JWTSignerUtil.createSigner
	java.lang.String [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.createSigner($expr$, $arg$)

.rs384 : cn.hutool.jwt.signers.JWTSignerUtil.rs384
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.rs384($expr$)

.es384 : cn.hutool.jwt.signers.JWTSignerUtil.es384
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.es384($expr$)

.rs512 : cn.hutool.jwt.signers.JWTSignerUtil.rs512
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.rs512($expr$)

.none : cn.hutool.jwt.signers.JWTSignerUtil.none
	java.lang.Object [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.none()

.hs256 : cn.hutool.jwt.signers.JWTSignerUtil.hs256
	scala.Array [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.hs256($expr$)

.hs512 : cn.hutool.jwt.signers.JWTSignerUtil.hs512
	scala.Array [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.hs512($expr$)


## GlobalLogFactory

.set : cn.hutool.log.GlobalLogFactory.set
	cn.hutool.log.LogFactory [cn.hutool.log.GlobalLogFactory]  →  GlobalLogFactory.set($expr$)
	java.lang.Class [cn.hutool.log.GlobalLogFactory]  →  GlobalLogFactory.set($expr$)

.get : cn.hutool.log.GlobalLogFactory.get
	java.lang.Object [cn.hutool.log.GlobalLogFactory]  →  GlobalLogFactory.get()


## Log

.get : cn.hutool.log.Log.get
	java.lang.String [cn.hutool.log.Log]  →  Log.get($expr$)
	java.lang.Class [cn.hutool.log.Log]  →  Log.get($expr$)
	java.lang.Object [cn.hutool.log.Log]  →  Log.get()


## LogFactory

.get : cn.hutool.log.LogFactory.get
	java.lang.String [cn.hutool.log.LogFactory]  →  LogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.LogFactory]  →  LogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.LogFactory]  →  LogFactory.get()

.setCurrentLogFactory : cn.hutool.log.LogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.LogFactory]  →  LogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.LogFactory]  →  LogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.LogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.LogFactory]  →  LogFactory.getCurrentLogFactory()

.create : cn.hutool.log.LogFactory.create
	java.lang.Object [cn.hutool.log.LogFactory]  →  LogFactory.create()


## StaticLog

.trace : cn.hutool.log.StaticLog.trace
	cn.hutool.log.Log [cn.hutool.log.StaticLog]  →  StaticLog.trace($expr$, $arg$)
	java.lang.String [cn.hutool.log.StaticLog]  →  StaticLog.trace($expr$, $arg$)

.warn : cn.hutool.log.StaticLog.warn
	cn.hutool.log.Log [cn.hutool.log.StaticLog]  →  StaticLog.warn($expr$, $arg$)
	java.lang.String [cn.hutool.log.StaticLog]  →  StaticLog.warn($expr$, $arg$)
	java.lang.Throwable [cn.hutool.log.StaticLog]  →  StaticLog.warn($expr$, $arg$)

.info : cn.hutool.log.StaticLog.info
	cn.hutool.log.Log [cn.hutool.log.StaticLog]  →  StaticLog.info($expr$, $arg$)
	java.lang.String [cn.hutool.log.StaticLog]  →  StaticLog.info($expr$, $arg$)

.debug : cn.hutool.log.StaticLog.debug
	cn.hutool.log.Log [cn.hutool.log.StaticLog]  →  StaticLog.debug($expr$, $arg$)
	java.lang.String [cn.hutool.log.StaticLog]  →  StaticLog.debug($expr$, $arg$)

.error : cn.hutool.log.StaticLog.error
	java.lang.String [cn.hutool.log.StaticLog]  →  StaticLog.error($expr$, $arg$)
	cn.hutool.log.Log [cn.hutool.log.StaticLog]  →  StaticLog.error($expr$, $arg$)
	java.lang.Throwable [cn.hutool.log.StaticLog]  →  StaticLog.error($expr$, $arg$)

.log : cn.hutool.log.StaticLog.log
	cn.hutool.log.level.Level [cn.hutool.log.StaticLog]  →  StaticLog.log($expr$, $arg$)


## ApacheCommonsLogFactory

.get : cn.hutool.log.dialect.commons.ApacheCommonsLogFactory.get
	java.lang.String [cn.hutool.log.dialect.commons.ApacheCommonsLogFactory]  →  ApacheCommonsLogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.commons.ApacheCommonsLogFactory]  →  ApacheCommonsLogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.commons.ApacheCommonsLogFactory]  →  ApacheCommonsLogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.commons.ApacheCommonsLogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.commons.ApacheCommonsLogFactory]  →  ApacheCommonsLogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.commons.ApacheCommonsLogFactory]  →  ApacheCommonsLogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.commons.ApacheCommonsLogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.commons.ApacheCommonsLogFactory]  →  ApacheCommonsLogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.commons.ApacheCommonsLogFactory.create
	java.lang.Object [cn.hutool.log.dialect.commons.ApacheCommonsLogFactory]  →  ApacheCommonsLogFactory.create()


## ConsoleLog

.setLevel : cn.hutool.log.dialect.console.ConsoleLog.setLevel
	cn.hutool.log.level.Level [cn.hutool.log.dialect.console.ConsoleLog]  →  ConsoleLog.setLevel($expr$)


## ConsoleLogFactory

.get : cn.hutool.log.dialect.console.ConsoleLogFactory.get
	java.lang.String [cn.hutool.log.dialect.console.ConsoleLogFactory]  →  ConsoleLogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.console.ConsoleLogFactory]  →  ConsoleLogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.console.ConsoleLogFactory]  →  ConsoleLogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.console.ConsoleLogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.console.ConsoleLogFactory]  →  ConsoleLogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.console.ConsoleLogFactory]  →  ConsoleLogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.console.ConsoleLogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.console.ConsoleLogFactory]  →  ConsoleLogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.console.ConsoleLogFactory.create
	java.lang.Object [cn.hutool.log.dialect.console.ConsoleLogFactory]  →  ConsoleLogFactory.create()


## JbossLogFactory

.get : cn.hutool.log.dialect.jboss.JbossLogFactory.get
	java.lang.String [cn.hutool.log.dialect.jboss.JbossLogFactory]  →  JbossLogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.jboss.JbossLogFactory]  →  JbossLogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.jboss.JbossLogFactory]  →  JbossLogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.jboss.JbossLogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.jboss.JbossLogFactory]  →  JbossLogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.jboss.JbossLogFactory]  →  JbossLogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.jboss.JbossLogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.jboss.JbossLogFactory]  →  JbossLogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.jboss.JbossLogFactory.create
	java.lang.Object [cn.hutool.log.dialect.jboss.JbossLogFactory]  →  JbossLogFactory.create()


## JdkLogFactory

.get : cn.hutool.log.dialect.jdk.JdkLogFactory.get
	java.lang.String [cn.hutool.log.dialect.jdk.JdkLogFactory]  →  JdkLogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.jdk.JdkLogFactory]  →  JdkLogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.jdk.JdkLogFactory]  →  JdkLogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.jdk.JdkLogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.jdk.JdkLogFactory]  →  JdkLogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.jdk.JdkLogFactory]  →  JdkLogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.jdk.JdkLogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.jdk.JdkLogFactory]  →  JdkLogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.jdk.JdkLogFactory.create
	java.lang.Object [cn.hutool.log.dialect.jdk.JdkLogFactory]  →  JdkLogFactory.create()


## Log4jLogFactory

.get : cn.hutool.log.dialect.log4j.Log4jLogFactory.get
	java.lang.String [cn.hutool.log.dialect.log4j.Log4jLogFactory]  →  Log4jLogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.log4j.Log4jLogFactory]  →  Log4jLogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.log4j.Log4jLogFactory]  →  Log4jLogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.log4j.Log4jLogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.log4j.Log4jLogFactory]  →  Log4jLogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.log4j.Log4jLogFactory]  →  Log4jLogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.log4j.Log4jLogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.log4j.Log4jLogFactory]  →  Log4jLogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.log4j.Log4jLogFactory.create
	java.lang.Object [cn.hutool.log.dialect.log4j.Log4jLogFactory]  →  Log4jLogFactory.create()


## Log4j2LogFactory

.get : cn.hutool.log.dialect.log4j2.Log4j2LogFactory.get
	java.lang.String [cn.hutool.log.dialect.log4j2.Log4j2LogFactory]  →  Log4j2LogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.log4j2.Log4j2LogFactory]  →  Log4j2LogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.log4j2.Log4j2LogFactory]  →  Log4j2LogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.log4j2.Log4j2LogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.log4j2.Log4j2LogFactory]  →  Log4j2LogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.log4j2.Log4j2LogFactory]  →  Log4j2LogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.log4j2.Log4j2LogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.log4j2.Log4j2LogFactory]  →  Log4j2LogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.log4j2.Log4j2LogFactory.create
	java.lang.Object [cn.hutool.log.dialect.log4j2.Log4j2LogFactory]  →  Log4j2LogFactory.create()


## LogTubeLogFactory

.get : cn.hutool.log.dialect.logtube.LogTubeLogFactory.get
	java.lang.String [cn.hutool.log.dialect.logtube.LogTubeLogFactory]  →  LogTubeLogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.logtube.LogTubeLogFactory]  →  LogTubeLogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.logtube.LogTubeLogFactory]  →  LogTubeLogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.logtube.LogTubeLogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.logtube.LogTubeLogFactory]  →  LogTubeLogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.logtube.LogTubeLogFactory]  →  LogTubeLogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.logtube.LogTubeLogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.logtube.LogTubeLogFactory]  →  LogTubeLogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.logtube.LogTubeLogFactory.create
	java.lang.Object [cn.hutool.log.dialect.logtube.LogTubeLogFactory]  →  LogTubeLogFactory.create()


## Slf4jLogFactory

.get : cn.hutool.log.dialect.slf4j.Slf4jLogFactory.get
	java.lang.String [cn.hutool.log.dialect.slf4j.Slf4jLogFactory]  →  Slf4jLogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.slf4j.Slf4jLogFactory]  →  Slf4jLogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.slf4j.Slf4jLogFactory]  →  Slf4jLogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.slf4j.Slf4jLogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.slf4j.Slf4jLogFactory]  →  Slf4jLogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.slf4j.Slf4jLogFactory]  →  Slf4jLogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.slf4j.Slf4jLogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.slf4j.Slf4jLogFactory]  →  Slf4jLogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.slf4j.Slf4jLogFactory.create
	java.lang.Object [cn.hutool.log.dialect.slf4j.Slf4jLogFactory]  →  Slf4jLogFactory.create()


## TinyLog2Factory

.get : cn.hutool.log.dialect.tinylog.TinyLog2Factory.get
	java.lang.String [cn.hutool.log.dialect.tinylog.TinyLog2Factory]  →  TinyLog2Factory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.tinylog.TinyLog2Factory]  →  TinyLog2Factory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.tinylog.TinyLog2Factory]  →  TinyLog2Factory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.tinylog.TinyLog2Factory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.tinylog.TinyLog2Factory]  →  TinyLog2Factory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.tinylog.TinyLog2Factory]  →  TinyLog2Factory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.tinylog.TinyLog2Factory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.tinylog.TinyLog2Factory]  →  TinyLog2Factory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.tinylog.TinyLog2Factory.create
	java.lang.Object [cn.hutool.log.dialect.tinylog.TinyLog2Factory]  →  TinyLog2Factory.create()


## TinyLogFactory

.get : cn.hutool.log.dialect.tinylog.TinyLogFactory.get
	java.lang.String [cn.hutool.log.dialect.tinylog.TinyLogFactory]  →  TinyLogFactory.get($expr$)
	java.lang.Class [cn.hutool.log.dialect.tinylog.TinyLogFactory]  →  TinyLogFactory.get($expr$)
	java.lang.Object [cn.hutool.log.dialect.tinylog.TinyLogFactory]  →  TinyLogFactory.get()

.setCurrentLogFactory : cn.hutool.log.dialect.tinylog.TinyLogFactory.setCurrentLogFactory
	cn.hutool.log.LogFactory [cn.hutool.log.dialect.tinylog.TinyLogFactory]  →  TinyLogFactory.setCurrentLogFactory($expr$)
	java.lang.Class [cn.hutool.log.dialect.tinylog.TinyLogFactory]  →  TinyLogFactory.setCurrentLogFactory($expr$)

.getCurrentLogFactory : cn.hutool.log.dialect.tinylog.TinyLogFactory.getCurrentLogFactory
	java.lang.Object [cn.hutool.log.dialect.tinylog.TinyLogFactory]  →  TinyLogFactory.getCurrentLogFactory()

.create : cn.hutool.log.dialect.tinylog.TinyLogFactory.create
	java.lang.Object [cn.hutool.log.dialect.tinylog.TinyLogFactory]  →  TinyLogFactory.create()


## PoiChecker

.checkPoiImport : cn.hutool.poi.PoiChecker.checkPoiImport
	java.lang.Object [cn.hutool.poi.PoiChecker]  →  PoiChecker.checkPoiImport()


## ExcelDateUtil

.isDateFormat : cn.hutool.poi.excel.ExcelDateUtil.isDateFormat
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.ExcelDateUtil]  →  ExcelDateUtil.isDateFormat($expr$, $arg$)
	org.apache.poi.ss.usermodel.ExcelNumberFormat [cn.hutool.poi.excel.ExcelDateUtil]  →  ExcelDateUtil.isDateFormat($expr$)
	INT [cn.hutool.poi.excel.ExcelDateUtil]  →  ExcelDateUtil.isDateFormat($expr$, $arg$)


## ExcelExtractorUtil

.getExtractor : cn.hutool.poi.excel.ExcelExtractorUtil.getExtractor
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelExtractorUtil]  →  ExcelExtractorUtil.getExtractor($expr$)

.readAsText : cn.hutool.poi.excel.ExcelExtractorUtil.readAsText
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelExtractorUtil]  →  ExcelExtractorUtil.readAsText($expr$, $arg$)


## ExcelFileUtil

.isXlsx : cn.hutool.poi.excel.ExcelFileUtil.isXlsx
	java.io.File [cn.hutool.poi.excel.ExcelFileUtil]  →  ExcelFileUtil.isXlsx($expr$)
	java.io.InputStream [cn.hutool.poi.excel.ExcelFileUtil]  →  ExcelFileUtil.isXlsx($expr$)

.isXls : cn.hutool.poi.excel.ExcelFileUtil.isXls
	java.io.InputStream [cn.hutool.poi.excel.ExcelFileUtil]  →  ExcelFileUtil.isXls($expr$)


## ExcelPicUtil

.getPicMap : cn.hutool.poi.excel.ExcelPicUtil.getPicMap
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelPicUtil]  →  ExcelPicUtil.getPicMap($expr$, $arg$)


## ExcelUtil

.colNameToIndex : cn.hutool.poi.excel.ExcelUtil.colNameToIndex
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.colNameToIndex($expr$)

.getBigWriter : cn.hutool.poi.excel.ExcelUtil.getBigWriter
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getBigWriter($expr$, $arg$)
	INT [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getBigWriter($expr$)
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getBigWriter($expr$, $arg$)
	java.lang.Object [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getBigWriter()

.readBySax : cn.hutool.poi.excel.ExcelUtil.readBySax
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.readBySax($expr$, $arg$)
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.readBySax($expr$, $arg$)
	java.io.InputStream [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.readBySax($expr$, $arg$)

.getWriterWithSheet : cn.hutool.poi.excel.ExcelUtil.getWriterWithSheet
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriterWithSheet($expr$)

.getWriter : cn.hutool.poi.excel.ExcelUtil.getWriter
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriter($expr$, $arg$)
	BOOLEAN [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriter($expr$)
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriter($expr$, $arg$)
	java.lang.Object [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriter()

.indexToColName : cn.hutool.poi.excel.ExcelUtil.indexToColName
	INT [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.indexToColName($expr$)

.toLocation : cn.hutool.poi.excel.ExcelUtil.toLocation
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.toLocation($expr$)

.getReader : cn.hutool.poi.excel.ExcelUtil.getReader
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getReader($expr$, $arg$)
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getReader($expr$, $arg$)
	java.io.InputStream [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getReader($expr$, $arg$)


## RowUtil

.writeRow : cn.hutool.poi.excel.RowUtil.writeRow
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  RowUtil.writeRow($expr$, $arg$)

.insertRow : cn.hutool.poi.excel.RowUtil.insertRow
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.RowUtil]  →  RowUtil.insertRow($expr$, $arg$)

.getOrCreateRow : cn.hutool.poi.excel.RowUtil.getOrCreateRow
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.RowUtil]  →  RowUtil.getOrCreateRow($expr$, $arg$)

.readRow : cn.hutool.poi.excel.RowUtil.readRow
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  RowUtil.readRow($expr$, $arg$)

.removeRow : cn.hutool.poi.excel.RowUtil.removeRow
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  RowUtil.removeRow($expr$)


## WorkbookUtil

.createBookForWriter : cn.hutool.poi.excel.WorkbookUtil.createBookForWriter
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBookForWriter($expr$)

.writeBook : cn.hutool.poi.excel.WorkbookUtil.writeBook
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.writeBook($expr$, $arg$)

.createBook : cn.hutool.poi.excel.WorkbookUtil.createBook
	java.lang.String [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBook($expr$)
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBook($expr$, $arg$)
	BOOLEAN [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBook($expr$)
	java.io.InputStream [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBook($expr$, $arg$)

.createSXSSFBook : cn.hutool.poi.excel.WorkbookUtil.createSXSSFBook
	java.lang.String [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook($expr$)
	INT [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook($expr$)
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook($expr$, $arg$)
	java.io.InputStream [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook($expr$, $arg$)
	java.lang.Object [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook()

.isEmpty : cn.hutool.poi.excel.WorkbookUtil.isEmpty
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.isEmpty($expr$)

.getOrCreateSheet : cn.hutool.poi.excel.WorkbookUtil.getOrCreateSheet
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.getOrCreateSheet($expr$, $arg$)


## CellUtil

.setComment : cn.hutool.poi.excel.cell.CellUtil.setComment
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.setComment($expr$, $arg$)

.setCellValue : cn.hutool.poi.excel.cell.CellUtil.setCellValue
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.setCellValue($expr$, $arg$)

.getMergedRegionValue : cn.hutool.poi.excel.cell.CellUtil.getMergedRegionValue
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getMergedRegionValue($expr$, $arg$)

.getCellValue : cn.hutool.poi.excel.cell.CellUtil.getCellValue
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getCellValue($expr$, $arg$)

.getCell : cn.hutool.poi.excel.cell.CellUtil.getCell
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getCell($expr$, $arg$)

.isMergedRegion : cn.hutool.poi.excel.cell.CellUtil.isMergedRegion
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.isMergedRegion($expr$, $arg$)
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.isMergedRegion($expr$)

.getMergedRegionCell : cn.hutool.poi.excel.cell.CellUtil.getMergedRegionCell
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getMergedRegionCell($expr$, $arg$)
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getMergedRegionCell($expr$)

.mergingCells : cn.hutool.poi.excel.cell.CellUtil.mergingCells
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.mergingCells($expr$, $arg$)

.getOrCreateCell : cn.hutool.poi.excel.cell.CellUtil.getOrCreateCell
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getOrCreateCell($expr$, $arg$)


## CellSetterFactory

.createCellSetter : cn.hutool.poi.excel.cell.setters.CellSetterFactory.createCellSetter
	java.lang.Object [cn.hutool.poi.excel.cell.setters.CellSetterFactory]  →  CellSetterFactory.createCellSetter($expr$)


## ExcelSaxUtil

.countNullCell : cn.hutool.poi.excel.sax.ExcelSaxUtil.countNullCell
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.countNullCell($expr$, $arg$)

.getDateValue : cn.hutool.poi.excel.sax.ExcelSaxUtil.getDateValue
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.getDateValue($expr$)
	DOUBLE [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.getDateValue($expr$)

.readFrom : cn.hutool.poi.excel.sax.ExcelSaxUtil.readFrom
	java.io.InputStream [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.readFrom($expr$, $arg$)

.formatCellContent : cn.hutool.poi.excel.sax.ExcelSaxUtil.formatCellContent
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.formatCellContent($expr$, $arg$)

.createSaxReader : cn.hutool.poi.excel.sax.ExcelSaxUtil.createSaxReader
	BOOLEAN [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.createSaxReader($expr$, $arg$)

.isDateFormat : cn.hutool.poi.excel.sax.ExcelSaxUtil.isDateFormat
	INT [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.isDateFormat($expr$, $arg$)
	org.apache.poi.hssf.record.CellValueRecordInterface [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.isDateFormat($expr$, $arg$)

.getNumberOrDateValue : cn.hutool.poi.excel.sax.ExcelSaxUtil.getNumberOrDateValue
	org.apache.poi.hssf.record.CellValueRecordInterface [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.getNumberOrDateValue($expr$, $arg$)

.getDataValue : cn.hutool.poi.excel.sax.ExcelSaxUtil.getDataValue
	cn.hutool.poi.excel.sax.CellDataType [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.getDataValue($expr$, $arg$)


## SheetRidReader

.parse : cn.hutool.poi.excel.sax.SheetRidReader.parse
	org.apache.poi.xssf.eventusermodel.XSSFReader [cn.hutool.poi.excel.sax.SheetRidReader]  →  SheetRidReader.parse($expr$)


## StyleUtil

.createCellStyle : cn.hutool.poi.excel.style.StyleUtil.createCellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.createCellStyle($expr$)

.createFont : cn.hutool.poi.excel.style.StyleUtil.createFont
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.createFont($expr$, $arg$)

.setAlign : cn.hutool.poi.excel.style.StyleUtil.setAlign
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.setAlign($expr$, $arg$)

.isNullOrDefaultStyle : cn.hutool.poi.excel.style.StyleUtil.isNullOrDefaultStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.isNullOrDefaultStyle($expr$, $arg$)

.getFormat : cn.hutool.poi.excel.style.StyleUtil.getFormat
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.getFormat($expr$, $arg$)

.setBorder : cn.hutool.poi.excel.style.StyleUtil.setBorder
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.setBorder($expr$, $arg$)

.cloneCellStyle : cn.hutool.poi.excel.style.StyleUtil.cloneCellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.cloneCellStyle($expr$, $arg$)
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.cloneCellStyle($expr$, $arg$)

.createDefaultCellStyle : cn.hutool.poi.excel.style.StyleUtil.createDefaultCellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.createDefaultCellStyle($expr$)

.setColor : cn.hutool.poi.excel.style.StyleUtil.setColor
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.setColor($expr$, $arg$)

.setFontStyle : cn.hutool.poi.excel.style.StyleUtil.setFontStyle
	org.apache.poi.ss.usermodel.Font [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.setFontStyle($expr$, $arg$)

.createHeadCellStyle : cn.hutool.poi.excel.style.StyleUtil.createHeadCellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.createHeadCellStyle($expr$)


## DocUtil

.create : cn.hutool.poi.word.DocUtil.create
	java.io.File [cn.hutool.poi.word.DocUtil]  →  DocUtil.create($expr$)


## TableUtil

.writeRow : cn.hutool.poi.word.TableUtil.writeRow
	org.apache.poi.xwpf.usermodel.XWPFTableRow [cn.hutool.poi.word.TableUtil]  →  TableUtil.writeRow($expr$, $arg$)

.getOrCreateRow : cn.hutool.poi.word.TableUtil.getOrCreateRow
	org.apache.poi.xwpf.usermodel.XWPFTable [cn.hutool.poi.word.TableUtil]  →  TableUtil.getOrCreateRow($expr$, $arg$)

.createTable : cn.hutool.poi.word.TableUtil.createTable
	org.apache.poi.xwpf.usermodel.XWPFDocument [cn.hutool.poi.word.TableUtil]  →  TableUtil.createTable($expr$, $arg$)

.writeTable : cn.hutool.poi.word.TableUtil.writeTable
	org.apache.poi.xwpf.usermodel.XWPFTable [cn.hutool.poi.word.TableUtil]  →  TableUtil.writeTable($expr$, $arg$)

.getOrCreateCell : cn.hutool.poi.word.TableUtil.getOrCreateCell
	org.apache.poi.xwpf.usermodel.XWPFTableRow [cn.hutool.poi.word.TableUtil]  →  TableUtil.getOrCreateCell($expr$, $arg$)


## WordUtil

.getWriter : cn.hutool.poi.word.WordUtil.getWriter
	java.io.File [cn.hutool.poi.word.WordUtil]  →  WordUtil.getWriter($expr$)
	java.lang.Object [cn.hutool.poi.word.WordUtil]  →  WordUtil.getWriter()


## JavaScriptEngine

.instance : cn.hutool.script.JavaScriptEngine.instance
	java.lang.Object [cn.hutool.script.JavaScriptEngine]  →  JavaScriptEngine.instance()


## ScriptUtil

.createScript : cn.hutool.script.ScriptUtil.createScript
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.createScript($expr$)

.getLuaEngine : cn.hutool.script.ScriptUtil.getLuaEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.getLuaEngine()

.createPythonEngine : cn.hutool.script.ScriptUtil.createPythonEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.createPythonEngine()

.getJsEngine : cn.hutool.script.ScriptUtil.getJsEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.getJsEngine()

.compile : cn.hutool.script.ScriptUtil.compile
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.compile($expr$)
	javax.script.ScriptEngine [cn.hutool.script.ScriptUtil]  →  ScriptUtil.compile($expr$, $arg$)

.createJsEngine : cn.hutool.script.ScriptUtil.createJsEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.createJsEngine()

.getPythonEngine : cn.hutool.script.ScriptUtil.getPythonEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.getPythonEngine()

.eval : cn.hutool.script.ScriptUtil.eval
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.eval($expr$, $arg$)

.invoke : cn.hutool.script.ScriptUtil.invoke
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.invoke($expr$, $arg$)

.getGroovyEngine : cn.hutool.script.ScriptUtil.getGroovyEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.getGroovyEngine()

.createLuaEngine : cn.hutool.script.ScriptUtil.createLuaEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.createLuaEngine()

.getJavaScriptEngine : cn.hutool.script.ScriptUtil.getJavaScriptEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.getJavaScriptEngine()

.createGroovyEngine : cn.hutool.script.ScriptUtil.createGroovyEngine
	java.lang.Object [cn.hutool.script.ScriptUtil]  →  ScriptUtil.createGroovyEngine()

.evalInvocable : cn.hutool.script.ScriptUtil.evalInvocable
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.evalInvocable($expr$)

.getScript : cn.hutool.script.ScriptUtil.getScript
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.getScript($expr$)


## Setting

.create : cn.hutool.setting.Setting.create
	java.lang.Object [cn.hutool.setting.Setting]  →  Setting.create()


## SettingUtil

.get : cn.hutool.setting.SettingUtil.get
	java.lang.String [cn.hutool.setting.SettingUtil]  →  SettingUtil.get($expr$)

.getFirstFound : cn.hutool.setting.SettingUtil.getFirstFound
	scala.Array [cn.hutool.setting.SettingUtil]  →  SettingUtil.getFirstFound($expr$)


## Props

.getProp : cn.hutool.setting.dialect.Props.getProp
	java.lang.String [cn.hutool.setting.dialect.Props]  →  Props.getProp($expr$, $arg$)

.create : cn.hutool.setting.dialect.Props.create
	java.lang.Object [cn.hutool.setting.dialect.Props]  →  Props.create()


## PropsUtil

.getSystemProps : cn.hutool.setting.dialect.PropsUtil.getSystemProps
	java.lang.Object [cn.hutool.setting.dialect.PropsUtil]  →  PropsUtil.getSystemProps()

.get : cn.hutool.setting.dialect.PropsUtil.get
	java.lang.String [cn.hutool.setting.dialect.PropsUtil]  →  PropsUtil.get($expr$)

.getFirstFound : cn.hutool.setting.dialect.PropsUtil.getFirstFound
	scala.Array [cn.hutool.setting.dialect.PropsUtil]  →  PropsUtil.getFirstFound($expr$)


## GlobalProfile

.getSetting : cn.hutool.setting.profile.GlobalProfile.getSetting
	java.lang.String [cn.hutool.setting.profile.GlobalProfile]  →  GlobalProfile.getSetting($expr$)

.setProfile : cn.hutool.setting.profile.GlobalProfile.setProfile
	java.lang.String [cn.hutool.setting.profile.GlobalProfile]  →  GlobalProfile.setProfile($expr$)


## YamlUtil

.dump : cn.hutool.setting.yaml.YamlUtil.dump
	java.lang.Object [cn.hutool.setting.yaml.YamlUtil]  →  YamlUtil.dump($expr$, $arg$)

.load : cn.hutool.setting.yaml.YamlUtil.load
	java.io.Reader [cn.hutool.setting.yaml.YamlUtil]  →  YamlUtil.load($expr$, $arg$)
	java.io.InputStream [cn.hutool.setting.yaml.YamlUtil]  →  YamlUtil.load($expr$, $arg$)

.loadByPath : cn.hutool.setting.yaml.YamlUtil.loadByPath
	java.lang.String [cn.hutool.setting.yaml.YamlUtil]  →  YamlUtil.loadByPath($expr$, $arg$)


## SocketUtil

.isConnected : cn.hutool.socket.SocketUtil.isConnected
	java.nio.channels.AsynchronousSocketChannel [cn.hutool.socket.SocketUtil]  →  SocketUtil.isConnected($expr$)

.getRemoteAddress : cn.hutool.socket.SocketUtil.getRemoteAddress
	java.nio.channels.AsynchronousSocketChannel [cn.hutool.socket.SocketUtil]  →  SocketUtil.getRemoteAddress($expr$)

.connect : cn.hutool.socket.SocketUtil.connect
	java.lang.String [cn.hutool.socket.SocketUtil]  →  SocketUtil.connect($expr$, $arg$)
	java.net.InetSocketAddress [cn.hutool.socket.SocketUtil]  →  SocketUtil.connect($expr$, $arg$)


## NioUtil

.registerChannel : cn.hutool.socket.nio.NioUtil.registerChannel
	java.nio.channels.Selector [cn.hutool.socket.nio.NioUtil]  →  NioUtil.registerChannel($expr$, $arg$)


## SystemUtil

.getRuntimeMXBean : cn.hutool.system.SystemUtil.getRuntimeMXBean
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getRuntimeMXBean()

.getCompilationMXBean : cn.hutool.system.SystemUtil.getCompilationMXBean
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getCompilationMXBean()

.getGarbageCollectorMXBeans : cn.hutool.system.SystemUtil.getGarbageCollectorMXBeans
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getGarbageCollectorMXBeans()

.getUserInfo : cn.hutool.system.SystemUtil.getUserInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getUserInfo()

.getJavaInfo : cn.hutool.system.SystemUtil.getJavaInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getJavaInfo()

.getHostInfo : cn.hutool.system.SystemUtil.getHostInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getHostInfo()

.getThreadMXBean : cn.hutool.system.SystemUtil.getThreadMXBean
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getThreadMXBean()

.set : cn.hutool.system.SystemUtil.set
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.set($expr$, $arg$)

.getJavaSpecInfo : cn.hutool.system.SystemUtil.getJavaSpecInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getJavaSpecInfo()

.getTotalMemory : cn.hutool.system.SystemUtil.getTotalMemory
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getTotalMemory()

.getFreeMemory : cn.hutool.system.SystemUtil.getFreeMemory
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getFreeMemory()

.getJavaRuntimeInfo : cn.hutool.system.SystemUtil.getJavaRuntimeInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getJavaRuntimeInfo()

.getMemoryManagerMXBeans : cn.hutool.system.SystemUtil.getMemoryManagerMXBeans
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getMemoryManagerMXBeans()

.getTotalThreadCount : cn.hutool.system.SystemUtil.getTotalThreadCount
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getTotalThreadCount()

.getMemoryMXBean : cn.hutool.system.SystemUtil.getMemoryMXBean
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getMemoryMXBean()

.getCurrentPID : cn.hutool.system.SystemUtil.getCurrentPID
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getCurrentPID()

.getClassLoadingMXBean : cn.hutool.system.SystemUtil.getClassLoadingMXBean
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getClassLoadingMXBean()

.getInt : cn.hutool.system.SystemUtil.getInt
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.getInt($expr$, $arg$)

.getJvmInfo : cn.hutool.system.SystemUtil.getJvmInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getJvmInfo()

.getRuntimeInfo : cn.hutool.system.SystemUtil.getRuntimeInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getRuntimeInfo()

.getOperatingSystemMXBean : cn.hutool.system.SystemUtil.getOperatingSystemMXBean
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getOperatingSystemMXBean()

.getBoolean : cn.hutool.system.SystemUtil.getBoolean
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.getBoolean($expr$, $arg$)

.get : cn.hutool.system.SystemUtil.get
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.get($expr$, $arg$)

.getMaxMemory : cn.hutool.system.SystemUtil.getMaxMemory
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getMaxMemory()

.getJvmSpecInfo : cn.hutool.system.SystemUtil.getJvmSpecInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getJvmSpecInfo()

.getProps : cn.hutool.system.SystemUtil.getProps
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getProps()

.dumpSystemInfo : cn.hutool.system.SystemUtil.dumpSystemInfo
	java.io.PrintWriter [cn.hutool.system.SystemUtil]  →  SystemUtil.dumpSystemInfo($expr$)
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.dumpSystemInfo()

.getOsInfo : cn.hutool.system.SystemUtil.getOsInfo
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getOsInfo()

.getMemoryPoolMXBeans : cn.hutool.system.SystemUtil.getMemoryPoolMXBeans
	java.lang.Object [cn.hutool.system.SystemUtil]  →  SystemUtil.getMemoryPoolMXBeans()

.getLong : cn.hutool.system.SystemUtil.getLong
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.getLong($expr$, $arg$)


## OshiUtil

.getMemory : cn.hutool.system.oshi.OshiUtil.getMemory
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getMemory()

.getSensors : cn.hutool.system.oshi.OshiUtil.getSensors
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getSensors()

.getSystem : cn.hutool.system.oshi.OshiUtil.getSystem
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getSystem()

.getCpuInfo : cn.hutool.system.oshi.OshiUtil.getCpuInfo
	LONG [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getCpuInfo($expr$)
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getCpuInfo()

.getCurrentProcess : cn.hutool.system.oshi.OshiUtil.getCurrentProcess
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getCurrentProcess()

.getHardware : cn.hutool.system.oshi.OshiUtil.getHardware
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getHardware()

.getProcessor : cn.hutool.system.oshi.OshiUtil.getProcessor
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getProcessor()

.getOs : cn.hutool.system.oshi.OshiUtil.getOs
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getOs()

.getDiskStores : cn.hutool.system.oshi.OshiUtil.getDiskStores
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getDiskStores()

.getNetworkIFs : cn.hutool.system.oshi.OshiUtil.getNetworkIFs
	java.lang.Object [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getNetworkIFs()


## Optional

.ofNullable : java.util.Optional.ofNullable
	java.lang.Object [java.util.Optional]  →  Optional.ofNullable($expr$)

.of : java.util.Optional.of
	java.lang.Object [java.util.Optional]  →  Optional.of($expr$)

.empty : java.util.Optional.empty
	java.lang.Object [java.util.Optional]  →  Optional.empty()


## Collectors

.joining : java.util.stream.Collectors.joining
	java.lang.CharSequence [java.util.stream.Collectors]  →  Collectors.joining($expr$, $arg$)
	java.lang.Object [java.util.stream.Collectors]  →  Collectors.joining()

.partitioningBy : java.util.stream.Collectors.partitioningBy
	java.util.function.Predicate [java.util.stream.Collectors]  →  Collectors.partitioningBy($expr$, $arg$)

.summingLong : java.util.stream.Collectors.summingLong
	java.util.function.ToLongFunction [java.util.stream.Collectors]  →  Collectors.summingLong($expr$)

.groupingBy : java.util.stream.Collectors.groupingBy
	java.util.function.Function [java.util.stream.Collectors]  →  Collectors.groupingBy($expr$, $arg$)

.summarizingLong : java.util.stream.Collectors.summarizingLong
	java.util.function.ToLongFunction [java.util.stream.Collectors]  →  Collectors.summarizingLong($expr$)

.toUnmodifiableSet : java.util.stream.Collectors.toUnmodifiableSet
	java.lang.Object [java.util.stream.Collectors]  →  Collectors.toUnmodifiableSet()

.minBy : java.util.stream.Collectors.minBy
	java.util.Comparator [java.util.stream.Collectors]  →  Collectors.minBy($expr$)

.summarizingInt : java.util.stream.Collectors.summarizingInt
	java.util.function.ToIntFunction [java.util.stream.Collectors]  →  Collectors.summarizingInt($expr$)

.toSet : java.util.stream.Collectors.toSet
	java.lang.Object [java.util.stream.Collectors]  →  Collectors.toSet()

.toMap : java.util.stream.Collectors.toMap
	java.util.function.Function [java.util.stream.Collectors]  →  Collectors.toMap($expr$, $arg$)

.averagingLong : java.util.stream.Collectors.averagingLong
	java.util.function.ToLongFunction [java.util.stream.Collectors]  →  Collectors.averagingLong($expr$)

.toList : java.util.stream.Collectors.toList
	java.lang.Object [java.util.stream.Collectors]  →  Collectors.toList()

.teeing : java.util.stream.Collectors.teeing
	java.util.stream.Collector [java.util.stream.Collectors]  →  Collectors.teeing($expr$, $arg$)

.mapping : java.util.stream.Collectors.mapping
	java.util.function.Function [java.util.stream.Collectors]  →  Collectors.mapping($expr$, $arg$)

.summingDouble : java.util.stream.Collectors.summingDouble
	java.util.function.ToDoubleFunction [java.util.stream.Collectors]  →  Collectors.summingDouble($expr$)

.summingInt : java.util.stream.Collectors.summingInt
	java.util.function.ToIntFunction [java.util.stream.Collectors]  →  Collectors.summingInt($expr$)

.toConcurrentMap : java.util.stream.Collectors.toConcurrentMap
	java.util.function.Function [java.util.stream.Collectors]  →  Collectors.toConcurrentMap($expr$, $arg$)

.maxBy : java.util.stream.Collectors.maxBy
	java.util.Comparator [java.util.stream.Collectors]  →  Collectors.maxBy($expr$)

.toUnmodifiableMap : java.util.stream.Collectors.toUnmodifiableMap
	java.util.function.Function [java.util.stream.Collectors]  →  Collectors.toUnmodifiableMap($expr$, $arg$)

.counting : java.util.stream.Collectors.counting
	java.lang.Object [java.util.stream.Collectors]  →  Collectors.counting()

.groupingByConcurrent : java.util.stream.Collectors.groupingByConcurrent
	java.util.function.Function [java.util.stream.Collectors]  →  Collectors.groupingByConcurrent($expr$, $arg$)

.reducing : java.util.stream.Collectors.reducing
	java.util.function.BinaryOperator [java.util.stream.Collectors]  →  Collectors.reducing($expr$)
	java.lang.Object [java.util.stream.Collectors]  →  Collectors.reducing($expr$, $arg$)

.summarizingDouble : java.util.stream.Collectors.summarizingDouble
	java.util.function.ToDoubleFunction [java.util.stream.Collectors]  →  Collectors.summarizingDouble($expr$)

.filtering : java.util.stream.Collectors.filtering
	java.util.function.Predicate [java.util.stream.Collectors]  →  Collectors.filtering($expr$, $arg$)

.flatMapping : java.util.stream.Collectors.flatMapping
	java.util.function.Function [java.util.stream.Collectors]  →  Collectors.flatMapping($expr$, $arg$)

.toCollection : java.util.stream.Collectors.toCollection
	java.util.function.Supplier [java.util.stream.Collectors]  →  Collectors.toCollection($expr$)

.averagingDouble : java.util.stream.Collectors.averagingDouble
	java.util.function.ToDoubleFunction [java.util.stream.Collectors]  →  Collectors.averagingDouble($expr$)

.toUnmodifiableList : java.util.stream.Collectors.toUnmodifiableList
	java.lang.Object [java.util.stream.Collectors]  →  Collectors.toUnmodifiableList()

.collectingAndThen : java.util.stream.Collectors.collectingAndThen
	java.util.stream.Collector [java.util.stream.Collectors]  →  Collectors.collectingAndThen($expr$, $arg$)

.averagingInt : java.util.stream.Collectors.averagingInt
	java.util.function.ToIntFunction [java.util.stream.Collectors]  →  Collectors.averagingInt($expr$)


## Collections

.unmodifiableNavigableSet : java.util.Collections.unmodifiableNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  Collections.unmodifiableNavigableSet($expr$)

.checkedSortedMap : java.util.Collections.checkedSortedMap
	java.util.SortedMap [java.util.Collections]  →  Collections.checkedSortedMap($expr$, $arg$)

.emptyIterator : java.util.Collections.emptyIterator
	java.lang.Object [java.util.Collections]  →  Collections.emptyIterator()

.unmodifiableList : java.util.Collections.unmodifiableList
	java.util.List [java.util.Collections]  →  Collections.unmodifiableList($expr$)

.synchronizedCollection : java.util.Collections.synchronizedCollection
	java.util.Collection [java.util.Collections]  →  Collections.synchronizedCollection($expr$)

.asLifoQueue : java.util.Collections.asLifoQueue
	java.util.Deque [java.util.Collections]  →  Collections.asLifoQueue($expr$)

.checkedQueue : java.util.Collections.checkedQueue
	java.util.Queue [java.util.Collections]  →  Collections.checkedQueue($expr$, $arg$)

.reverseOrder : java.util.Collections.reverseOrder
	java.util.Comparator [java.util.Collections]  →  Collections.reverseOrder($expr$)
	java.lang.Object [java.util.Collections]  →  Collections.reverseOrder()

.synchronizedSet : java.util.Collections.synchronizedSet
	java.util.Set [java.util.Collections]  →  Collections.synchronizedSet($expr$)

.synchronizedNavigableMap : java.util.Collections.synchronizedNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  Collections.synchronizedNavigableMap($expr$)

.emptyEnumeration : java.util.Collections.emptyEnumeration
	java.lang.Object [java.util.Collections]  →  Collections.emptyEnumeration()

.synchronizedNavigableSet : java.util.Collections.synchronizedNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  Collections.synchronizedNavigableSet($expr$)

.checkedList : java.util.Collections.checkedList
	java.util.List [java.util.Collections]  →  Collections.checkedList($expr$, $arg$)

.emptySortedSet : java.util.Collections.emptySortedSet
	java.lang.Object [java.util.Collections]  →  Collections.emptySortedSet()

.addAll : java.util.Collections.addAll
	java.util.Collection [java.util.Collections]  →  Collections.addAll($expr$, $arg$)

.nCopies : java.util.Collections.nCopies
	INT [java.util.Collections]  →  Collections.nCopies($expr$, $arg$)

.unmodifiableMap : java.util.Collections.unmodifiableMap
	java.util.Map [java.util.Collections]  →  Collections.unmodifiableMap($expr$)

.emptyList : java.util.Collections.emptyList
	java.lang.Object [java.util.Collections]  →  Collections.emptyList()

.min : java.util.Collections.min
	java.util.Collection [java.util.Collections]  →  Collections.min($expr$, $arg$)

.emptySet : java.util.Collections.emptySet
	java.lang.Object [java.util.Collections]  →  Collections.emptySet()

.emptyMap : java.util.Collections.emptyMap
	java.lang.Object [java.util.Collections]  →  Collections.emptyMap()

.unmodifiableCollection : java.util.Collections.unmodifiableCollection
	java.util.Collection [java.util.Collections]  →  Collections.unmodifiableCollection($expr$)

.synchronizedList : java.util.Collections.synchronizedList
	java.util.List [java.util.Collections]  →  Collections.synchronizedList($expr$)

.newSetFromMap : java.util.Collections.newSetFromMap
	java.util.Map [java.util.Collections]  →  Collections.newSetFromMap($expr$)

.checkedCollection : java.util.Collections.checkedCollection
	java.util.Collection [java.util.Collections]  →  Collections.checkedCollection($expr$, $arg$)

.checkedNavigableSet : java.util.Collections.checkedNavigableSet
	java.util.NavigableSet [java.util.Collections]  →  Collections.checkedNavigableSet($expr$, $arg$)

.emptyNavigableMap : java.util.Collections.emptyNavigableMap
	java.lang.Object [java.util.Collections]  →  Collections.emptyNavigableMap()

.reverse : java.util.Collections.reverse
	java.util.List [java.util.Collections]  →  Collections.reverse($expr$)

.rotate : java.util.Collections.rotate
	java.util.List [java.util.Collections]  →  Collections.rotate($expr$, $arg$)

.lastIndexOfSubList : java.util.Collections.lastIndexOfSubList
	java.util.List [java.util.Collections]  →  Collections.lastIndexOfSubList($expr$, $arg$)

.synchronizedSortedSet : java.util.Collections.synchronizedSortedSet
	java.util.SortedSet [java.util.Collections]  →  Collections.synchronizedSortedSet($expr$)

.unmodifiableSortedSet : java.util.Collections.unmodifiableSortedSet
	java.util.SortedSet [java.util.Collections]  →  Collections.unmodifiableSortedSet($expr$)

.checkedNavigableMap : java.util.Collections.checkedNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  Collections.checkedNavigableMap($expr$, $arg$)

.max : java.util.Collections.max
	java.util.Collection [java.util.Collections]  →  Collections.max($expr$, $arg$)

.unmodifiableSortedMap : java.util.Collections.unmodifiableSortedMap
	java.util.SortedMap [java.util.Collections]  →  Collections.unmodifiableSortedMap($expr$)

.fill : java.util.Collections.fill
	java.util.List [java.util.Collections]  →  Collections.fill($expr$, $arg$)

.emptyNavigableSet : java.util.Collections.emptyNavigableSet
	java.lang.Object [java.util.Collections]  →  Collections.emptyNavigableSet()

.checkedSortedSet : java.util.Collections.checkedSortedSet
	java.util.SortedSet [java.util.Collections]  →  Collections.checkedSortedSet($expr$, $arg$)

.synchronizedMap : java.util.Collections.synchronizedMap
	java.util.Map [java.util.Collections]  →  Collections.synchronizedMap($expr$)

.checkedMap : java.util.Collections.checkedMap
	java.util.Map [java.util.Collections]  →  Collections.checkedMap($expr$, $arg$)

.singletonList : java.util.Collections.singletonList
	java.lang.Object [java.util.Collections]  →  Collections.singletonList($expr$)

.enumeration : java.util.Collections.enumeration
	java.util.Collection [java.util.Collections]  →  Collections.enumeration($expr$)

.unmodifiableNavigableMap : java.util.Collections.unmodifiableNavigableMap
	java.util.NavigableMap [java.util.Collections]  →  Collections.unmodifiableNavigableMap($expr$)

.shuffle : java.util.Collections.shuffle
	java.util.List [java.util.Collections]  →  Collections.shuffle($expr$, $arg$)

.swap : java.util.Collections.swap
	java.util.List [java.util.Collections]  →  Collections.swap($expr$, $arg$)

.copy : java.util.Collections.copy
	java.util.List [java.util.Collections]  →  Collections.copy($expr$, $arg$)

.singleton : java.util.Collections.singleton
	java.lang.Object [java.util.Collections]  →  Collections.singleton($expr$)

.disjoint : java.util.Collections.disjoint
	java.util.Collection [java.util.Collections]  →  Collections.disjoint($expr$, $arg$)

.frequency : java.util.Collections.frequency
	java.util.Collection [java.util.Collections]  →  Collections.frequency($expr$, $arg$)

.indexOfSubList : java.util.Collections.indexOfSubList
	java.util.List [java.util.Collections]  →  Collections.indexOfSubList($expr$, $arg$)

.checkedSet : java.util.Collections.checkedSet
	java.util.Set [java.util.Collections]  →  Collections.checkedSet($expr$, $arg$)

.emptySortedMap : java.util.Collections.emptySortedMap
	java.lang.Object [java.util.Collections]  →  Collections.emptySortedMap()

.sort : java.util.Collections.sort
	java.util.List [java.util.Collections]  →  Collections.sort($expr$, $arg$)

.binarySearch : java.util.Collections.binarySearch
	java.util.List [java.util.Collections]  →  Collections.binarySearch($expr$, $arg$)

.unmodifiableSet : java.util.Collections.unmodifiableSet
	java.util.Set [java.util.Collections]  →  Collections.unmodifiableSet($expr$)

.synchronizedSortedMap : java.util.Collections.synchronizedSortedMap
	java.util.SortedMap [java.util.Collections]  →  Collections.synchronizedSortedMap($expr$)

.replaceAll : java.util.Collections.replaceAll
	java.util.List [java.util.Collections]  →  Collections.replaceAll($expr$, $arg$)

.singletonMap : java.util.Collections.singletonMap
	java.lang.Object [java.util.Collections]  →  Collections.singletonMap($expr$, $arg$)

.emptyListIterator : java.util.Collections.emptyListIterator
	java.lang.Object [java.util.Collections]  →  Collections.emptyListIterator()

.list : java.util.Collections.list
	java.util.Enumeration [java.util.Collections]  →  Collections.list($expr$)


## Arrays

.compareUnsigned : java.util.Arrays.compareUnsigned
	scala.Array [java.util.Arrays]  →  Arrays.compareUnsigned($expr$, $arg$)

.mismatch : java.util.Arrays.mismatch
	scala.Array [java.util.Arrays]  →  Arrays.mismatch($expr$, $arg$)

.asList : java.util.Arrays.asList
	scala.Array [java.util.Arrays]  →  Arrays.asList($expr$)

.parallelPrefix : java.util.Arrays.parallelPrefix
	scala.Array [java.util.Arrays]  →  Arrays.parallelPrefix($expr$, $arg$)

.parallelSetAll : java.util.Arrays.parallelSetAll
	scala.Array [java.util.Arrays]  →  Arrays.parallelSetAll($expr$, $arg$)

.equals : java.util.Arrays.equals
	scala.Array [java.util.Arrays]  →  Arrays.equals($expr$, $arg$)

.deepHashCode : java.util.Arrays.deepHashCode
	scala.Array [java.util.Arrays]  →  Arrays.deepHashCode($expr$)

.copyOf : java.util.Arrays.copyOf
	scala.Array [java.util.Arrays]  →  Arrays.copyOf($expr$, $arg$)

.deepEquals : java.util.Arrays.deepEquals
	scala.Array [java.util.Arrays]  →  Arrays.deepEquals($expr$, $arg$)

.fill : java.util.Arrays.fill
	scala.Array [java.util.Arrays]  →  Arrays.fill($expr$, $arg$)

.stream : java.util.Arrays.stream
	scala.Array [java.util.Arrays]  →  Arrays.stream($expr$, $arg$)

.copyOfRange : java.util.Arrays.copyOfRange
	scala.Array [java.util.Arrays]  →  Arrays.copyOfRange($expr$, $arg$)

.deepToString : java.util.Arrays.deepToString
	scala.Array [java.util.Arrays]  →  Arrays.deepToString($expr$)

.parallelSort : java.util.Arrays.parallelSort
	scala.Array [java.util.Arrays]  →  Arrays.parallelSort($expr$, $arg$)

.toString : java.util.Arrays.toString
	scala.Array [java.util.Arrays]  →  Arrays.toString($expr$)

.setAll : java.util.Arrays.setAll
	scala.Array [java.util.Arrays]  →  Arrays.setAll($expr$, $arg$)

.sort : java.util.Arrays.sort
	scala.Array [java.util.Arrays]  →  Arrays.sort($expr$, $arg$)

.binarySearch : java.util.Arrays.binarySearch
	scala.Array [java.util.Arrays]  →  Arrays.binarySearch($expr$, $arg$)

.compare : java.util.Arrays.compare
	scala.Array [java.util.Arrays]  →  Arrays.compare($expr$, $arg$)

.spliterator : java.util.Arrays.spliterator
	scala.Array [java.util.Arrays]  →  Arrays.spliterator($expr$, $arg$)

.hashCode : java.util.Arrays.hashCode
	scala.Array [java.util.Arrays]  →  Arrays.hashCode($expr$)


## String

.join : java.lang.String.join
	java.lang.CharSequence [java.lang.String]  →  String.join($expr$, $arg$)

.copyValueOf : java.lang.String.copyValueOf
	scala.Array [java.lang.String]  →  String.copyValueOf($expr$, $arg$)

.valueOf : java.lang.String.valueOf
	scala.Array [java.lang.String]  →  String.valueOf($expr$, $arg$)
	FLOAT [java.lang.String]  →  String.valueOf($expr$)
	CHAR [java.lang.String]  →  String.valueOf($expr$)
	DOUBLE [java.lang.String]  →  String.valueOf($expr$)
	INT [java.lang.String]  →  String.valueOf($expr$)
	java.lang.Object [java.lang.String]  →  String.valueOf($expr$)
	BOOLEAN [java.lang.String]  →  String.valueOf($expr$)
	LONG [java.lang.String]  →  String.valueOf($expr$)

.format : java.lang.String.format
	java.lang.String [java.lang.String]  →  String.format($expr$, $arg$)
	java.util.Locale [java.lang.String]  →  String.format($expr$, $arg$)

