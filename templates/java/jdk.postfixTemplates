## Templates for JDK ##

## Optional

.ofNullable : ofNullable
	java.lang.Object [java.util.Optional]  →  java.util.Optional.ofNullable($expr$)

.of : of
	java.lang.Object [java.util.Optional]  →  java.util.Optional.of($expr$)

.empty : empty
	java.lang.Object [java.util.Optional]  →  java.util.Optional.empty()


## Collectors

.joining : joining
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(joining($arg$))
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(joining())

.partitioningBy : partitioningBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(partitioningBy($arg$))

.summingLong : summingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(summingLong())

.groupingBy : groupingBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(groupingBy($arg$))

.summarizingLong : summarizingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(summarizingLong())

.minBy : minBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(minBy())

.summarizingInt : summarizingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(summarizingInt())

.toSet : toSet
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(toSet())

.toMap : toMap
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(toMap($arg$))

.averagingLong : averagingLong
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(averagingLong())

.toList : toList
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(toList())

.mapping : mapping
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(mapping($arg$))

.summingDouble : summingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(summingDouble())

.summingInt : summingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(summingInt())

.toConcurrentMap : toConcurrentMap
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(toConcurrentMap($arg$))

.maxBy : maxBy
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(maxBy())

.counting : counting
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(counting())

.groupingByConcurrent : groupingByConcurrent
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(groupingByConcurrent($arg$))

.reducing : reducing
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(reducing())
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(reducing($arg$))

.summarizingDouble : summarizingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(summarizingDouble())

.toCollection : toCollection
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(toCollection())

.averagingDouble : averagingDouble
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(averagingDouble())

.collectingAndThen : collectingAndThen
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(collectingAndThen($arg$))

.averagingInt : averagingInt
	java.util.stream.Stream [java.util.stream.Collectors]  →  $expr$.collect(averagingInt())

